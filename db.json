{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"d0c7c4c7750d80fe5e3f2f23c2e5d6ecb97cd162","modified":1695740871090},{"_id":"source/_posts/.DS_Store","hash":"5370bb07dd0e2bfad686eef567661c3b3dfd2a32","modified":1694952099201},{"_id":"source/categories/index.md","hash":"12127e27b852529c14ee1cf51abee44de88b9792","modified":1694347789715},{"_id":"source/_posts/FlinkIDEAQuickStart.md","hash":"fdc9120dcbd9fd1e07f068395c1ba1c63c45dda1","modified":1694346951426},{"_id":"source/_posts/FlinkScalaREPL.md","hash":"0e89ac5c783d4a0ad8cd38a83a2ded2bb05d3b78","modified":1694347036661},{"_id":"source/_posts/FlinkLocalSetupTutorial.md","hash":"2b8f88b834fec0f5497fdbbb759d62e8ec0a70a8","modified":1694346984591},{"_id":"source/tags/index.md","hash":"f01132e7b686b45123ae7e87d33f8904b8b35941","modified":1694347845640},{"_id":"source/_posts/Links.md","hash":"501c9cba95c6f27b652f3fc8b7cd92ab1f3f494c","modified":1694959119728},{"_id":"source/_posts/MongoDB安装.md","hash":"75d3f895099a7fb71410c861f19c37783092edbb","modified":1694514312293},{"_id":"source/_posts/Scala快速入门.md","hash":"db853a7a2d4c85f2d73f6b7fc769445956c0c379","modified":1694514255031},{"_id":"source/_posts/Spark1.3.0集群搭建.md","hash":"34cc9b1b329fba51dfaa996e9667fee7d971b905","modified":1694589177728},{"_id":"source/_posts/Spark运行环境搭建.md","hash":"4f9da3f7d8e5516937f7218cea55e200c67bff92","modified":1694346654901},{"_id":"source/_posts/hello-world.md","hash":"d353d6cc5136d12bd71ae09e5f63a70ec669e8ac","modified":1694347502076},{"_id":"source/_posts/剑指Offer.md","hash":"c83c7e43c0bfcdbb5e8f8d371812aba6e2d4f574","modified":1694516105430},{"_id":"source/_posts/Spark源码阅读环境搭建.md","hash":"9bdeb5a0b06dfc3b90abeb7fd9e1ac26a13020d5","modified":1694346774612},{"_id":"source/_posts/剖析spark-shell.md","hash":"ccfffc67469266c277fddb7660ecba0bb10c1e25","modified":1694346717627},{"_id":"source/_posts/Mac安装JDK1.7和JDK1.8.md","hash":"bcc556d7f5338cfb0d9a017d7f8478bda330fcb7","modified":1694514280851},{"_id":"source/_posts/牛客网LeetCode编程题.md","hash":"82597bd61fad0679f7061c4be6e90ea52828e009","modified":1696915812183},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514806389000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514806389000},{"_id":"themes/next/.DS_Store","hash":"2ff4356a6b0fda3cd1a5919dcddc7b27bd455e61","modified":1694591211107},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514806389000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514806389000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514806389000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514806389000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514806389000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514806389000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514806389000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514806389000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514806389000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/_config.yml","hash":"ff81086514ae98d9c116246fc0f0e4298dd1ca46","modified":1694591171925},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514806389000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514806389000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1514806389000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514806389000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514806389000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514806389000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514806389000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/layout/.DS_Store","hash":"618c88dd5465b6d56586429772f56967865054cf","modified":1694594576636},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514806389000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514806389000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514806389000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"ec747c9b69bc13c8957183be94341046ea3962ea","modified":1694591313259},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514806389000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514806389000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/header.swig","hash":"0c7a21a532f177e99d217c21754837e506c806fc","modified":1694591433267},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514806389000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/js/src/post-details.js","hash":"7b90743b51aa6413f635adc526ddd4baaca0861f","modified":1695873130837},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"public/categories/index.html","hash":"ffb200c73fd71c8488074c7f86143bdc93466198","modified":1695873172432},{"_id":"public/2023/09/12/Links/index.html","hash":"eed3e93314de6750b33358ee988a59177d4ddce1","modified":1695873172432},{"_id":"public/tags/index.html","hash":"91b44da94e9cc4bdda9d3370087e95aa2700710a","modified":1695873172432},{"_id":"public/2019/09/01/hello-world/index.html","hash":"9d074992d5a0d7a353880c657c4037a9b9a85932","modified":1695873172432},{"_id":"public/archives/2019/10/index.html","hash":"cd238c0e04b0ef4efa7689d2dea64dd33a90853b","modified":1695873172432},{"_id":"public/archives/2019/09/index.html","hash":"1550a07b51069457fbea81281fd7193dea784969","modified":1695873172432},{"_id":"public/archives/2023/index.html","hash":"e2f0acfbf978899339beccb42fd4fff1f20cbe54","modified":1695873172432},{"_id":"public/archives/2023/09/index.html","hash":"3e702f593d69002c492625288f1159cde2c0602d","modified":1695873172432},{"_id":"public/tags/MongoDB/index.html","hash":"9abbd98c1ba934674462cd640d8742ae560a3941","modified":1695873172432},{"_id":"public/tags/Links/index.html","hash":"956ad46d4a0dfda985fe7ac9735e3d8a65353f6b","modified":1695873172432},{"_id":"public/tags/Scala/index.html","hash":"5e3294eaab3aa9281a40e74f3122fb0fef01bed6","modified":1695873172432},{"_id":"public/tags/Spark/index.html","hash":"47a04f38b51c97a59ed2c0472d95dae412e0f4d0","modified":1695873172432},{"_id":"public/categories/Flink/index.html","hash":"88fbe48e00d597564e844fcf323363a38c105741","modified":1695873172432},{"_id":"public/tags/Java/index.html","hash":"aeab08e8bed08b4fe79943a7bfd00b2ab4e150c8","modified":1695873172432},{"_id":"public/categories/MongoDB/index.html","hash":"a00b34b3c046a3e7d911437d93e47163e9a22333","modified":1695873172432},{"_id":"public/tags/Flink/index.html","hash":"2d60b0fa364bea54cc5da4e6703b7bf15d9b5a1d","modified":1695873172432},{"_id":"public/categories/Links/index.html","hash":"cde394b484b85bcf14b74a4ead11dcffe717d0e6","modified":1695873172432},{"_id":"public/tags/Algorithm/index.html","hash":"6bdcc7e580a77af913761807442072e3b59cc360","modified":1695873172432},{"_id":"public/categories/Scala/index.html","hash":"525085cd119eb279e280a45059570b4d8f5e6670","modified":1695873172432},{"_id":"public/categories/Spark/index.html","hash":"108493467735701b1c15343f261ca76a589cca90","modified":1695873172432},{"_id":"public/categories/Algorithm/index.html","hash":"574c80f2070e81c99e07d4ce88e8e563aad9bb66","modified":1695873172432},{"_id":"public/categories/Java/index.html","hash":"a78a12153ab593755883152870a9b56d4abda963","modified":1695873172432},{"_id":"public/2023/09/12/牛客网LeetCode编程题/index.html","hash":"9e6eb6ebb1e33d2d849d75b7d01f24065d3acc34","modified":1696915825681},{"_id":"public/2023/09/12/剑指Offer/index.html","hash":"3372860313752ea573f8236e5e92b7e7f48b9775","modified":1695873172432},{"_id":"public/2019/10/15/FlinkIDEAQuickStart/index.html","hash":"237799e08d20917200de8e28d340adde907e0854","modified":1695873172432},{"_id":"public/2019/10/15/FlinkLocalSetupTutorial/index.html","hash":"4f4c3a080fd500dd9dd96304d2aa57cf85ad2839","modified":1695873172432},{"_id":"public/2019/09/18/MongoDB安装/index.html","hash":"bc17ad9f36dd50df111c94fedbb87bc010a5babe","modified":1695873172432},{"_id":"public/2019/09/15/Spark源码阅读环境搭建/index.html","hash":"df8455bf5b8e8db3673825426eff68c41b940f08","modified":1695873172432},{"_id":"public/2019/09/14/剖析spark-shell/index.html","hash":"82ba9cd7e0e46eb118bbb52ba97e4f481705b48d","modified":1695873172432},{"_id":"public/2019/09/13/Spark运行环境搭建/index.html","hash":"b5d5cf43881cf9fbe89245796999d6cd2dd58260","modified":1695873172432},{"_id":"public/2019/09/13/Spark1.3.0集群搭建/index.html","hash":"a2d10276f6f1b29e8f2b81a53b15ae922f8eeb35","modified":1695873172432},{"_id":"public/2019/09/13/Mac安装JDK1.7和JDK1.8/index.html","hash":"56a13dd5f3ac70311356f7856a403f7b46dfc1b1","modified":1695873172432},{"_id":"public/2019/09/13/Scala快速入门/index.html","hash":"4b2ea7fec9f2f8820f069566b654c53de934b547","modified":1695873172432},{"_id":"public/archives/index.html","hash":"24a702b16bc532d198e51f17aca063b22fd2a339","modified":1695873172432},{"_id":"public/archives/2019/index.html","hash":"46467e318fd444a4c0f84c29ad8a86f44fa27080","modified":1695873172432},{"_id":"public/2019/10/16/FlinkScalaREPL/index.html","hash":"792657c2c9ca96e6ba2d4cf55614488ce3c018f1","modified":1695873172432},{"_id":"public/index.html","hash":"97e7cb17093924dabdedf087fc29ebb225c706f1","modified":1695873172432},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1695873172432},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1695873172432},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1695873172432},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1695873172432},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1695873172432},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1695873172432},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1695873172432},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1695873172432},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1695873172432},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1695873172432},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1695873172432},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1695873172432},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1695873172432},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1695873172432},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1695873172432},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1695873172432},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1695873172432},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1695873172432},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1695873172432},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1695873172432},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1695873172432},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1695873172432},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1695873172432},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1695873172432},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1695873172432},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1695873172432},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1695873172432},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1695873172432},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1695873172432},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1695873172432},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1695873172432},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1695873172432},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1695873172432},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1695873172432},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1695873172432},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1695873172432},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1695873172432},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1695873172432},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1695873172432},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1695873172432},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1695873172432},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1695873172432},{"_id":"public/js/src/post-details.js","hash":"7b90743b51aa6413f635adc526ddd4baaca0861f","modified":1695873172432},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1695873172432},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1695873172432},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1695873172432},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1695873172432},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1695873172432},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1695873172432},{"_id":"public/lib/fastclick/README.html","hash":"1c2cb1168e9df516e311177476e499990453965d","modified":1695873172432},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1695873172432},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"bc6cf8951a99074bdc6ec9172f03fb7c0e412729","modified":1695873172432},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1695873172432},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1695873172432},{"_id":"public/lib/jquery_lazyload/README.html","hash":"96a5c2cc00de5b338ae972c1e8de879d2d919608","modified":1695873172432},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1695873172432},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1695873172432},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1695873172432},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1695873172432},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1695873172432},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1695873172432},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1695873172432},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1695873172432},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1695873172432},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1695873172432},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1695873172432},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1695873172432},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1695873172432},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1695873172432},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1695873172432},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1695873172432},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1695873172432},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1695873172432},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1695873172432},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1695873172432},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1695873172432},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1695873172432},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1695873172432},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1695873172432},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1695873172432},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1695873172432},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1695873172432},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1695873172432},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1695873172432},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1695873172432},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1695873172432},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1695873172432},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1695873172432},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1695873172432},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1695873172432},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1695873172432},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1695873172432},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1695873172432},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1695873172432},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1695873172432},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1695873172432},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1695873172432},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1695873172432},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1695873172432},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1695873172432},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1695873172432},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1695873172432},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1695873172432},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1695873172432},{"_id":"public/css/main.css","hash":"4ba9ce9041c10e037482ae356ba25d4da40b88a2","modified":1695873172432},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1695873172432},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1695873172432},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1695873172432},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1695873172432}],"Category":[{"name":"Flink","_id":"cln2n3nuz0004yuzq532xhejf"},{"name":"MongoDB","_id":"cln2n3nwr000kyuzqfpabhonp"},{"name":"Links","_id":"cln2n3nx6000ryuzq47l8awld"},{"name":"Scala","_id":"cln2n3nxx000xyuzq26n0a8a9"},{"name":"Spark","_id":"cln2n3ny60012yuzqhebudnph"},{"name":"Algorithm","_id":"cln2n3nym001dyuzq7xrz6hxn"},{"name":"Java","_id":"cln2n3nzb001lyuzqfk0g2gkk"}],"Data":[],"Page":[{"title":"categories","date":"2023-09-10T12:07:43.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-09-10 20:07:43\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-09-10T12:09:49.715Z","path":"categories/index.html","comments":1,"_id":"cln2n3ntx0000yuzq1su84hqz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-09-10T12:07:21.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-09-10 20:07:21\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-09-10T12:10:45.640Z","path":"tags/index.html","comments":1,"_id":"cln2n3nup0002yuzq1r7u6c7u","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"FlinkIDEAQuickStart","date":"2019-10-15T10:36:06.000Z","_content":"Flink IDEA QuickStart\n\n## Create Project\n\n### Use Maven Archetypes\n\n```\nmkdir /Users/xdx/Workspace/FlinkProjects\nvim quickstart.sh\n/* Input:\nmvn archetype:generate \\\n    -DarchetypeGroupId=org.apache.flink \\\n    -DarchetypeArtifactId=flink-quickstart-scala \\\n    -DarchetypeVersion=1.9.0\n*///:~\nsh quickstart.sh\n/* Input:\nDefine value for property 'groupId': com.mafengwo.recommend.flink.quickstart\nDefine value for property 'artifactId': flink-quickstart-scala\n*///:~\n```\n\n### Run the QuickStart Script\n\n```\ncurl https://flink.apache.org/q/quickstart-scala.sh | bash -s 1.9.0\n```\n\n### Install Tree\n\n```\nbrew install tree\ntree flink-quickstart-scala\n/* Output:\nflink-quickstart-scala/\n├── pom.xml\n└── src\n    └── main\n        ├── resources\n        │   └── log4j.properties\n        └── scala\n            └── com\n                └── mafengwo\n                    └── recommend\n                        └── flink\n                            └── quickstart\n                                ├── BatchJob.scala\n                                └── StreamingJob.scala\n\n9 directories, 4 files\n*///:~\n```\n\n## IDEA Open Project\n\n```scala\n//: WindowWordCount\npackage com.mafengwo.recommend.flink.quickstart\n\nimport org.apache.flink.streaming.api.scala._\nimport org.apache.flink.streaming.api.windowing.time.Time\n\nobject WindowWordCount {\n  def main(args: Array[String]) {\n\n    val env = StreamExecutionEnvironment.getExecutionEnvironment\n    val text = env.socketTextStream(\"localhost\", 9999)\n\n    val counts = text.flatMap { _.toLowerCase.split(\"\\\\W+\") filter { _.nonEmpty } }\n      .map { (_, 1) }\n      .keyBy(0)\n      .timeWindow(Time.seconds(5))\n      .sum(1)\n\n    counts.print()\n\n    env.execute(\"Window Stream WordCount\")\n  }\n}\n```\n\n```\n//: window-word-count.sh\n#!/usr/bin/env bash\n\n# parameter\nPROJECT_PATH=/Users/xdx/Workspace/FlinkProjects/flink-quickstart-scala\n\n/usr/local/flink/flink-1.9.0/bin/flink \\\n    run \\\n    ${PROJECT_PATH}/target/flink-quickstart-scala-1.0-SNAPSHOT.jar\n```\n\n```\n//: pom.xml\n<mainClass>com.mafengwo.recommend.flink.quickstart.WindowWordCount</mainClass>\n```\n\n```\nnc -lk 9999\nsh window-word-count.sh\n```","source":"_posts/FlinkIDEAQuickStart.md","raw":"---\ntitle: FlinkIDEAQuickStart\ndate: 2019-10-15 18:36:06\ntags: Flink\ncategories: Flink\n---\nFlink IDEA QuickStart\n\n## Create Project\n\n### Use Maven Archetypes\n\n```\nmkdir /Users/xdx/Workspace/FlinkProjects\nvim quickstart.sh\n/* Input:\nmvn archetype:generate \\\n    -DarchetypeGroupId=org.apache.flink \\\n    -DarchetypeArtifactId=flink-quickstart-scala \\\n    -DarchetypeVersion=1.9.0\n*///:~\nsh quickstart.sh\n/* Input:\nDefine value for property 'groupId': com.mafengwo.recommend.flink.quickstart\nDefine value for property 'artifactId': flink-quickstart-scala\n*///:~\n```\n\n### Run the QuickStart Script\n\n```\ncurl https://flink.apache.org/q/quickstart-scala.sh | bash -s 1.9.0\n```\n\n### Install Tree\n\n```\nbrew install tree\ntree flink-quickstart-scala\n/* Output:\nflink-quickstart-scala/\n├── pom.xml\n└── src\n    └── main\n        ├── resources\n        │   └── log4j.properties\n        └── scala\n            └── com\n                └── mafengwo\n                    └── recommend\n                        └── flink\n                            └── quickstart\n                                ├── BatchJob.scala\n                                └── StreamingJob.scala\n\n9 directories, 4 files\n*///:~\n```\n\n## IDEA Open Project\n\n```scala\n//: WindowWordCount\npackage com.mafengwo.recommend.flink.quickstart\n\nimport org.apache.flink.streaming.api.scala._\nimport org.apache.flink.streaming.api.windowing.time.Time\n\nobject WindowWordCount {\n  def main(args: Array[String]) {\n\n    val env = StreamExecutionEnvironment.getExecutionEnvironment\n    val text = env.socketTextStream(\"localhost\", 9999)\n\n    val counts = text.flatMap { _.toLowerCase.split(\"\\\\W+\") filter { _.nonEmpty } }\n      .map { (_, 1) }\n      .keyBy(0)\n      .timeWindow(Time.seconds(5))\n      .sum(1)\n\n    counts.print()\n\n    env.execute(\"Window Stream WordCount\")\n  }\n}\n```\n\n```\n//: window-word-count.sh\n#!/usr/bin/env bash\n\n# parameter\nPROJECT_PATH=/Users/xdx/Workspace/FlinkProjects/flink-quickstart-scala\n\n/usr/local/flink/flink-1.9.0/bin/flink \\\n    run \\\n    ${PROJECT_PATH}/target/flink-quickstart-scala-1.0-SNAPSHOT.jar\n```\n\n```\n//: pom.xml\n<mainClass>com.mafengwo.recommend.flink.quickstart.WindowWordCount</mainClass>\n```\n\n```\nnc -lk 9999\nsh window-word-count.sh\n```","slug":"FlinkIDEAQuickStart","published":1,"updated":"2023-09-10T11:55:51.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln2n3nua0001yuzq9a7e0r2s","content":"<p>Flink IDEA QuickStart</p>\n<h2 id=\"Create-Project\"><a href=\"#Create-Project\" class=\"headerlink\" title=\"Create Project\"></a>Create Project</h2><h3 id=\"Use-Maven-Archetypes\"><a href=\"#Use-Maven-Archetypes\" class=\"headerlink\" title=\"Use Maven Archetypes\"></a>Use Maven Archetypes</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /Users/xdx/Workspace/FlinkProjects</span><br><span class=\"line\">vim quickstart.sh</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">mvn archetype:generate \\</span><br><span class=\"line\">    -DarchetypeGroupId=org.apache.flink \\</span><br><span class=\"line\">    -DarchetypeArtifactId=flink-quickstart-scala \\</span><br><span class=\"line\">    -DarchetypeVersion=1.9.0</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">sh quickstart.sh</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">Define value for property &#x27;groupId&#x27;: com.mafengwo.recommend.flink.quickstart</span><br><span class=\"line\">Define value for property &#x27;artifactId&#x27;: flink-quickstart-scala</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Run-the-QuickStart-Script\"><a href=\"#Run-the-QuickStart-Script\" class=\"headerlink\" title=\"Run the QuickStart Script\"></a>Run the QuickStart Script</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://flink.apache.org/q/quickstart-scala.sh | bash -s 1.9.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Install-Tree\"><a href=\"#Install-Tree\" class=\"headerlink\" title=\"Install Tree\"></a>Install Tree</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install tree</span><br><span class=\"line\">tree flink-quickstart-scala</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">flink-quickstart-scala/</span><br><span class=\"line\">├── pom.xml</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    └── main</span><br><span class=\"line\">        ├── resources</span><br><span class=\"line\">        │   └── log4j.properties</span><br><span class=\"line\">        └── scala</span><br><span class=\"line\">            └── com</span><br><span class=\"line\">                └── mafengwo</span><br><span class=\"line\">                    └── recommend</span><br><span class=\"line\">                        └── flink</span><br><span class=\"line\">                            └── quickstart</span><br><span class=\"line\">                                ├── BatchJob.scala</span><br><span class=\"line\">                                └── StreamingJob.scala</span><br><span class=\"line\"></span><br><span class=\"line\">9 directories, 4 files</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"IDEA-Open-Project\"><a href=\"#IDEA-Open-Project\" class=\"headerlink\" title=\"IDEA Open Project\"></a>IDEA Open Project</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//: WindowWordCount</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.mafengwo.recommend.flink.quickstart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.flink.streaming.api.scala._</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.flink.streaming.api.windowing.time.<span class=\"type\">Time</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">WindowWordCount</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> env = <span class=\"type\">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class=\"line\">    <span class=\"keyword\">val</span> text = env.socketTextStream(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">9999</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> counts = text.flatMap &#123; _.toLowerCase.split(<span class=\"string\">&quot;\\\\W+&quot;</span>) filter &#123; _.nonEmpty &#125; &#125;</span><br><span class=\"line\">      .map &#123; (_, <span class=\"number\">1</span>) &#125;</span><br><span class=\"line\">      .keyBy(<span class=\"number\">0</span>)</span><br><span class=\"line\">      .timeWindow(<span class=\"type\">Time</span>.seconds(<span class=\"number\">5</span>))</span><br><span class=\"line\">      .sum(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    counts.print()</span><br><span class=\"line\"></span><br><span class=\"line\">    env.execute(<span class=\"string\">&quot;Window Stream WordCount&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: window-word-count.sh</span><br><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\"></span><br><span class=\"line\"># parameter</span><br><span class=\"line\">PROJECT_PATH=/Users/xdx/Workspace/FlinkProjects/flink-quickstart-scala</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/local/flink/flink-1.9.0/bin/flink \\</span><br><span class=\"line\">    run \\</span><br><span class=\"line\">    $&#123;PROJECT_PATH&#125;/target/flink-quickstart-scala-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: pom.xml</span><br><span class=\"line\">&lt;mainClass&gt;com.mafengwo.recommend.flink.quickstart.WindowWordCount&lt;/mainClass&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -lk 9999</span><br><span class=\"line\">sh window-word-count.sh</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Flink IDEA QuickStart</p>\n<h2 id=\"Create-Project\"><a href=\"#Create-Project\" class=\"headerlink\" title=\"Create Project\"></a>Create Project</h2><h3 id=\"Use-Maven-Archetypes\"><a href=\"#Use-Maven-Archetypes\" class=\"headerlink\" title=\"Use Maven Archetypes\"></a>Use Maven Archetypes</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /Users/xdx/Workspace/FlinkProjects</span><br><span class=\"line\">vim quickstart.sh</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">mvn archetype:generate \\</span><br><span class=\"line\">    -DarchetypeGroupId=org.apache.flink \\</span><br><span class=\"line\">    -DarchetypeArtifactId=flink-quickstart-scala \\</span><br><span class=\"line\">    -DarchetypeVersion=1.9.0</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">sh quickstart.sh</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">Define value for property &#x27;groupId&#x27;: com.mafengwo.recommend.flink.quickstart</span><br><span class=\"line\">Define value for property &#x27;artifactId&#x27;: flink-quickstart-scala</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Run-the-QuickStart-Script\"><a href=\"#Run-the-QuickStart-Script\" class=\"headerlink\" title=\"Run the QuickStart Script\"></a>Run the QuickStart Script</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://flink.apache.org/q/quickstart-scala.sh | bash -s 1.9.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Install-Tree\"><a href=\"#Install-Tree\" class=\"headerlink\" title=\"Install Tree\"></a>Install Tree</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install tree</span><br><span class=\"line\">tree flink-quickstart-scala</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">flink-quickstart-scala/</span><br><span class=\"line\">├── pom.xml</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    └── main</span><br><span class=\"line\">        ├── resources</span><br><span class=\"line\">        │   └── log4j.properties</span><br><span class=\"line\">        └── scala</span><br><span class=\"line\">            └── com</span><br><span class=\"line\">                └── mafengwo</span><br><span class=\"line\">                    └── recommend</span><br><span class=\"line\">                        └── flink</span><br><span class=\"line\">                            └── quickstart</span><br><span class=\"line\">                                ├── BatchJob.scala</span><br><span class=\"line\">                                └── StreamingJob.scala</span><br><span class=\"line\"></span><br><span class=\"line\">9 directories, 4 files</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"IDEA-Open-Project\"><a href=\"#IDEA-Open-Project\" class=\"headerlink\" title=\"IDEA Open Project\"></a>IDEA Open Project</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//: WindowWordCount</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.mafengwo.recommend.flink.quickstart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.flink.streaming.api.scala._</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.flink.streaming.api.windowing.time.<span class=\"type\">Time</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">WindowWordCount</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> env = <span class=\"type\">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class=\"line\">    <span class=\"keyword\">val</span> text = env.socketTextStream(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">9999</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> counts = text.flatMap &#123; _.toLowerCase.split(<span class=\"string\">&quot;\\\\W+&quot;</span>) filter &#123; _.nonEmpty &#125; &#125;</span><br><span class=\"line\">      .map &#123; (_, <span class=\"number\">1</span>) &#125;</span><br><span class=\"line\">      .keyBy(<span class=\"number\">0</span>)</span><br><span class=\"line\">      .timeWindow(<span class=\"type\">Time</span>.seconds(<span class=\"number\">5</span>))</span><br><span class=\"line\">      .sum(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    counts.print()</span><br><span class=\"line\"></span><br><span class=\"line\">    env.execute(<span class=\"string\">&quot;Window Stream WordCount&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: window-word-count.sh</span><br><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\"></span><br><span class=\"line\"># parameter</span><br><span class=\"line\">PROJECT_PATH=/Users/xdx/Workspace/FlinkProjects/flink-quickstart-scala</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/local/flink/flink-1.9.0/bin/flink \\</span><br><span class=\"line\">    run \\</span><br><span class=\"line\">    $&#123;PROJECT_PATH&#125;/target/flink-quickstart-scala-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: pom.xml</span><br><span class=\"line\">&lt;mainClass&gt;com.mafengwo.recommend.flink.quickstart.WindowWordCount&lt;/mainClass&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -lk 9999</span><br><span class=\"line\">sh window-word-count.sh</span><br></pre></td></tr></table></figure>"},{"title":"FlinkLocalSetupTutorial","date":"2019-10-15T09:00:05.000Z","_content":"Flink Local Setup Tutorial\n\n## Download and Start Flink\n\n```\njava -version\n/* Output:\njava version \"1.8.0_71\"\nJava(TM) SE Runtime Environment (build 1.8.0_71-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 25.71-b15, mixed mode)\n*///:~\nmkdir ~/Workspace/Softwares\ncd ~/Workspace/Softwares\nwget http://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.9.0/flink-1.9.0-bin-scala_2.11.tgz\ntar -xzvf flink-1.9.0-bin-scala_2.11.tgz\ncd flink-1.9.0\n```\n\n## Start a Local Flink Cluster\n\n```\n./bin/start-cluster.sh\nhttp://localhost:8081/#/overview\ntail log/flink-*-standalonesession-*.log\n/* Output:\n...\n2019-10-15 17:38:10,670 INFO  org.apache.flink.runtime.dispatcher.DispatcherRestEndpoint    - Web frontend listening at http://localhost:8081.\n...\n*///:~\n```\n\n## Run the Example\n\n```\nnc -l 9000\ncd flink-1.9.0\n./bin/flink run examples/streaming/SocketWindowWordCount.jar --port 9000\n/* Input:\nlorem ipsum\nipsum ipsum ipsum\nbye\n*///:~\ntail -f log/flink-*-taskexecutor-*.out\n/* Output:\nlorem : 1\nbye : 1\nipsum : 4\n*///:~\n./bin/stop-cluster.sh\n/* Output:\nStopping taskexecutor daemon (pid: 28517) on host xdxdeMacBook-Pro.local.\nNo standalonesession daemon (pid: 28100) is running anymore on xdxdeMacBook-Pro.local.\n*///:~\n```","source":"_posts/FlinkLocalSetupTutorial.md","raw":"---\ntitle: FlinkLocalSetupTutorial\ndate: 2019-10-15 17:00:05\ntags: Flink\ncategories: Flink\n---\nFlink Local Setup Tutorial\n\n## Download and Start Flink\n\n```\njava -version\n/* Output:\njava version \"1.8.0_71\"\nJava(TM) SE Runtime Environment (build 1.8.0_71-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 25.71-b15, mixed mode)\n*///:~\nmkdir ~/Workspace/Softwares\ncd ~/Workspace/Softwares\nwget http://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.9.0/flink-1.9.0-bin-scala_2.11.tgz\ntar -xzvf flink-1.9.0-bin-scala_2.11.tgz\ncd flink-1.9.0\n```\n\n## Start a Local Flink Cluster\n\n```\n./bin/start-cluster.sh\nhttp://localhost:8081/#/overview\ntail log/flink-*-standalonesession-*.log\n/* Output:\n...\n2019-10-15 17:38:10,670 INFO  org.apache.flink.runtime.dispatcher.DispatcherRestEndpoint    - Web frontend listening at http://localhost:8081.\n...\n*///:~\n```\n\n## Run the Example\n\n```\nnc -l 9000\ncd flink-1.9.0\n./bin/flink run examples/streaming/SocketWindowWordCount.jar --port 9000\n/* Input:\nlorem ipsum\nipsum ipsum ipsum\nbye\n*///:~\ntail -f log/flink-*-taskexecutor-*.out\n/* Output:\nlorem : 1\nbye : 1\nipsum : 4\n*///:~\n./bin/stop-cluster.sh\n/* Output:\nStopping taskexecutor daemon (pid: 28517) on host xdxdeMacBook-Pro.local.\nNo standalonesession daemon (pid: 28100) is running anymore on xdxdeMacBook-Pro.local.\n*///:~\n```","slug":"FlinkLocalSetupTutorial","published":1,"updated":"2023-09-10T11:56:24.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln2n3nur0003yuzq1ucse03q","content":"<p>Flink Local Setup Tutorial</p>\n<h2 id=\"Download-and-Start-Flink\"><a href=\"#Download-and-Start-Flink\" class=\"headerlink\" title=\"Download and Start Flink\"></a>Download and Start Flink</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">java version &quot;1.8.0_71&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_71-b15)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.71-b15, mixed mode)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">mkdir ~/Workspace/Softwares</span><br><span class=\"line\">cd ~/Workspace/Softwares</span><br><span class=\"line\">wget http://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.9.0/flink-1.9.0-bin-scala_2.11.tgz</span><br><span class=\"line\">tar -xzvf flink-1.9.0-bin-scala_2.11.tgz</span><br><span class=\"line\">cd flink-1.9.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Start-a-Local-Flink-Cluster\"><a href=\"#Start-a-Local-Flink-Cluster\" class=\"headerlink\" title=\"Start a Local Flink Cluster\"></a>Start a Local Flink Cluster</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/start-cluster.sh</span><br><span class=\"line\">http://localhost:8081/#/overview</span><br><span class=\"line\">tail log/flink-*-standalonesession-*.log</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">...</span><br><span class=\"line\">2019-10-15 17:38:10,670 INFO  org.apache.flink.runtime.dispatcher.DispatcherRestEndpoint    - Web frontend listening at http://localhost:8081.</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Run-the-Example\"><a href=\"#Run-the-Example\" class=\"headerlink\" title=\"Run the Example\"></a>Run the Example</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -l 9000</span><br><span class=\"line\">cd flink-1.9.0</span><br><span class=\"line\">./bin/flink run examples/streaming/SocketWindowWordCount.jar --port 9000</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">lorem ipsum</span><br><span class=\"line\">ipsum ipsum ipsum</span><br><span class=\"line\">bye</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">tail -f log/flink-*-taskexecutor-*.out</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">lorem : 1</span><br><span class=\"line\">bye : 1</span><br><span class=\"line\">ipsum : 4</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">./bin/stop-cluster.sh</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Stopping taskexecutor daemon (pid: 28517) on host xdxdeMacBook-Pro.local.</span><br><span class=\"line\">No standalonesession daemon (pid: 28100) is running anymore on xdxdeMacBook-Pro.local.</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Flink Local Setup Tutorial</p>\n<h2 id=\"Download-and-Start-Flink\"><a href=\"#Download-and-Start-Flink\" class=\"headerlink\" title=\"Download and Start Flink\"></a>Download and Start Flink</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">java version &quot;1.8.0_71&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_71-b15)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.71-b15, mixed mode)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">mkdir ~/Workspace/Softwares</span><br><span class=\"line\">cd ~/Workspace/Softwares</span><br><span class=\"line\">wget http://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.9.0/flink-1.9.0-bin-scala_2.11.tgz</span><br><span class=\"line\">tar -xzvf flink-1.9.0-bin-scala_2.11.tgz</span><br><span class=\"line\">cd flink-1.9.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Start-a-Local-Flink-Cluster\"><a href=\"#Start-a-Local-Flink-Cluster\" class=\"headerlink\" title=\"Start a Local Flink Cluster\"></a>Start a Local Flink Cluster</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/start-cluster.sh</span><br><span class=\"line\">http://localhost:8081/#/overview</span><br><span class=\"line\">tail log/flink-*-standalonesession-*.log</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">...</span><br><span class=\"line\">2019-10-15 17:38:10,670 INFO  org.apache.flink.runtime.dispatcher.DispatcherRestEndpoint    - Web frontend listening at http://localhost:8081.</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Run-the-Example\"><a href=\"#Run-the-Example\" class=\"headerlink\" title=\"Run the Example\"></a>Run the Example</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -l 9000</span><br><span class=\"line\">cd flink-1.9.0</span><br><span class=\"line\">./bin/flink run examples/streaming/SocketWindowWordCount.jar --port 9000</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">lorem ipsum</span><br><span class=\"line\">ipsum ipsum ipsum</span><br><span class=\"line\">bye</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">tail -f log/flink-*-taskexecutor-*.out</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">lorem : 1</span><br><span class=\"line\">bye : 1</span><br><span class=\"line\">ipsum : 4</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">./bin/stop-cluster.sh</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Stopping taskexecutor daemon (pid: 28517) on host xdxdeMacBook-Pro.local.</span><br><span class=\"line\">No standalonesession daemon (pid: 28100) is running anymore on xdxdeMacBook-Pro.local.</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>"},{"title":"FlinkScalaREPL","date":"2019-10-16T09:08:56.000Z","_content":"Flink Scala REPL\n\n## Run Flink Scala REPL\n\n```\ncd /Users/xdx/Workspace/Softwares/flink-1.9.0\n./bin/start-scala-shell.sh local\nscala> :paste\n// Entering paste mode (ctrl-D to finish)\nval text = benv.fromElements(\n  \"To be, or not to be,--that is the question:--\",\n  \"Whether 'tis nobler in the mind to suffer\",\n  \"The slings and arrows of outrageous fortune\",\n  \"Or to take arms against a sea of troubles,\")\n/* Output:\ntext: org.apache.flink.api.scala.DataSet[String] = org.apache.flink.api.scala.DataSet@1007954a\n*///:~\nscala> :paste\n// Entering paste mode (ctrl-D to finish)\n\nval counts = text\n  .flatMap { _.toLowerCase.split(\"\\\\W+\") }\n  .map { (_, 1) }.groupBy(0).sum(1)\n\n// Exiting paste mode, now interpreting.\n/* Output:\ncounts: org.apache.flink.api.scala.AggregateDataSet[(String, Int)] = org.apache.flink.api.scala.AggregateDataSet@472c13d\n*///:~\nscala> counts.print()\n/* Output:\n(a,1)\n(against,1)\n(and,1)\n(arms,1)\n(arrows,1)\n(be,2)\n(fortune,1)\n(in,1)\n(is,1)\n(mind,1)\n(nobler,1)\n(not,1)\n(of,2)\n(or,2)\n(outrageous,1)\n(question,1)\n(sea,1)\n(slings,1)\n(suffer,1)\n(take,1)\n(that,1)\n(the,3)\n(tis,1)\n(to,4)\n(troubles,1)\n(whether,1)\n*///:~\nscala> :paste\n// Entering paste mode (ctrl-D to finish)\n\nval textStreaming = senv.fromElements(\n  \"To be, or not to be,--that is the question:--\",\n  \"Whether 'tis nobler in the mind to suffer\",\n  \"The slings and arrows of outrageous fortune\",\n  \"Or to take arms against a sea of troubles,\")\n\n// Exiting paste mode, now interpreting.\n/* Output:\ntextStreaming: org.apache.flink.streaming.api.scala.DataStream[String] = org.apache.flink.streaming.api.scala.DataStream@5ab30bb4\n*///:~\nscala> :paste\n// Entering paste mode (ctrl-D to finish)\n\nval countsStreaming = textStreaming\n    .flatMap { _.toLowerCase.split(\"\\\\W+\") }\n    .map { (_, 1) }.keyBy(0).sum(1)\n\n// Exiting paste mode, now interpreting.\n/* Output:\ncountsStreaming: org.apache.flink.streaming.api.scala.DataStream[(String, Int)] = org.apache.flink.streaming.api.scala.DataStream@63c5b63a\n*///:~\nscala> countsStreaming.print()\n/* Output:\nres2: org.apache.flink.streaming.api.datastream.DataStreamSink[(String, Int)] = org.apache.flink.streaming.api.datastream.DataStreamSink@1f6e7714\n*///:~\nscala> senv.execute(\"Streaming Wordcount\")\n/* Output:\n(to,1)\n(be,1)\n(or,1)\n(not,1)\n(to,2)\n(be,2)\n(that,1)\n(is,1)\n(the,1)\n(question,1)\n(whether,1)\n(tis,1)\n(nobler,1)\n(in,1)\n(the,2)\n(mind,1)\n(to,3)\n(suffer,1)\n(the,3)\n(slings,1)\n(and,1)\n(arrows,1)\n(of,1)\n(outrageous,1)\n(fortune,1)\n(or,2)\n(to,4)\n(take,1)\n(arms,1)\n(against,1)\n(a,1)\n(sea,1)\n(of,2)\n(troubles,1)\nres3: org.apache.flink.api.common.JobExecutionResult = org.apache.flink.api.common.JobExecutionResult@6da69c15\n*///:~\nscala> :q\n```","source":"_posts/FlinkScalaREPL.md","raw":"---\ntitle: FlinkScalaREPL\ndate: 2019-10-16 17:08:56\ntags: Flink\ncategories: Flink\n---\nFlink Scala REPL\n\n## Run Flink Scala REPL\n\n```\ncd /Users/xdx/Workspace/Softwares/flink-1.9.0\n./bin/start-scala-shell.sh local\nscala> :paste\n// Entering paste mode (ctrl-D to finish)\nval text = benv.fromElements(\n  \"To be, or not to be,--that is the question:--\",\n  \"Whether 'tis nobler in the mind to suffer\",\n  \"The slings and arrows of outrageous fortune\",\n  \"Or to take arms against a sea of troubles,\")\n/* Output:\ntext: org.apache.flink.api.scala.DataSet[String] = org.apache.flink.api.scala.DataSet@1007954a\n*///:~\nscala> :paste\n// Entering paste mode (ctrl-D to finish)\n\nval counts = text\n  .flatMap { _.toLowerCase.split(\"\\\\W+\") }\n  .map { (_, 1) }.groupBy(0).sum(1)\n\n// Exiting paste mode, now interpreting.\n/* Output:\ncounts: org.apache.flink.api.scala.AggregateDataSet[(String, Int)] = org.apache.flink.api.scala.AggregateDataSet@472c13d\n*///:~\nscala> counts.print()\n/* Output:\n(a,1)\n(against,1)\n(and,1)\n(arms,1)\n(arrows,1)\n(be,2)\n(fortune,1)\n(in,1)\n(is,1)\n(mind,1)\n(nobler,1)\n(not,1)\n(of,2)\n(or,2)\n(outrageous,1)\n(question,1)\n(sea,1)\n(slings,1)\n(suffer,1)\n(take,1)\n(that,1)\n(the,3)\n(tis,1)\n(to,4)\n(troubles,1)\n(whether,1)\n*///:~\nscala> :paste\n// Entering paste mode (ctrl-D to finish)\n\nval textStreaming = senv.fromElements(\n  \"To be, or not to be,--that is the question:--\",\n  \"Whether 'tis nobler in the mind to suffer\",\n  \"The slings and arrows of outrageous fortune\",\n  \"Or to take arms against a sea of troubles,\")\n\n// Exiting paste mode, now interpreting.\n/* Output:\ntextStreaming: org.apache.flink.streaming.api.scala.DataStream[String] = org.apache.flink.streaming.api.scala.DataStream@5ab30bb4\n*///:~\nscala> :paste\n// Entering paste mode (ctrl-D to finish)\n\nval countsStreaming = textStreaming\n    .flatMap { _.toLowerCase.split(\"\\\\W+\") }\n    .map { (_, 1) }.keyBy(0).sum(1)\n\n// Exiting paste mode, now interpreting.\n/* Output:\ncountsStreaming: org.apache.flink.streaming.api.scala.DataStream[(String, Int)] = org.apache.flink.streaming.api.scala.DataStream@63c5b63a\n*///:~\nscala> countsStreaming.print()\n/* Output:\nres2: org.apache.flink.streaming.api.datastream.DataStreamSink[(String, Int)] = org.apache.flink.streaming.api.datastream.DataStreamSink@1f6e7714\n*///:~\nscala> senv.execute(\"Streaming Wordcount\")\n/* Output:\n(to,1)\n(be,1)\n(or,1)\n(not,1)\n(to,2)\n(be,2)\n(that,1)\n(is,1)\n(the,1)\n(question,1)\n(whether,1)\n(tis,1)\n(nobler,1)\n(in,1)\n(the,2)\n(mind,1)\n(to,3)\n(suffer,1)\n(the,3)\n(slings,1)\n(and,1)\n(arrows,1)\n(of,1)\n(outrageous,1)\n(fortune,1)\n(or,2)\n(to,4)\n(take,1)\n(arms,1)\n(against,1)\n(a,1)\n(sea,1)\n(of,2)\n(troubles,1)\nres3: org.apache.flink.api.common.JobExecutionResult = org.apache.flink.api.common.JobExecutionResult@6da69c15\n*///:~\nscala> :q\n```","slug":"FlinkScalaREPL","published":1,"updated":"2023-09-10T11:57:16.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln2n3nv90006yuzqfsxw1q8m","content":"<p>Flink Scala REPL</p>\n<h2 id=\"Run-Flink-Scala-REPL\"><a href=\"#Run-Flink-Scala-REPL\" class=\"headerlink\" title=\"Run Flink Scala REPL\"></a>Run Flink Scala REPL</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /Users/xdx/Workspace/Softwares/flink-1.9.0</span><br><span class=\"line\">./bin/start-scala-shell.sh local</span><br><span class=\"line\">scala&gt; :paste</span><br><span class=\"line\">// Entering paste mode (ctrl-D to finish)</span><br><span class=\"line\">val text = benv.fromElements(</span><br><span class=\"line\">  &quot;To be, or not to be,--that is the question:--&quot;,</span><br><span class=\"line\">  &quot;Whether &#x27;tis nobler in the mind to suffer&quot;,</span><br><span class=\"line\">  &quot;The slings and arrows of outrageous fortune&quot;,</span><br><span class=\"line\">  &quot;Or to take arms against a sea of troubles,&quot;)</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">text: org.apache.flink.api.scala.DataSet[String] = org.apache.flink.api.scala.DataSet@1007954a</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; :paste</span><br><span class=\"line\">// Entering paste mode (ctrl-D to finish)</span><br><span class=\"line\"></span><br><span class=\"line\">val counts = text</span><br><span class=\"line\">  .flatMap &#123; _.toLowerCase.split(&quot;\\\\W+&quot;) &#125;</span><br><span class=\"line\">  .map &#123; (_, 1) &#125;.groupBy(0).sum(1)</span><br><span class=\"line\"></span><br><span class=\"line\">// Exiting paste mode, now interpreting.</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">counts: org.apache.flink.api.scala.AggregateDataSet[(String, Int)] = org.apache.flink.api.scala.AggregateDataSet@472c13d</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; counts.print()</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">(a,1)</span><br><span class=\"line\">(against,1)</span><br><span class=\"line\">(and,1)</span><br><span class=\"line\">(arms,1)</span><br><span class=\"line\">(arrows,1)</span><br><span class=\"line\">(be,2)</span><br><span class=\"line\">(fortune,1)</span><br><span class=\"line\">(in,1)</span><br><span class=\"line\">(is,1)</span><br><span class=\"line\">(mind,1)</span><br><span class=\"line\">(nobler,1)</span><br><span class=\"line\">(not,1)</span><br><span class=\"line\">(of,2)</span><br><span class=\"line\">(or,2)</span><br><span class=\"line\">(outrageous,1)</span><br><span class=\"line\">(question,1)</span><br><span class=\"line\">(sea,1)</span><br><span class=\"line\">(slings,1)</span><br><span class=\"line\">(suffer,1)</span><br><span class=\"line\">(take,1)</span><br><span class=\"line\">(that,1)</span><br><span class=\"line\">(the,3)</span><br><span class=\"line\">(tis,1)</span><br><span class=\"line\">(to,4)</span><br><span class=\"line\">(troubles,1)</span><br><span class=\"line\">(whether,1)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; :paste</span><br><span class=\"line\">// Entering paste mode (ctrl-D to finish)</span><br><span class=\"line\"></span><br><span class=\"line\">val textStreaming = senv.fromElements(</span><br><span class=\"line\">  &quot;To be, or not to be,--that is the question:--&quot;,</span><br><span class=\"line\">  &quot;Whether &#x27;tis nobler in the mind to suffer&quot;,</span><br><span class=\"line\">  &quot;The slings and arrows of outrageous fortune&quot;,</span><br><span class=\"line\">  &quot;Or to take arms against a sea of troubles,&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">// Exiting paste mode, now interpreting.</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">textStreaming: org.apache.flink.streaming.api.scala.DataStream[String] = org.apache.flink.streaming.api.scala.DataStream@5ab30bb4</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; :paste</span><br><span class=\"line\">// Entering paste mode (ctrl-D to finish)</span><br><span class=\"line\"></span><br><span class=\"line\">val countsStreaming = textStreaming</span><br><span class=\"line\">    .flatMap &#123; _.toLowerCase.split(&quot;\\\\W+&quot;) &#125;</span><br><span class=\"line\">    .map &#123; (_, 1) &#125;.keyBy(0).sum(1)</span><br><span class=\"line\"></span><br><span class=\"line\">// Exiting paste mode, now interpreting.</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">countsStreaming: org.apache.flink.streaming.api.scala.DataStream[(String, Int)] = org.apache.flink.streaming.api.scala.DataStream@63c5b63a</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; countsStreaming.print()</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">res2: org.apache.flink.streaming.api.datastream.DataStreamSink[(String, Int)] = org.apache.flink.streaming.api.datastream.DataStreamSink@1f6e7714</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; senv.execute(&quot;Streaming Wordcount&quot;)</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">(to,1)</span><br><span class=\"line\">(be,1)</span><br><span class=\"line\">(or,1)</span><br><span class=\"line\">(not,1)</span><br><span class=\"line\">(to,2)</span><br><span class=\"line\">(be,2)</span><br><span class=\"line\">(that,1)</span><br><span class=\"line\">(is,1)</span><br><span class=\"line\">(the,1)</span><br><span class=\"line\">(question,1)</span><br><span class=\"line\">(whether,1)</span><br><span class=\"line\">(tis,1)</span><br><span class=\"line\">(nobler,1)</span><br><span class=\"line\">(in,1)</span><br><span class=\"line\">(the,2)</span><br><span class=\"line\">(mind,1)</span><br><span class=\"line\">(to,3)</span><br><span class=\"line\">(suffer,1)</span><br><span class=\"line\">(the,3)</span><br><span class=\"line\">(slings,1)</span><br><span class=\"line\">(and,1)</span><br><span class=\"line\">(arrows,1)</span><br><span class=\"line\">(of,1)</span><br><span class=\"line\">(outrageous,1)</span><br><span class=\"line\">(fortune,1)</span><br><span class=\"line\">(or,2)</span><br><span class=\"line\">(to,4)</span><br><span class=\"line\">(take,1)</span><br><span class=\"line\">(arms,1)</span><br><span class=\"line\">(against,1)</span><br><span class=\"line\">(a,1)</span><br><span class=\"line\">(sea,1)</span><br><span class=\"line\">(of,2)</span><br><span class=\"line\">(troubles,1)</span><br><span class=\"line\">res3: org.apache.flink.api.common.JobExecutionResult = org.apache.flink.api.common.JobExecutionResult@6da69c15</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; :q</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Flink Scala REPL</p>\n<h2 id=\"Run-Flink-Scala-REPL\"><a href=\"#Run-Flink-Scala-REPL\" class=\"headerlink\" title=\"Run Flink Scala REPL\"></a>Run Flink Scala REPL</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /Users/xdx/Workspace/Softwares/flink-1.9.0</span><br><span class=\"line\">./bin/start-scala-shell.sh local</span><br><span class=\"line\">scala&gt; :paste</span><br><span class=\"line\">// Entering paste mode (ctrl-D to finish)</span><br><span class=\"line\">val text = benv.fromElements(</span><br><span class=\"line\">  &quot;To be, or not to be,--that is the question:--&quot;,</span><br><span class=\"line\">  &quot;Whether &#x27;tis nobler in the mind to suffer&quot;,</span><br><span class=\"line\">  &quot;The slings and arrows of outrageous fortune&quot;,</span><br><span class=\"line\">  &quot;Or to take arms against a sea of troubles,&quot;)</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">text: org.apache.flink.api.scala.DataSet[String] = org.apache.flink.api.scala.DataSet@1007954a</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; :paste</span><br><span class=\"line\">// Entering paste mode (ctrl-D to finish)</span><br><span class=\"line\"></span><br><span class=\"line\">val counts = text</span><br><span class=\"line\">  .flatMap &#123; _.toLowerCase.split(&quot;\\\\W+&quot;) &#125;</span><br><span class=\"line\">  .map &#123; (_, 1) &#125;.groupBy(0).sum(1)</span><br><span class=\"line\"></span><br><span class=\"line\">// Exiting paste mode, now interpreting.</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">counts: org.apache.flink.api.scala.AggregateDataSet[(String, Int)] = org.apache.flink.api.scala.AggregateDataSet@472c13d</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; counts.print()</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">(a,1)</span><br><span class=\"line\">(against,1)</span><br><span class=\"line\">(and,1)</span><br><span class=\"line\">(arms,1)</span><br><span class=\"line\">(arrows,1)</span><br><span class=\"line\">(be,2)</span><br><span class=\"line\">(fortune,1)</span><br><span class=\"line\">(in,1)</span><br><span class=\"line\">(is,1)</span><br><span class=\"line\">(mind,1)</span><br><span class=\"line\">(nobler,1)</span><br><span class=\"line\">(not,1)</span><br><span class=\"line\">(of,2)</span><br><span class=\"line\">(or,2)</span><br><span class=\"line\">(outrageous,1)</span><br><span class=\"line\">(question,1)</span><br><span class=\"line\">(sea,1)</span><br><span class=\"line\">(slings,1)</span><br><span class=\"line\">(suffer,1)</span><br><span class=\"line\">(take,1)</span><br><span class=\"line\">(that,1)</span><br><span class=\"line\">(the,3)</span><br><span class=\"line\">(tis,1)</span><br><span class=\"line\">(to,4)</span><br><span class=\"line\">(troubles,1)</span><br><span class=\"line\">(whether,1)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; :paste</span><br><span class=\"line\">// Entering paste mode (ctrl-D to finish)</span><br><span class=\"line\"></span><br><span class=\"line\">val textStreaming = senv.fromElements(</span><br><span class=\"line\">  &quot;To be, or not to be,--that is the question:--&quot;,</span><br><span class=\"line\">  &quot;Whether &#x27;tis nobler in the mind to suffer&quot;,</span><br><span class=\"line\">  &quot;The slings and arrows of outrageous fortune&quot;,</span><br><span class=\"line\">  &quot;Or to take arms against a sea of troubles,&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">// Exiting paste mode, now interpreting.</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">textStreaming: org.apache.flink.streaming.api.scala.DataStream[String] = org.apache.flink.streaming.api.scala.DataStream@5ab30bb4</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; :paste</span><br><span class=\"line\">// Entering paste mode (ctrl-D to finish)</span><br><span class=\"line\"></span><br><span class=\"line\">val countsStreaming = textStreaming</span><br><span class=\"line\">    .flatMap &#123; _.toLowerCase.split(&quot;\\\\W+&quot;) &#125;</span><br><span class=\"line\">    .map &#123; (_, 1) &#125;.keyBy(0).sum(1)</span><br><span class=\"line\"></span><br><span class=\"line\">// Exiting paste mode, now interpreting.</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">countsStreaming: org.apache.flink.streaming.api.scala.DataStream[(String, Int)] = org.apache.flink.streaming.api.scala.DataStream@63c5b63a</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; countsStreaming.print()</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">res2: org.apache.flink.streaming.api.datastream.DataStreamSink[(String, Int)] = org.apache.flink.streaming.api.datastream.DataStreamSink@1f6e7714</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; senv.execute(&quot;Streaming Wordcount&quot;)</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">(to,1)</span><br><span class=\"line\">(be,1)</span><br><span class=\"line\">(or,1)</span><br><span class=\"line\">(not,1)</span><br><span class=\"line\">(to,2)</span><br><span class=\"line\">(be,2)</span><br><span class=\"line\">(that,1)</span><br><span class=\"line\">(is,1)</span><br><span class=\"line\">(the,1)</span><br><span class=\"line\">(question,1)</span><br><span class=\"line\">(whether,1)</span><br><span class=\"line\">(tis,1)</span><br><span class=\"line\">(nobler,1)</span><br><span class=\"line\">(in,1)</span><br><span class=\"line\">(the,2)</span><br><span class=\"line\">(mind,1)</span><br><span class=\"line\">(to,3)</span><br><span class=\"line\">(suffer,1)</span><br><span class=\"line\">(the,3)</span><br><span class=\"line\">(slings,1)</span><br><span class=\"line\">(and,1)</span><br><span class=\"line\">(arrows,1)</span><br><span class=\"line\">(of,1)</span><br><span class=\"line\">(outrageous,1)</span><br><span class=\"line\">(fortune,1)</span><br><span class=\"line\">(or,2)</span><br><span class=\"line\">(to,4)</span><br><span class=\"line\">(take,1)</span><br><span class=\"line\">(arms,1)</span><br><span class=\"line\">(against,1)</span><br><span class=\"line\">(a,1)</span><br><span class=\"line\">(sea,1)</span><br><span class=\"line\">(of,2)</span><br><span class=\"line\">(troubles,1)</span><br><span class=\"line\">res3: org.apache.flink.api.common.JobExecutionResult = org.apache.flink.api.common.JobExecutionResult@6da69c15</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; :q</span><br></pre></td></tr></table></figure>"},{"title":"MongoDB安装","date":"2019-09-18T04:45:00.000Z","_content":"MongoDB安装\n\n## Mac安装\n\n```bash\ncd /usr/local\nsudo curl -O https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz\nsudo tar -zxvf mongodb-osx-ssl-x86_64-4.0.9.tgz\nsudo mv mongodb-osx-x86_64-4.0.9/ mongodb\n```\n\n## Mac运行\n\n```bash\nsudo mkdir -p /usr/local/mongodb/data/db\ncd /usr/local/mongodb/bin\nsudo ./mongod --dbpath=/usr/local/mongodb/data/db\n```\n\n## Mac测试\n\n```bash\ncd /usr/local/mongodb/bin\nsudo ./mongo\n\n> db\n> db.test.insert({\"name\":\"xiadingxin\"})\n> show dbs\n> show tables\n> db.test.find().pretty()\n> db.createCollection(\"user\")\n> db.user.insert({\"name\":\"xiadingxin\"})\n> db.test.drop()\n> show collections\n```\n\n## Linux安装\n\n```bash\ncd /usr/local\ncurl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz\ntar -zxvf mongodb-linux-x86_64-3.0.6.tgz \nmv  mongodb-linux-x86_64-3.0.6/ /usr/local/mongodb \n```\n\n## Linux运行\n\n```bash\nsudo mkdir -p /usr/local/mongodb/data/db\nsudo ./mongod --dbpath=/usr/local/mongodb/data/db\n```\n\n## Linux测试\n\n```bash\ncd /usr/local/mongodb/bin\nsudo ./mongo\n\n> db\n> db.test.insert({\"name\":\"xiadingxin\"})\n> show dbs\n> show tables\n> db.test.find().pretty()\n> db.createCollection(\"user\")\n> db.user.insert({\"name\":\"xiadingxin\"})\n> db.test.drop()\n> show collections\n```\n\n## 线上生产环境测试\n\n已在推荐平台线上GPU机器10.63.1.130安装MongoDB的shell客户端，可查看线上电商爬虫视频信息数据\n\n```bash\n> 1. /usr/local/mongodb/bin/mongo 192.168.2.230:28116\n> 2. use admin\n> 3. db.auth(\"readany\", \"Mfw09uygt\")\n> 4. rs.slaveOk()\n> 5. show dbs\n> 6. use mspider_price\n> 7. show tables\n> 8. db.video_info.findOne()\n```","source":"_posts/MongoDB安装.md","raw":"---\ntitle: MongoDB安装\ndate: 2019-09-18 12:45:00\ntags: MongoDB\ncategories: MongoDB\n---\nMongoDB安装\n\n## Mac安装\n\n```bash\ncd /usr/local\nsudo curl -O https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz\nsudo tar -zxvf mongodb-osx-ssl-x86_64-4.0.9.tgz\nsudo mv mongodb-osx-x86_64-4.0.9/ mongodb\n```\n\n## Mac运行\n\n```bash\nsudo mkdir -p /usr/local/mongodb/data/db\ncd /usr/local/mongodb/bin\nsudo ./mongod --dbpath=/usr/local/mongodb/data/db\n```\n\n## Mac测试\n\n```bash\ncd /usr/local/mongodb/bin\nsudo ./mongo\n\n> db\n> db.test.insert({\"name\":\"xiadingxin\"})\n> show dbs\n> show tables\n> db.test.find().pretty()\n> db.createCollection(\"user\")\n> db.user.insert({\"name\":\"xiadingxin\"})\n> db.test.drop()\n> show collections\n```\n\n## Linux安装\n\n```bash\ncd /usr/local\ncurl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz\ntar -zxvf mongodb-linux-x86_64-3.0.6.tgz \nmv  mongodb-linux-x86_64-3.0.6/ /usr/local/mongodb \n```\n\n## Linux运行\n\n```bash\nsudo mkdir -p /usr/local/mongodb/data/db\nsudo ./mongod --dbpath=/usr/local/mongodb/data/db\n```\n\n## Linux测试\n\n```bash\ncd /usr/local/mongodb/bin\nsudo ./mongo\n\n> db\n> db.test.insert({\"name\":\"xiadingxin\"})\n> show dbs\n> show tables\n> db.test.find().pretty()\n> db.createCollection(\"user\")\n> db.user.insert({\"name\":\"xiadingxin\"})\n> db.test.drop()\n> show collections\n```\n\n## 线上生产环境测试\n\n已在推荐平台线上GPU机器10.63.1.130安装MongoDB的shell客户端，可查看线上电商爬虫视频信息数据\n\n```bash\n> 1. /usr/local/mongodb/bin/mongo 192.168.2.230:28116\n> 2. use admin\n> 3. db.auth(\"readany\", \"Mfw09uygt\")\n> 4. rs.slaveOk()\n> 5. show dbs\n> 6. use mspider_price\n> 7. show tables\n> 8. db.video_info.findOne()\n```","slug":"MongoDB安装","published":1,"updated":"2023-09-12T10:25:12.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln2n3nvd0007yuzqa2bc2f12","content":"<p>MongoDB安装</p>\n<h2 id=\"Mac安装\"><a href=\"#Mac安装\" class=\"headerlink\" title=\"Mac安装\"></a>Mac安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local</span><br><span class=\"line\">sudo curl -O https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz</span><br><span class=\"line\">sudo tar -zxvf mongodb-osx-ssl-x86_64-4.0.9.tgz</span><br><span class=\"line\">sudo <span class=\"built_in\">mv</span> mongodb-osx-x86_64-4.0.9/ mongodb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mac运行\"><a href=\"#Mac运行\" class=\"headerlink\" title=\"Mac运行\"></a>Mac运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /usr/local/mongodb/data/db</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/mongodb/bin</span><br><span class=\"line\">sudo ./mongod --dbpath=/usr/local/mongodb/data/db</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mac测试\"><a href=\"#Mac测试\" class=\"headerlink\" title=\"Mac测试\"></a>Mac测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/mongodb/bin</span><br><span class=\"line\">sudo ./mongo</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; db</span><br><span class=\"line\">&gt; db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;xiadingxin&quot;</span>&#125;)</span><br><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">&gt; show tables</span><br><span class=\"line\">&gt; db.test.find().pretty()</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">&gt; db.user.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;xiadingxin&quot;</span>&#125;)</span><br><span class=\"line\">&gt; db.test.drop()</span><br><span class=\"line\">&gt; show collections</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux安装\"><a href=\"#Linux安装\" class=\"headerlink\" title=\"Linux安装\"></a>Linux安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local</span><br><span class=\"line\">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz</span><br><span class=\"line\">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz </span><br><span class=\"line\"><span class=\"built_in\">mv</span>  mongodb-linux-x86_64-3.0.6/ /usr/local/mongodb </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux运行\"><a href=\"#Linux运行\" class=\"headerlink\" title=\"Linux运行\"></a>Linux运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /usr/local/mongodb/data/db</span><br><span class=\"line\">sudo ./mongod --dbpath=/usr/local/mongodb/data/db</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux测试\"><a href=\"#Linux测试\" class=\"headerlink\" title=\"Linux测试\"></a>Linux测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/mongodb/bin</span><br><span class=\"line\">sudo ./mongo</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; db</span><br><span class=\"line\">&gt; db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;xiadingxin&quot;</span>&#125;)</span><br><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">&gt; show tables</span><br><span class=\"line\">&gt; db.test.find().pretty()</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">&gt; db.user.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;xiadingxin&quot;</span>&#125;)</span><br><span class=\"line\">&gt; db.test.drop()</span><br><span class=\"line\">&gt; show collections</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线上生产环境测试\"><a href=\"#线上生产环境测试\" class=\"headerlink\" title=\"线上生产环境测试\"></a>线上生产环境测试</h2><p>已在推荐平台线上GPU机器10.63.1.130安装MongoDB的shell客户端，可查看线上电商爬虫视频信息数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 1. /usr/local/mongodb/bin/mongo 192.168.2.230:28116</span><br><span class=\"line\">&gt; 2. use admin</span><br><span class=\"line\">&gt; 3. db.auth(<span class=\"string\">&quot;readany&quot;</span>, <span class=\"string\">&quot;Mfw09uygt&quot;</span>)</span><br><span class=\"line\">&gt; 4. rs.slaveOk()</span><br><span class=\"line\">&gt; 5. show dbs</span><br><span class=\"line\">&gt; 6. use mspider_price</span><br><span class=\"line\">&gt; 7. show tables</span><br><span class=\"line\">&gt; 8. db.video_info.findOne()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>MongoDB安装</p>\n<h2 id=\"Mac安装\"><a href=\"#Mac安装\" class=\"headerlink\" title=\"Mac安装\"></a>Mac安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local</span><br><span class=\"line\">sudo curl -O https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz</span><br><span class=\"line\">sudo tar -zxvf mongodb-osx-ssl-x86_64-4.0.9.tgz</span><br><span class=\"line\">sudo <span class=\"built_in\">mv</span> mongodb-osx-x86_64-4.0.9/ mongodb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mac运行\"><a href=\"#Mac运行\" class=\"headerlink\" title=\"Mac运行\"></a>Mac运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /usr/local/mongodb/data/db</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/mongodb/bin</span><br><span class=\"line\">sudo ./mongod --dbpath=/usr/local/mongodb/data/db</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mac测试\"><a href=\"#Mac测试\" class=\"headerlink\" title=\"Mac测试\"></a>Mac测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/mongodb/bin</span><br><span class=\"line\">sudo ./mongo</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; db</span><br><span class=\"line\">&gt; db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;xiadingxin&quot;</span>&#125;)</span><br><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">&gt; show tables</span><br><span class=\"line\">&gt; db.test.find().pretty()</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">&gt; db.user.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;xiadingxin&quot;</span>&#125;)</span><br><span class=\"line\">&gt; db.test.drop()</span><br><span class=\"line\">&gt; show collections</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux安装\"><a href=\"#Linux安装\" class=\"headerlink\" title=\"Linux安装\"></a>Linux安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local</span><br><span class=\"line\">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz</span><br><span class=\"line\">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz </span><br><span class=\"line\"><span class=\"built_in\">mv</span>  mongodb-linux-x86_64-3.0.6/ /usr/local/mongodb </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux运行\"><a href=\"#Linux运行\" class=\"headerlink\" title=\"Linux运行\"></a>Linux运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /usr/local/mongodb/data/db</span><br><span class=\"line\">sudo ./mongod --dbpath=/usr/local/mongodb/data/db</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux测试\"><a href=\"#Linux测试\" class=\"headerlink\" title=\"Linux测试\"></a>Linux测试</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/mongodb/bin</span><br><span class=\"line\">sudo ./mongo</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; db</span><br><span class=\"line\">&gt; db.test.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;xiadingxin&quot;</span>&#125;)</span><br><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">&gt; show tables</span><br><span class=\"line\">&gt; db.test.find().pretty()</span><br><span class=\"line\">&gt; db.createCollection(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">&gt; db.user.insert(&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;xiadingxin&quot;</span>&#125;)</span><br><span class=\"line\">&gt; db.test.drop()</span><br><span class=\"line\">&gt; show collections</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线上生产环境测试\"><a href=\"#线上生产环境测试\" class=\"headerlink\" title=\"线上生产环境测试\"></a>线上生产环境测试</h2><p>已在推荐平台线上GPU机器10.63.1.130安装MongoDB的shell客户端，可查看线上电商爬虫视频信息数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 1. /usr/local/mongodb/bin/mongo 192.168.2.230:28116</span><br><span class=\"line\">&gt; 2. use admin</span><br><span class=\"line\">&gt; 3. db.auth(<span class=\"string\">&quot;readany&quot;</span>, <span class=\"string\">&quot;Mfw09uygt&quot;</span>)</span><br><span class=\"line\">&gt; 4. rs.slaveOk()</span><br><span class=\"line\">&gt; 5. show dbs</span><br><span class=\"line\">&gt; 6. use mspider_price</span><br><span class=\"line\">&gt; 7. show tables</span><br><span class=\"line\">&gt; 8. db.video_info.findOne()</span><br></pre></td></tr></table></figure>"},{"title":"Links","date":"2023-09-12T10:25:00.000Z","_content":"\n## Summary\n- [从零单排推荐系统](https://www.zhihu.com/column/c_1392507941388414976)\n\n## Rank\n- [KDD'2018 Best Paper-Embedding技术在Airbnb实时搜索排序中的应用](https://zhuanlan.zhihu.com/p/383512342?utm_id=0)\n\n## Markdown\n- [Markdown入门](https://wizardforcel.gitbooks.io/markdown-simple-world/content/index.html)\n\n## Hexo\n- [hexo](https://hexo.io/zh-cn)\n- [NexT](https://github.com/theme-next/hexo-theme-next)\n- [NexT](http://theme-next.iissnan.com/)\n- [NexT Issues](https://github.com/iissnan/hexo-theme-next/issues/2253)\n\n## Github\n- [Github加速](https://github.com/521xueweihan/GitHub520)\n\n\n","source":"_posts/Links.md","raw":"---\ntitle: Links\ndate: 2023-09-12 18:25:00\ntags: Links\ncategories: Links\n---\n\n## Summary\n- [从零单排推荐系统](https://www.zhihu.com/column/c_1392507941388414976)\n\n## Rank\n- [KDD'2018 Best Paper-Embedding技术在Airbnb实时搜索排序中的应用](https://zhuanlan.zhihu.com/p/383512342?utm_id=0)\n\n## Markdown\n- [Markdown入门](https://wizardforcel.gitbooks.io/markdown-simple-world/content/index.html)\n\n## Hexo\n- [hexo](https://hexo.io/zh-cn)\n- [NexT](https://github.com/theme-next/hexo-theme-next)\n- [NexT](http://theme-next.iissnan.com/)\n- [NexT Issues](https://github.com/iissnan/hexo-theme-next/issues/2253)\n\n## Github\n- [Github加速](https://github.com/521xueweihan/GitHub520)\n\n\n","slug":"Links","published":1,"updated":"2023-09-17T13:58:39.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln2n3nvi0008yuzq87oz3pzo","content":"<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><ul>\n<li><a href=\"https://www.zhihu.com/column/c_1392507941388414976\">从零单排推荐系统</a></li>\n</ul>\n<h2 id=\"Rank\"><a href=\"#Rank\" class=\"headerlink\" title=\"Rank\"></a>Rank</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/383512342?utm_id=0\">KDD’2018 Best Paper-Embedding技术在Airbnb实时搜索排序中的应用</a></li>\n</ul>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><ul>\n<li><a href=\"https://wizardforcel.gitbooks.io/markdown-simple-world/content/index.html\">Markdown入门</a></li>\n</ul>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><ul>\n<li><a href=\"https://hexo.io/zh-cn\">hexo</a></li>\n<li><a href=\"https://github.com/theme-next/hexo-theme-next\">NexT</a></li>\n<li><a href=\"http://theme-next.iissnan.com/\">NexT</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next/issues/2253\">NexT Issues</a></li>\n</ul>\n<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><ul>\n<li><a href=\"https://github.com/521xueweihan/GitHub520\">Github加速</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><ul>\n<li><a href=\"https://www.zhihu.com/column/c_1392507941388414976\">从零单排推荐系统</a></li>\n</ul>\n<h2 id=\"Rank\"><a href=\"#Rank\" class=\"headerlink\" title=\"Rank\"></a>Rank</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/383512342?utm_id=0\">KDD’2018 Best Paper-Embedding技术在Airbnb实时搜索排序中的应用</a></li>\n</ul>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><ul>\n<li><a href=\"https://wizardforcel.gitbooks.io/markdown-simple-world/content/index.html\">Markdown入门</a></li>\n</ul>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><ul>\n<li><a href=\"https://hexo.io/zh-cn\">hexo</a></li>\n<li><a href=\"https://github.com/theme-next/hexo-theme-next\">NexT</a></li>\n<li><a href=\"http://theme-next.iissnan.com/\">NexT</a></li>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next/issues/2253\">NexT Issues</a></li>\n</ul>\n<h2 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h2><ul>\n<li><a href=\"https://github.com/521xueweihan/GitHub520\">Github加速</a></li>\n</ul>\n"},{"title":"Scala快速入门","date":"2019-09-13T00:00:00.000Z","_content":"Scala快速入门\n\n## Scala官网\n\n* [Scala官网](https://www.scala-lang.org/)\n* [Scala安装指南](https://docs.scala-lang.org/getting-started-intellij-track/getting-started-with-scala-in-intellij.html)\n* [Scala入门指南](https://docs.scala-lang.org/tour/tour-of-scala.html)\n\n## Scala基础\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    println(1 + 1)\n    println((1 + 1) * 2.0)\n    println(\"hello\".toCharArray)\n    println(((1 + 1) * 2.0).toString)\n    println(\"hello\".toUpperCase)\n    println(\"HELLO\".toLowerCase)\n  }\n\n}\n\n```\n\n```\n/* Output:\n2\n4.0\n[C@11531931\n4.0\nHELLO\nhello\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    val r = 1 + 1\n    println(2 * r)\n    var a = 1; a = 2\n    println(a)\n    val n: String = null\n    val m: Any = \"leo\"\n    val n1, n2: String = null\n    val m1, m2 = 100\n    println(n)\n    println(m)\n    println(n1)\n    println(n2)\n    println(m1)\n    println(m2)\n  }\n\n}\n\n```\n\n```\n/* Output:\n4\n2\nnull\nleo\nnull\nnull\n100\n100\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    println(1.toString)\n    println(1.to(10))\n    println(\"Hello\".intersect(\"World\"))\n    println(1 + 1)\n    println(1.+(1))\n    println(1 to 10)\n    var counter = 1; counter += 1\n    println(counter)\n  }\n\n}\n\n```\n\n```\n/* Output:\n1\nRange(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nlo\n2\n2\nRange(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n2\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.math._\n    println(sqrt(2))\n    println(pow(2, 4))\n    println(min(3, Pi))\n    println(\"Hello World\".distinct)\n    println(\"Hello World\"(6))\n    println(\"Hello World\".apply(6))\n    println(Array(1, 2, 3, 4))\n    println(Array.apply(1, 2, 3, 4))\n  }\n\n}\n\n```\n\n```\n/* Output:\n1.4142135623730951\n16.0\n3.0\nHelo Wrd\nW\nW\n[I@6442b0a6\n[I@60f82f98\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    var age = 30\n    println(if (age > 18) 1 else 0)\n    val isAdult1 = if (age > 18) 1 else 0\n    println(isAdult1)\n    var isAdult2 = -1\n    if (age > 18) isAdult2 = 1 else isAdult2 = 0\n    println(isAdult2)\n    println(if (age > 18) \"adult\" else 0)\n    age = 12\n    println(if (age > 18) \"adult\")\n    println(if (age > 18) \"adult\" else ())\n    println(if (age > 18) \"adult\" else if (age > 12) \"teenager\" else \"children\")\n  }\n\n}\n\n```\n\n```\n/* Output:\n1\n1\n1\nadult\n()\n()\nchildren\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    var x, y, z = 0\n    if (x < 10) { y = y + 1; z = z + 1 }\n    println(x, y, z)\n    if (x < 10) {\n      y = y + 1\n      z = z + 1\n    }\n    println(x, y, z)\n    var w = if (x < 10) { y = y + 1; z + 1 }\n    println(x, y, z, w)\n  }\n\n}\n\n```\n\n```\n/* Output:\n(0,1,1)\n(0,2,2)\n(0,3,2,3)\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    print(\"Hello World\"); println(\"Hello World\")\n    printf(\"Hi, my name is %s, I'm %d years old.\\n\", \"Leo\", 30)\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello WorldHello World\nHi, my name is Leo, I'm 30 years old.\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.io.StdIn\n    val name = StdIn.readLine(\"Welcome to Game House. Please tell me your name: \")\n    print(\"Thanks. Then please tell me your age: \")\n    val age = StdIn.readInt()\n    if (age > 18) {\n      printf(\"Hi, %s, you are %d years old, so you are legal to come here!\", name, age)\n    } else {\n      printf(\"Sorry, boy, %s, you are only %d years old. you are illegal to come here!\", name, age)\n    }\n  }\n\n}\n\n```\n\n```\n/* Output:\nWelcome to Game House. Please tell me your name: leo\nThanks. Then please tell me your age: 20\nHi, leo, you are 20 years old, so you are legal to come here!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    println(1 + \"\")\n    println(1.toString + \"\")\n    var n = 10\n    while (n > 0) {\n      print(n + \" \")\n      n -= 1\n    }\n    println()\n    n = 5\n    for (i <- 1 to n) print(i + \" \")\n    println()\n    for (i <- 1 until n) print(i + \" \")\n    println()\n    import scala.util.control.Breaks._\n    breakable {\n      var n = 10\n      for (c <- \"Hello World\") {\n        if (n == 5) break\n        print(c)\n        n -= 1\n      }\n    }\n  }\n\n}\n\n```\n\n```\n/* Output:\n1\n1\n10 9 8 7 6 5 4 3 2 1 \n1 2 3 4 5 \n1 2 3 4 \nHello\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    for (i <- 1 to 9; j <- 1 to i) {\n      print(j + \" * \" + i + \" = \" + i * j + \" \")\n      if (i == j) println()\n    }\n  }\n\n}\n\n```\n\n```\n/* Output:\n1 * 1 = 1 \n1 * 2 = 2 2 * 2 = 4 \n1 * 3 = 3 2 * 3 = 6 3 * 3 = 9 \n1 * 4 = 4 2 * 4 = 8 3 * 4 = 12 4 * 4 = 16 \n1 * 5 = 5 2 * 5 = 10 3 * 5 = 15 4 * 5 = 20 5 * 5 = 25 \n1 * 6 = 6 2 * 6 = 12 3 * 6 = 18 4 * 6 = 24 5 * 6 = 30 6 * 6 = 36 \n1 * 7 = 7 2 * 7 = 14 3 * 7 = 21 4 * 7 = 28 5 * 7 = 35 6 * 7 = 42 7 * 7 = 49 \n1 * 8 = 8 2 * 8 = 16 3 * 8 = 24 4 * 8 = 32 5 * 8 = 40 6 * 8 = 48 7 * 8 = 56 8 * 8 = 64 \n1 * 9 = 9 2 * 9 = 18 3 * 9 = 27 4 * 9 = 36 5 * 9 = 45 6 * 9 = 54 7 * 9 = 63 8 * 9 = 72 9 * 9 = 81 \n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    for (i <- 1 to 10 if i % 2 == 0) print(i + \" \")\n    \n    val v = for (i <- 1 to 10) yield i\n    println(v)\n    for (i <- v) {\n      print(i + \" \")\n    }\n  }\n\n}\n\n```\n\n```\n/* Output:\n2 4 6 8 10 Vector(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n1 2 3 4 5 6 7 8 9 10 \n*///:~\n\n```\n\n## Scala函数\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sayHello(name: String, age: Int) = {\n      if (age > 18) { printf(\"Hi %s, you are a big boy\\n\", name); age }\n      else { printf(\"Hi %s, you are a little boy\\n\", name); age }\n    }\n    sayHello(\"leo\", 30)\n  }\n\n}\n\n```\n\n```\n/* Output:\nHi leo, you are a big boy\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sayHello(name: String) = println(\"Hello, \" + name)\n    sayHello(\"Leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sum(n: Int) = {\n      var sum = 0\n      for (i <- 1 to n) sum += i\n      sum\n    }\n    println(sum(100))\n  }\n\n}\n\n```\n\n```\n/* Output:\n5050\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def fab(n: Int): Int = {\n      if (n <= 1) 1\n      else fab(n - 1) + fab(n - 2)\n    }\n    println(fab(5))\n  }\n\n}\n\n```\n\n```\n/* Output:\n8\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sayHello(firstName: String, middleName: String = \"William\", lastName: String = \"Croft\") = firstName + \" \" + middleName + \" \" + lastName\n    println(sayHello(\"Leo\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nLeo William Croft\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sayHello(firstName: String, middleName: String, lastName: String) = firstName + \" \" + middleName + \" \" + lastName\n    println(sayHello(firstName = \"Mick\", lastName = \"Nina\", middleName = \"Jack\"))\n    println(sayHello(\"Mick\", middleName = \"Jack\", lastName = \"Nina\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nMick Jack Nina\nMick Jack Nina\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sayHello(name: String, age: Int = 20): Unit = {\n      println(\"Hello, \" + name + \", your age is \" + age)\n    }\n    sayHello(\"Leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo, your age is 20\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sum(nums: Int*) = {\n      var res = 0\n      for (num <- nums) res += num\n      res\n    }\n    println(sum(1, 2, 3, 4, 5))\n  }\n\n}\n\n```\n\n```\n/* Output:\n15\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sum(nums: Int*): Int = {\n      if (nums.length == 0) 0\n      else nums.head + sum(nums.tail: _*)\n    }\n    println(sum(1 to 5: _*))\n  }\n\n}\n\n```\n\n```\n/* Output:\n15\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sayHello1(name: String) = \"Hello, \" + name\n    def sayHello2(name: String): Unit = {\n      print(\"Hello, \" + name)\n    }\n    println(sayHello1(\"Leo\"))\n    sayHello2(\"Leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\nHello, Leo\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.io.Source._\n    // 即使文件不存在，也不会报错，只有第一个使用变量时会报错，证明了表达式计算的lazy特性。\n    lazy val lines = fromFile(\"spark.txt\").mkString\n  }\n\n}\n\n```\n\n```\n/* Output:\n\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    import java.io._\n    try {\n      throw new IllegalArgumentException(\"x should not be negative\")\n    } catch {\n      case _: IllegalArgumentException => println(\"Illegal Argument!\")\n    } finally {\n      println(\"Release Resources!\")\n    }\n    try {\n      throw new IOException(\"User Defined Exception\")\n    } catch {\n      case e1: IllegalArgumentException => println(\"Illegal Argument!\")\n      case e2: IOException => println(\"IO Exception!\")\n    }\n  }\n\n}\n\n```\n\n```\n/* Output:\nIllegal Argument!\nRelease Resources!\nIO Exception!\n*///:~\n\n```\n\n## Array、ArrayBuffer\n\n### ArrayDemo\n\n```scala\npackage basic\n\nobject ArrayDemo {\n\n  def main(args: Array[String]): Unit = {\n    val a = new Array[Int](10)\n    println(a(0))\n    a(0) = 1\n    println(a)\n    val b = Array(\"hello\", \"world\")\n    b(0) = \"hi\"\n    println(b)\n    val c = Array(\"leo\", 30)\n    println(c)\n\n    val d = Array(1, 2, 3, 4, 5)\n    for (i <- 0 until d.length) {\n      print(d(i) + \" \")\n    }\n    println()\n    for (i <- 0 until (d.length, 2)) {\n      print(d(i) + \" \")\n    }\n    println()\n    for (i <- (0 until d.length).reverse) {\n      print(d(i) + \" \")\n    }\n    println()\n    for (i <- d) {\n      print(i + \" \")\n    }\n    println()\n    val e = Array(4, 2, 3, 1, 5)\n    val s = e.sum\n    val m = e.max\n    println(\"sum -> \" + s)\n    println(\"max -> \" + m)\n    scala.util.Sorting.quickSort(e)\n    println(e.mkString(\",\"))\n    println(e.mkString(\"<\", \",\", \">\"))\n    println(e.toString)\n  }\n\n}\n\n```\n\n```\n/* Output:\n0\n[I@11531931\n[Ljava.lang.String;@5e025e70\n[Ljava.lang.Object;@48140564\n1 2 3 4 5 \n1 3 5 \n5 4 3 2 1 \n1 2 3 4 5 \nsum -> 15\nmax -> 5\n1,2,3,4,5\n<1,2,3,4,5>\n[I@6b2fad11\n*///:~\n\n```\n\n### ArrayBufferDemo \n\n```scala\npackage basic\n\nobject ArrayBufferDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.collection.mutable.ArrayBuffer\n    val b = ArrayBuffer[Int]()\n    b += 1\n    b += (2, 3, 4, 5)\n    b ++= Array(6, 7, 8, 9, 10)\n    println(b)\n    b.trimEnd(5)\n    println(b)\n    b.insert(5, 6)\n    println(b)\n    b.insert(6, 7, 8, 9, 10)\n    println(b)\n    b.remove(1)\n    println(b)\n    b.remove(1, 3)\n    println(b)\n    val a = b.toArray\n    println(a)\n    println(a.toBuffer)\n  }\n\n}\n\n```\n\n```\n/* Output:\nArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nArrayBuffer(1, 2, 3, 4, 5)\nArrayBuffer(1, 2, 3, 4, 5, 6)\nArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nArrayBuffer(1, 3, 4, 5, 6, 7, 8, 9, 10)\nArrayBuffer(1, 6, 7, 8, 9, 10)\n[I@380fb434\nArrayBuffer(1, 6, 7, 8, 9, 10)\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject ArrayBufferDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.collection.mutable.ArrayBuffer\n    val a = Array(1, 2, 3, 4, 5)\n    val b = for (e <- a) yield e * e\n    println(b.mkString(\",\"))\n    val c = ArrayBuffer[Int]()\n    c += (1, 2, 3, 4, 5)\n    val d = for (e <- c) yield e * e\n    println(d.mkString(\",\"))\n    val e = for (e <- c if e %2 == 0) yield e * e\n    println(a.filter(_ % 2 == 0).map(2 * _).mkString(\",\"))\n    println(a.filter { _ % 2 == 0 } map { 2 * _ } mkString { \",\" })\n  }\n\n}\n\n```\n\n```\n/* Output:\n1,4,9,16,25\n1,4,9,16,25\n4,8\n4,8\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject ArrayBufferDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.collection.mutable.ArrayBuffer\n    val a = ArrayBuffer[Int]()\n     a += (1, 2, 3, 4, 5, -1, -3, -5, -9)\n     var foundFirstNegative = false\n     var arrayLength = a.length\n     var index = 0\n     while (index < arrayLength) {\n       if (a(index) >= 0) {\n         index += 1\n       } else {\n         if (!foundFirstNegative) { foundFirstNegative = true; index += 1 }\n         else { a.remove(index); arrayLength -= 1 }\n       }\n     }\n     println(a)\n  }\n\n}\n\n```\n\n```\n/* Output:\nArrayBuffer(1, 2, 3, 4, 5, -1)\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject ArrayBufferDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.collection.mutable.ArrayBuffer\n    val a = ArrayBuffer[Int]()\n    a += (1, 2, 3, 4, 5, -1, -3, -5, -9)\n    var foundFirstNegative = false\n    val keepIndexes = for (i <- 0 until a.length if !foundFirstNegative || a(i) >= 0) yield {\n      if (a(i) < 0) foundFirstNegative = true\n      i\n    }\n    for (i <- 0 until keepIndexes.length) { a(i) = a(keepIndexes(i)) }\n    a.trimEnd(a.length - keepIndexes.length)\n    println(a)\n  }\n\n}\n\n```\n\n```\n/* Output:\nArrayBuffer(1, 2, 3, 4, 5, -1)\n*///:~\n\n```\n\n## Map、Tuple\n\n### MapDemo\n\n```scala\npackage basic\n\nobject MapDemo {\n\n  def main(args: Array[String]): Unit = {\n    val ages1 = Map(\"Leo\" -> 30, \"Jen\" -> 25, \"Jack\" -> 23)\n    //ages1(\"Leo\") = 31\n    println(ages1)\n    val ages2 = scala.collection.mutable.Map(\"Leo\" -> 30, \"Jen\" -> 25, \"Jack\" -> 23)\n    ages2(\"Leo\") = 31\n    println(ages2)\n    val ages3 = Map((\"Leo\", 30), (\"Jen\", 25), (\"Jack\", 23))\n    println(ages3)\n    val ages4 = new scala.collection.mutable.HashMap[String, Int]\n    val leoAge1 = ages1(\"Leo\")\n    val leoAge2 = if (ages1.contains(\"leo\")) ages1(\"leo\") else 0\n    val leoAge3 = ages1.getOrElse(\"leo\", 0)\n    println(leoAge1, leoAge2, leoAge3)\n    ages4(\"Leo\") = 31\n    ages4 += (\"Mike\" -> 35, \"Tom\" -> 40)\n    ages4 -= \"Mike\"\n    val ages5 = ages1 + (\"Mike\" -> 36, \"Tom\" -> 40)\n    val ages6 = ages5 - \"Tom\"\n    println(ages4)\n    println(ages5)\n    println(ages6)\n    for ((key, value) <- ages1) println(key + \" \" + value)\n    for (key <- ages1.keySet) println(key)\n    for (value <- ages1.values) println(value)\n    val ages7 = for ((key, value) <- ages1) yield (value, key)\n    for ((k, v) <- ages7) println(k, v)\n  }\n\n}\n\n```\n\n```\n/* Output:\nMap(Leo -> 30, Jen -> 25, Jack -> 23)\nMap(Jen -> 25, Jack -> 23, Leo -> 31)\nMap(Leo -> 30, Jen -> 25, Jack -> 23)\n(30,0,0)\nMap(Tom -> 40, Leo -> 31)\nMap(Mike -> 36, Tom -> 40, Leo -> 30, Jack -> 23, Jen -> 25)\nMap(Mike -> 36, Leo -> 30, Jack -> 23, Jen -> 25)\nLeo 30\nJen 25\nJack 23\nLeo\nJen\nJack\n30\n25\n23\n(30,Leo)\n(25,Jen)\n(23,Jack)\n*///:~\n\n```\n\n### TupleDemo\n\n```scala\npackage basic\n\nobject TupleDemo {\n\n  def main(args: Array[String]): Unit = {\n    val t = (\"Leo\", 30)\n    println(t._1, t._2)\n    val names = Array(\"Leo\", \"Jack\", \"Mike\")\n    val ages = Array(30, 24, 26)\n    val nameAges = names.zip(ages)\n    for ((name, age) <- nameAges) println(name + \" -> \" + age)\n  }\n\n}\n\n```\n\n```\n/* Output:\n(Leo,30)\nLeo -> 30\nJack -> 24\nMike -> 26\n*///:~\n\n```\n\n## SortedMap、LinkedHashMap\n\n### SortedMapDemo\n\n```scala\npackage basic\n\nobject SortedMapDemo {\n\n  def main(args: Array[String]): Unit = {\n    val ages = scala.collection.immutable.SortedMap(\"Leo\" -> 30, \"Alice\" -> 15, \"Jen\" -> 25)\n    for ((k, v) <- ages) println(k, v)\n  }\n\n}\n\n```\n\n```\n/* Output:\n(Alice,15)\n(Jen,25)\n(Leo,30)\n*///:~\n\n```\n\n### LinkedHashMapDemo\n\n```scala\npackage basic\n\nimport scala.collection.mutable\n\nobject LinkedHashMapDemo {\n\n  def main(args: Array[String]): Unit = {\n    val ages = new mutable.LinkedHashMap[String, Int]\n    ages(\"Leo\") = 30\n    ages(\"Alice\") = 15\n    ages(\"Jen\") = 25\n    for ((k, v) <- ages) println(k, v)\n  }\n\n}\n\n```\n\n```\n/* Output:\n(Leo,30)\n(Alice,15)\n(Jen,25)\n*///:~\n\n```\n\n## Class\n\n### ClassDemo\n\n```scala\npackage basic\n\nobject ClassDemo {\n\n  def main(args: Array[String]): Unit = {\n    val hw = new HelloWorld\n    hw.sayHello()\n    println(hw.getName)\n  }\n\n  class HelloWorld {\n\n    private var name = \"Leo\"\n\n    def sayHello() { println(\"Hello, \" + name) }\n\n    def getName = name\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\nLeo\n*///:~\n\n```\n\n### GetterSetterDemo\n\n```scala\npackage basic\n\nobject GetterSetterDemo {\n\n  def main(args: Array[String]): Unit = {\n    val leo = new Student\n    println(leo.name)\n    leo.name = \"leo1\"\n    println(leo.name)\n  }\n\n  class Student {\n\n    var name = \"Leo\"\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nLeo\nleo1\n*///:~\n\n```\n\n### CustomGetterSetterDemo\n\n```scala\npackage basic\n\nobject CustomGetterSetterDemo {\n\n  def main(args: Array[String]): Unit = {\n    val leo = new Student\n    println(leo.name)\n    leo.name = \"leo1\"\n    println(leo.name)\n  }\n\n  class Student {\n\n    private var myName = \"leo\"\n\n    def name = \"your name is \" + myName\n\n    def name_=(newValue: String): Unit = {\n      println(\"you cannot edit your name!\")\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nyour name is leo\nyou cannot edit your name!\nyour name is leo\n*///:~\n\n```\n\n### FieldGetterDemo\n\n```scala\npackage basic\n\nobject FieldGetterDemo {\n\n  def main(args: Array[String]): Unit = {\n    val leo = new Student\n    println(leo.name)\n    leo.updateName(\"jack\")\n    println(leo.name)\n    leo.updateName(\"leo1\")\n    println(leo.name)\n  }\n\n  class Student {\n\n    private var myName = \"leo\"\n\n    def updateName(newName: String): Unit = {\n      if (newName == \"leo1\") myName = newName\n      else println(\"not accept this new name!\")\n    }\n\n    def name = \"your name is \" + myName\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nyour name is leo\nnot accept this new name!\nyour name is leo\nyour name is leo1\n*///:~\n\n```\n\n### PrivateThisDemo\n\n```scala\npackage basic\n\nobject PrivateThisDemo {\n\n  def main(args: Array[String]): Unit = {\n    val leo = new Student\n    leo.age = 30\n    val jack = new Student\n    jack.age = 18\n    println(leo.older(jack))\n  }\n\n  class Student {\n\n    private var myAge = 0\n//      private[this] var myAge = 0\n\n    def age_=(newValue: Int): Unit = {\n      if (newValue > 0) myAge = newValue\n      else print(\"illegal age!\")\n    }\n\n    def age = myAge\n\n    def older(s: Student) = {\n      myAge > s.myAge\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\ntrue\n*///:~\n\n```\n\n### JavaGetterSetterDemo\n\n```scala\npackage basic\n\nimport scala.beans.BeanProperty\n\nobject JavaGetterSetterDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    s.setName(\"leo\")\n    println(s.getName)\n    val t = new Teacher(\"jack\")\n    println(t.getName)\n  }\n\n  class Student {\n\n    @BeanProperty var name: String = _\n\n  }\n\n  class Teacher(@BeanProperty var name: String)\n\n}\n\n```\n\n```\n/* Output:\nleo\njack\n*///:~\n\n```\n\n### AuxiliaryConstructorDemo\n\n```scala\npackage basic\n\nobject AuxiliaryConstructorDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s1 = new Student\n    println(s1.getName)\n    println(s1.getAge)\n    val s2 = new Student(\"leo\")\n    println(s2.getName)\n    println(s2.getAge)\n    val s3 = new Student(\"leo\", 30)\n    println(s3.getName)\n    println(s3.getAge)\n  }\n\n  class Student {\n\n    private var name = \"\"\n    private var age = 0\n\n    def this(name: String) {\n      this()\n      this.name = name\n    }\n\n    def this(name: String, age: Int) {\n      this(name)\n      this.age = age\n    }\n\n    def getName = name\n\n    def setName(newName: String): Unit = {\n      this.name = newName\n    }\n\n    def getAge = age\n\n    def setAge(newAge: Int): Unit = {\n      this.age = age\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\n0\nleo\n0\nleo\n30\n*///:~\n\n```\n\n### MainConstructor\n\n```scala\npackage basic\n\nobject MainConstructor {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student(\"leo\", 30)\n    val t = new Teacher\n  }\n\n  class Student(val name: String, val age: Int) {\n\n    println(\"your name is \" + name + \", your age is \" + age)\n\n  }\n\n  class Teacher(val name: String = \"jack\", val age: Int = 35) {\n\n    println(\"your name is \" + name + \", your age is \" + age)\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nyour name is leo, your age is 30\nyour name is jack, your age is 35\n*///:~\n\n```\n\n### InnerClassDemo\n\n```scala\npackage basic\n\nimport scala.collection.mutable.ArrayBuffer\n\nobject InnerClassDemo {\n\n  def main(args: Array[String]): Unit = {\n    val c1 = new Class\n    val s1 = c1.getStudents(\"leo\")\n    c1.students += s1\n    val c2 = new Class\n    val s2 = c2.getStudents(\"leo\")\n//    c1.students += s2\n    c2.students += s2\n    println(c1.students)\n    println(c2.students)\n  }\n\n  class Class {\n\n    class Student(val name: String) {}\n\n    val students = new ArrayBuffer[Student]\n\n    def getStudents(name: String) = {\n      new Student(name)\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nArrayBuffer(basic.InnerClassDemo$Class$Student@7a79be86)\nArrayBuffer(basic.InnerClassDemo$Class$Student@34ce8af7)\n*///:~\n\n```\n\n## Object\n\n### ObjectDemo\n\n```scala\npackage basic\n\nobject ObjectDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p = Person\n    println(p.getEyeNum)\n    println(Person.getEyeNum)\n  }\n\n  object Person {\n\n    private var eyeNum = 2\n\n    println(\"this person object\")\n\n    def getEyeNum = eyeNum\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nthis person object\n2\n2\n*///:~\n\n```\n\n### CompanionObjectDemo\n\n```scala\npackage basic\n\nobject CompanionObjectDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p = new Person(\"leo\", 30)\n    p.sayHello\n  }\n\n  object Person {\n\n    private var eyeNum = 2\n\n    println(\"this person object\")\n\n    def getEyeNum = eyeNum\n\n  }\n\n  class Person(val name: String, val age: Int) {\n\n    def sayHello = println(\"Hi, \" + name + \", I guess you are \" +\n      age + \" years old!\" + \", and usually you must have \" + Person.eyeNum + \" eyes.\")\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nthis person object\nHi, leo, I guess you are 30 years old!, and usually you must have 2 eyes.\n*///:~\n\n```\n\n### AbstractClassDemo\n\n```scala\npackage basic\n\nobject AbstractClassDemo {\n\n  def main(args: Array[String]): Unit = {\n    val h = HelloImpl\n    h.sayHello(\"world\")\n  }\n\n  abstract class Hello(var message: String) {\n\n    def sayHello(name: String): Unit\n\n  }\n\n  object HelloImpl extends Hello(\"hello\") {\n\n    override def sayHello(name: String) = {\n      println(message + \", \" + name)\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nhello, world\n*///:~\n\n```\n\n### ApplyDemo\n\n```scala\npackage basic\n\nobject ApplyDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p = Person(\"leo\")\n    println(p.name)\n  }\n\n  class Person(val name: String)\n\n  object Person {\n\n    def apply(name: String) = new Person(name)\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nleo\n*///:~\n\n```\n\n### HelloWorldDemo\n\n```scala\npackage basic\n\nobject HelloWorldDemo {\n\n  def main(args: Array[String]): Unit = {\n    println(\"Hello World\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello World\n*///:~\n\n```\n\n### HelloWorld\n\n```scala\npackage basic\n\nobject HelloWorld extends App {\n\n  println(\"Hello World\")\n\n}\n\n```\n\n```\n/* Output:\nHello World\n*///:~\n\n```\n\n### EnumerationDemo\n\n```scala\npackage basic\n\nobject EnumerationDemoI {\n\n  def main(args: Array[String]): Unit = {\n    println(Season.SPRING)\n    println(Season.values)\n    for (e <- Season.values) println(e)\n  }\n\n  object Season extends Enumeration {\n\n    val SPRING, SUMMER, AUTUMN, WINTER = Value\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nSPRING\nSeason.ValueSet(SPRING, SUMMER, AUTUMN, WINTER)\nSPRING\nSUMMER\nAUTUMN\nWINTER\n*///:~\n\n```\n\n\n```scala\npackage basic\n\nobject EnumerationDemoII {\n\n  def main(args: Array[String]): Unit = {\n    println(Season(0))\n    println(Season.withName(\"spring\"))\n    for (e <- Season.values) println(e)\n  }\n\n  object Season extends Enumeration {\n\n    val SPRING = Value(0, \"spring\")\n    val SUMMER = Value(1, \"summer\")\n    val AUTUMN = Value(2, \"autumn\")\n    val WINTER = Value(3, \"winter\")\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nspring\nspring\nspring\nsummer\nautumn\nwinter\n*///:~\n\n```\n\n## Extends\n\n### ExtendsDemo\n\n```scala\npackage basic\n\nobject ExtendsDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    println(s.getScore)\n    println(s.getName)\n  }\n\n  class Person {\n\n    private var name = \"leo\"\n\n    def getName = name\n\n  }\n\n  class Student extends Person {\n\n    private var score = \"A\"\n\n    def getScore = score\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nA\nleo\n*///:~\n\n```\n\n### OverrideDemo\n\n```scala\npackage basic\n\nobject OverrideDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    println(s.getScore)\n    println(s.getName)\n  }\n\n  class Person {\n\n    private var name = \"leo\"\n\n    def getName = name\n\n  }\n\n  class Student extends Person {\n\n    private var score = \"A\"\n\n    def getScore = score\n\n    override def getName = \"Hi, I'm \" + super.getName\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nA\nHi, I'm leo\n*///:~\n\n```\n\n### OverrideFieldDemo\n\n```scala\npackage basic\n\nobject OverrideFieldDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    println(s.name)\n    println(s.age)\n  }\n\n  class Person {\n\n    val name: String = \"person\"\n\n    def age: Int = 0\n\n  }\n\n  class Student extends Person {\n\n    override val name: String = \"leo\"\n\n    override def age: Int = 30\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nleo\n30\n*///:~\n\n```\n\n### InstanceOfDemo\n\n```scala\npackage basic\n\nobject InstanceOfDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p: Person = new Student\n    var s: Student = null\n    println(s)\n    if (p.isInstanceOf[Student]) s = p.asInstanceOf[Student]\n    println(s)\n  }\n\n  class Person\n\n  class Student extends Person\n\n}\n\n```\n\n```\n/* Output:\nnull\nbasic.InstanceOfDemo$Student@11531931\n*///:~\n\n```\n\n### ClassOfDemo\n\n```scala\npackage basic\n\nobject ClassOfDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p: Person = new Student\n    println(p.isInstanceOf[Person])\n    println(p.getClass == classOf[Person])\n    println(p.getClass == classOf[Student])\n  }\n\n  class Person\n\n  class Student extends Person\n\n}\n\n```\n\n```\n/* Output:\ntrue\nfalse\ntrue\n*///:~\n\n```\n\n### ProtectedDemo\n\n```scala\npackage basic\n\nobject ProtectedDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s1 = new Student\n    s1.sayHello\n    val s2 = new Student\n    s2.sayHello\n    s1.makeFriends(s2)\n  }\n\n  class Person {\n\n    protected var name: String = \"leo\"\n    //  protected[this] var hobby: String = \"game\"\n    protected var hobby: String = \"game\"\n\n  }\n\n  class Student extends Person {\n\n    def sayHello = println(\"Hello, \" + name)\n\n    def makeFriends(s: Student): Unit = {\n      println(\"my hobby is \" + hobby + \", your hobby is \" + s.hobby)\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, leo\nHello, leo\nmy hobby is game, your hobby is game\n*///:~\n\n```\n\n### ParentConstructor\n\n```scala\npackage basic\n\nobject ParentConstructor {\n\n  def main(args: Array[String]): Unit = {\n    val s1 = new Student(\"leo\")\n    println(s1.name, s1.age, s1.score)\n    val s2 = new Student(30)\n    println(s2.name, s2.age, s2.score)\n  }\n\n  class Person(val name: String, val age: Int)\n\n  class Student(name: String, age: Int, var score: Double) extends Person(name, age) {\n\n    def this(name: String) {\n      this(name, 0, 0)\n    }\n\n    def this(age: Int) {\n      this(\"leo\", age, 0)\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\n(leo,0,0.0)\n(leo,30,0.0)\n*///:~\n\n```\n\n### AnonymousInnerClassDemo\n\n```scala\npackage basic\n\nobject AnonymousInnerClassDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p = new Person(\"leo\") {\n      override def sayHello = \"Hi, I'm \" + name\n    }\n    greeting(p)\n  }\n\n  def greeting(p: Person {def sayHello: String}): Unit = {\n    println(p.sayHello)\n  }\n\n  class Person(protected val name: String) {\n\n    def sayHello = \"Hello, I'm \" + name\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHi, I'm leo\n*///:~\n\n```\n\n### AbstractClassDemo\n\n```scala\npackage basic\n\nobject AbstractClassDemo {\n\n  def main(args: Array[String]): Unit = {\n    val h = HelloImpl\n    h.sayHello(\"world\")\n  }\n\n  abstract class Hello(var message: String) {\n\n    def sayHello(name: String): Unit\n\n  }\n\n  object HelloImpl extends Hello(\"hello\") {\n\n    override def sayHello(name: String) = {\n      println(message + \", \" + name)\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nhello, world\n*///:~\n\n```\n\n### AbstractFieldDemo\n\n```scala\npackage basic\n\nobject AbstractFieldDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    println(s.name)\n  }\n\n  abstract class Person {\n\n    val name: String\n\n  }\n\n  class Student extends Person {\n\n    val name: String = \"leo\"\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nleo\n*///:~\n\n```\n\n## Pattern Match\n\n### PatternMatchDemo\n\n```scala\npackage basic\n\nobject PatternMatchDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p: Person = new Student\n    p match {\n      case per: Person => println(\"it's Person's object\")\n      case _ => println(\"unknown type\")\n    }\n  }\n\n  class Person\n\n  class Student extends Person\n\n}\n```\n\n```\n/* Output:\nit's Person's object\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject PatternMatchDemoI {\n\n  def main(args: Array[String]): Unit = {\n    def judgeGrade(grade: String): Unit = {\n      grade match {\n        case \"A\" => println(\"Excellent\")\n        case \"B\" => println(\"Good\")\n        case \"C\" => println(\"Just so so\")\n        case _ => println(\"You need work harder\")\n      }\n    }\n    judgeGrade(\"A\")\n    judgeGrade(\"D\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nExcellent\nYou need work harder\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject PatternMatchDemoII {\n\n  def main(args: Array[String]): Unit = {\n    def judgeGrade(name: String, grade: String): Unit = {\n      grade match {\n        case \"A\" => println(name + \", you are excellent\")\n        case \"B\" => println(name + \", you are good\")\n        case \"C\" => println(name + \", your are just so so\")\n        case _ if name == \"leo\" => println(name + \", you are a good boy, come on\")\n        case _ => println(name + \", you need to work harder\")\n      }\n    }\n    judgeGrade(\"jack\", \"A\")\n    judgeGrade(\"leo\", \"D\")\n    judgeGrade(\"jen\", \"D\")\n  }\n\n}\n\n```\n\n```\n/* Output:\njack, you are excellent\nleo, you are a good boy, come on\njen, you need to work harder\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject PatternMatchDemoIII {\n\n  def main(args: Array[String]): Unit = {\n    import java.io._\n    def processException(e: Exception): Unit = {\n      e match {\n        case e1: IllegalArgumentException => println(\"you have illegal arguments! exception is: \" + e1)\n        case e2: FileNotFoundException => println(\"cannot find the file you need read or write! exceptiotn is: \" + e2)\n        case e3: IOException => println(\"you got an error while you were doing IO operation! exception is: \" + e3)\n        case _: Exception => println(\"cannot know which exception you have!\")\n      }\n    }\n    processException(new IllegalArgumentException(\"illegal argument!\"))\n    processException(new IOException(\"io exception!\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nyou have illegal arguments! exception is: java.lang.IllegalArgumentException: illegal argument!\nyou got an error while you were doing IO operation! exception is: java.io.IOException: io exception!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject PatternMatchDemoIV {\n\n  def main(args: Array[String]): Unit = {\n//    def greeting(arr: Array[String]): Unit = {\n//      arr match {\n//        case Array(\"Leo\") => println(\"Hi, Leo!\")\n//        case Array(girl1, girl2, girl3) => println(\"Hi, girls, nice to meet you. \" + girl1 + \" and \" + girl2 + \" and \" + girl3)\n//        case Array(\"Leo\", _*) => println(\"Hi, Leo, please introduce your friends to me.\")\n//        case _ => println(\"hey who are you?\")\n//      }\n//    }\n//    greeting(Array(\"Leo\"))\n//    greeting(Array(\"Jen\", \"Marry\", \"Penny\"))\n//    greeting(Array(\"Leo\", \"Jack\"))\n//    greeting(Array(\"Jack\"))\n\n    def greeting(list: List[String]): Unit = {\n      list match {\n        case \"Leo\" :: Nil => println(\"Hi, Leo!\")\n        case girl1 :: girl2 :: girl3 :: Nil => println(\"Hi, girls, nice to meet you. \" + girl1 + \" and \" + girl2 + \" and \" + girl3)\n        case \"Leo\" :: tail => println(\"Hi, Leo, please introduce your friends to me.\")\n        case _ => println(\"hey, who are you!\")\n      }\n    }\n    greeting(List(\"Leo\"))\n    greeting(List(\"Jen\", \"Marry\", \"Penny\"))\n    greeting(List(\"Leo\", \"Jack\"))\n    greeting(List(\"Jack\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nHi, Leo!\nHi, girls, nice to meet you. Jen and Marry and Penny\nHi, Leo, please introduce your friends to me.\nhey, who are you!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject PatternMatchDemoV {\n\n  def main(args: Array[String]): Unit = {\n    class Person\n    case class Teacher(name: String, subject: String) extends Person\n    case class Student(name: String, classroom: String) extends Person\n    def judgeIdentify(p: Person): Unit = {\n      p match {\n        case Teacher(name, subject) => println(\"Teacher, name is \" + name + \", subject is \" + subject)\n        case Student(name, classroom) => println(\"Student, name is \" + name + \", classroom is \" + classroom)\n        case _ => println(\"Illegal access, please go out of the school!\")\n      }\n    }\n    judgeIdentify(new Teacher(\"Leo\", \"mathematics\"))\n    judgeIdentify(new Student(\"Jack\", \"class\"))\n    judgeIdentify(new Person)\n  }\n\n}\n\n```\n\n```\n/* Output:\nTeacher, name is Leo, subject is mathematics\nStudent, name is Jack, classroom is class\nIllegal access, please go out of the school!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject PatternMatchDemoVI {\n\n  def main(args: Array[String]): Unit = {\n    val grades = Map(\"Leo\" -> \"A\", \"Jack\" -> \"B\", \"Jen\" -> \"C\")\n    def getGrade(name: String): Unit = {\n      val grade = grades.get(name)\n      grade match {\n        case Some(grade) => println(\"your grade is \" + grade)\n        case None => println(\"sorry, your grade information is not in the system\")\n      }\n    }\n    getGrade(\"Leo\")\n    getGrade(\"Marry\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nyour grade is A\nsorry, your grade information is not in the system\n*///:~\n\n```\n\n## Trait\n\n### TraitDemo\n\n```scala\npackage basic\n\nobject TraitDemoI {\n\n  def main(args: Array[String]): Unit = {\n    val p1 = new Person(\"leo\")\n    val p2 = new Person(\"jack\")\n    p1.sayHello(\"jack\")\n    p2.sayHello(\"leo\")\n    p1.makeFriends(p2)\n  }\n\n  trait HelloTrait {\n\n    def sayHello(name: String)\n\n  }\n\n  trait MakeFriendsTrait {\n\n    def makeFriends(p: Person)\n\n  }\n\n  class Person(val name: String) extends HelloTrait with MakeFriendsTrait {\n\n    def sayHello(otherName: String) = println(\"Hello, \" + otherName + \", I'm \" + name)\n\n    def makeFriends(p: Person) = println(\"Hello \" + p.name + \", I'm \" + name + \", I want to make friends with you.\")\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, jack, I'm leo\nHello, leo, I'm jack\nHello jack, I'm leo, I want to make friends with you.\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoII {\n\n  def main(args: Array[String]): Unit = {\n    val p1 = new Person(\"leo\")\n    val p2 = new Person(\"jack\")\n    p1.makeFriends(p2)\n  }\n\n  trait Logger {\n\n    def log(message: String) = println(message)\n\n  }\n\n  class Person(val name: String) extends Logger {\n\n    def makeFriends(p: Person): Unit = {\n      println(\"Hi, I'm \" + name + \", I'm glad to make friends with you, \" + p.name)\n      log(\"makeFriends method is invoked with parameter Person[name=\" + p.name + \"]\")\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHi, I'm leo, I'm glad to make friends with you, jack\nmakeFriends method is invoked with parameter Person[name=jack]\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoIII {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student(\"leo\")\n    s.sayHello\n  }\n\n  trait Person {\n\n    val eyeNum: Int = 2\n\n  }\n\n  class Student(val name: String) extends Person {\n\n    def sayHello = println(\"Hi, I'm \" + name + \", I have \" + eyeNum + \" eyes.\")\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHi, I'm leo, I have 2 eyes.\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoIV {\n\n  def main(args: Array[String]): Unit = {\n    val p1 = new Person(\"leo\")\n    val p2 = new Person(\"jack\")\n    p1.makeFriends(p2)\n  }\n\n  trait SayHello {\n\n    val msg: String\n\n    def sayHello(name: String) = println(msg + \", \" + name)\n\n  }\n\n  class Person(val name: String) extends SayHello {\n\n    val msg: String = \"hello\"\n\n    def makeFriends(p: Person): Unit = {\n      sayHello(p.name)\n      println(\"I'm \" + name + \", I want to make friends with you!\")\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nhello, jack\nI'm leo, I want to make friends with you!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoIX {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    println(s.getClass)\n  }\n\n  class Person { println(\"Person's constructor!\") }\n\n  trait Logger { println(\"Logger's constructor!\") }\n\n  trait MyLogger extends Logger { println(\"MyLogger's constructor!\") }\n\n  trait TimeLogger extends Logger { println(\"TimeLogger's constructor!\") }\n\n  class Student extends Person with MyLogger with TimeLogger {\n\n    println(\"Student's constructor!\")\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nPerson's constructor!\nLogger's constructor!\nMyLogger's constructor!\nTimeLogger's constructor!\nStudent's constructor!\nclass basic.TraitDemoIX$Student\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoIV {\n\n  def main(args: Array[String]): Unit = {\n    val p1 = new Person(\"leo\")\n    val p2 = new Person(\"jack\")\n    p1.makeFriends(p2)\n  }\n\n  trait SayHello {\n\n    val msg: String\n\n    def sayHello(name: String) = println(msg + \", \" + name)\n\n  }\n\n  class Person(val name: String) extends SayHello {\n\n    val msg: String = \"hello\"\n\n    def makeFriends(p: Person): Unit = {\n      sayHello(p.name)\n      println(\"I'm \" + name + \", I want to make friends with you!\")\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nhello, jack\nI'm leo, I want to make friends with you!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoIX {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    println(s.getClass)\n  }\n\n  class Person { println(\"Person's constructor!\") }\n\n  trait Logger { println(\"Logger's constructor!\") }\n\n  trait MyLogger extends Logger { println(\"MyLogger's constructor!\") }\n\n  trait TimeLogger extends Logger { println(\"TimeLogger's constructor!\") }\n\n  class Student extends Person with MyLogger with TimeLogger {\n\n    println(\"Student's constructor!\")\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nPerson's constructor!\nLogger's constructor!\nMyLogger's constructor!\nTimeLogger's constructor!\nStudent's constructor!\nclass basic.TraitDemoIX$Student\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoV {\n\n  def main(args: Array[String]): Unit = {\n    val p1 = new Person(\"leo\")\n    p1.sayHello\n    val p2 = new Person(\"jack\") with MyLogger\n    p2.sayHello\n  }\n\n  trait Logged {\n\n    def log(msg: String) {}\n\n  }\n\n  trait MyLogger extends Logged {\n\n    override def log(msg: String) { println(\"log: \" + msg) }\n\n  }\n\n  class Person(val name: String) extends Logged {\n\n    def sayHello { println(\"Hi, I'm \" + name); log(\"sayHello is invoked!\") }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHi, I'm leo\nHi, I'm jack\nlog: sayHello is invoked!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoVI {\n\n  def main(args: Array[String]): Unit = {\n    val p = new Person(\"leo\")\n    p.sayHello\n  }\n\n  trait Handler {\n\n    def handle(data: String) {}\n\n  }\n\n  trait DataValidHandler extends Handler {\n\n    override def handle(data: String): Unit = {\n      println(\"check data: \" + data)\n      super.handle(data)\n    }\n\n  }\n\n  trait SignatureValidHandler extends Handler {\n\n    override def handle(data: String): Unit = {\n      println(\"check signature: \" + data)\n      super.handle(data)\n    }\n\n  }\n\n  class Person(val name: String) extends SignatureValidHandler with DataValidHandler {\n\n    def sayHello = { println(\"Hello, \" + name); handle(name) }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, leo\ncheck data: leo\ncheck signature: leo\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoVII {\n\n  def main(args: Array[String]): Unit = {\n    println(classOf[Logger])\n    println(classOf[MyLogger])\n  }\n\n  trait Logger {\n\n    def log(msg: String)\n\n  }\n\n  trait MyLogger extends Logger {\n\n    abstract override def log(msg: String) { super.log(msg) }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\ninterface basic.TraitDemoVII$Logger\ninterface basic.TraitDemoVII$MyLogger\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoVIII {\n\n  def main(args: Array[String]): Unit = {\n    val p1 = new Person(\"leo\")\n    val p2 = new Person(\"jack\")\n    println(p1.getClass)\n    println(p2.getClass)\n  }\n\n  trait Valid {\n\n    def getName: String\n\n    def valid: Boolean = {\n      getName == \"leo\"\n    }\n\n  }\n\n  class Person(val name: String) extends Valid {\n\n    println(valid)\n\n    def getName = name\n\n  }\n\n}\n\n```\n\n```\n/* Output:\ntrue\nfalse\nclass basic.TraitDemoVIII$Person\nclass basic.TraitDemoVIII$Person\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoX {\n\n  def main(args: Array[String]): Unit = {\n    class Person1\n    val p1 = new {\n      val msg: String = \"init\"\n    } with Person1 with SayHello\n    class Person2 extends {\n      val msg: String = \"init\"\n    } with SayHello\n    val p2 = new Person2\n    println(p1.getClass)\n    println(p2.getClass)\n  }\n\n  trait SayHello {\n\n    val msg: String\n    println(msg.toString)\n\n  }\n\n}\n\n```\n\n```\n/* Output:\ninit\ninit\nclass basic.TraitDemoX$$anon$1\nclass basic.TraitDemoX$Person2$1\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoXI {\n\n  def main(args: Array[String]): Unit = {\n    val p = new Person\n    println(p.getClass)\n  }\n\n  trait SayHello {\n\n    lazy val msg: String = null\n    println(msg.toString)\n\n  }\n\n  class Person extends SayHello {\n\n    override lazy val msg: String = \"init\"\n\n  }\n\n}\n\n```\n\n```\n/* Output:\ninit\nclass basic.TraitDemoXI$Person\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoXII {\n\n  def main(args: Array[String]): Unit = {\n    val p = new Person(\"leo\")\n    p.sayHello\n  }\n\n  class MyUtil {\n\n    def printMessage(msg: String) = println(msg)\n\n  }\n\n  trait Logger extends MyUtil {\n\n    def log(msg: String) = printMessage(\"log: \" + msg)\n\n  }\n\n  class Person(val name: String) extends Logger {\n\n    def sayHello: Unit = {\n      log(\"Hi, I'm \" + name)\n      printMessage(\"Hi, I'm \" + name)\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nlog: Hi, I'm leo\nHi, I'm leo\n*///:~\n\n```\n\n## Functional Program\n\n### FunctionalProgramDemo\n\n```scala\npackage basic\n\nobject FunctionalProgramDemo {\n\n  def main(args: Array[String]): Unit = {\n    val l1 = List(\"Leo\", \"Jen\", \"Peter\", \"Jack\").map(\"name is \" + _)\n    val l2 = List(\"Hello World\", \"You Me\").flatMap(_.split(\" \"))\n    val l3 = List(\"I\", \"have\", \"a\", \"beautiful\", \"house\")\n    val l4 =  List(\"Leo\", \"Jen\", \"Peter\", \"Jack\").zip(List(100, 90, 75, 83))\n    println(l1)\n    println(l2)\n    println(l3)\n    println(l4)\n  }\n\n}\n\n```\n\n```\n/* Output:\nList(name is Leo, name is Jen, name is Peter, name is Jack)\nList(Hello, World, You, Me)\nList(I, have, a, beautiful, house)\nList((Leo,100), (Jen,90), (Peter,75), (Jack,83))\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionalProgramDemoI {\n\n  def main(args: Array[String]): Unit = {\n    val line1 = scala.io.Source.fromFile(\"README.md\").mkString\n    val line2 = scala.io.Source.fromFile(\"README.md\").mkString\n    val lines = List(line1, line2)\n    val count = lines.flatMap(_.split(\"\\n\")).flatMap(_.split(\" \")).map((_, 1)).map(_._2).reduceLeft(_ + _)\n    println(count)\n  }\n\n}\n\n```\n\n```\n/* Output:\n16\n*///:~\n\n```\n\n### FunctionAssignDemo\n\n```scala\npackage basic\n\nobject FunctionAssignDemo {\n\n  def main(args: Array[String]): Unit = {\n    val sayHelloFunc = sayHello _\n    sayHelloFunc(\"leo\")\n  }\n\n  def sayHello(name: String) { println(\"Hello, \" + name) }\n\n}\n\n```\n\n```\n/* Output:\nHello, leo\n*///:~\n\n```\n\n### AnonymousFunctionDemo\n\n```scala\npackage basic\n\nobject AnonymousFunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    val sayHelloFunc = (name: String) => println(\"Hello, \" + name)\n    sayHelloFunc(\"Leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\n*///:~\n\n```\n\n### HigherOrderFunctionDemo\n\n```scala\npackage basic\n\nobject HigherOrderFunctionDemoI {\n\n  def main(args: Array[String]): Unit = {\n    val sayHelloFunc = (name: String) => println(\"Hello, \" + name)\n    def greeting(func: (String) => Unit, name: String) { func(name) }\n    greeting(sayHelloFunc, \"Leo\")\n\n    println(Array(1, 2, 3, 4, 5).map((num: Int) => num * num).mkString(\",\"))\n\n    def getGreetingFunc(msg: String) = (name: String) => println(msg + \", \" + name)\n    val greetingFunc = getGreetingFunc(\"hello\")\n    greetingFunc(\"leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\n1,4,9,16,25\nhello, leo\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject HigherOrderFunctionDemoII {\n\n  def main(args: Array[String]): Unit = {\n    def greeting(func: (String) => Unit, name: String) { func(name) }\n    greeting((name: String) => println(\"Hello, \" + name), \"Leo\")\n    greeting((name) => println(\"Hello, \" + name), \"Leo\")\n    greeting(name => println(\"Hello, \" + name), \"Leo\")\n\n    def triple(func: (Int) => Int) = { func(3) }\n    println(triple(3 * _))\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\nHello, Leo\nHello, Leo\n9\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject HigherOrderFunctionDemoIII {\n\n  def main(args: Array[String]): Unit = {\n    println(Array(1, 2, 3, 4, 5).map(2 * _).mkString(\",\"))\n    (1 to 9).map(\"*\" * _).foreach(println _)\n    println((1 to 20).filter(_ % 2 == 0).mkString(\",\"))\n    println((1 to 5).reduceLeft(_ * _))\n    println(Array(3, 2, 5, 4, 10, 1).sortWith(_ < _).mkString(\",\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\n2,4,6,8,10\n*\n**\n***\n****\n*****\n******\n*******\n********\n*********\n2,4,6,8,10,12,14,16,18,20\n120\n1,2,3,4,5,10\n*///:~\n\n```\n\n### ClosureDemo\n\n```scala\npackage basic\n\nobject ClosureDemo {\n\n  def main(args: Array[String]): Unit = {\n    def getGreetingFunc(msg: String) = (name: String) => println(msg + \", \" + name)\n    val greetingFuncHello = getGreetingFunc(\"hello\")\n    val greetingFuncHi = getGreetingFunc(\"hi\")\n    greetingFuncHello(\"leo\")\n    greetingFuncHi(\"leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nhello, leo\nhi, leo\n*///:~\n\n```\n\n### SAMConvertDemo\n\n```scala\npackage basic\n\nimport java.awt.event._\nimport javax.swing._\n\nobject SAMConvertDemo extends App {\n\n//  val f = new JFrame(\"Hello World\")\n//  val b = new JButton(\"Click Me\")\n//  b.setBounds(100, 100, 65, 30)\n//  b.addActionListener(new ActionListener {\n//    override def actionPerformed(event: ActionEvent): Unit = {\n//      println(\"Click Me\")\n//    }\n//  })\n//  f.add(b)\n//  f.setSize(300, 300)\n//  f.setVisible(true)\n\n  val f = new JFrame(\"Hello World\")\n  val b = new JButton(\"Click Me\")\n  b.setBounds(100, 100, 65, 30)\n  implicit def getActionListener(actionProcessFunc: (ActionEvent) => Unit) = new ActionListener {\n    override def actionPerformed(event: ActionEvent): Unit = {\n      actionProcessFunc(event)\n    }\n  }\n  b.addActionListener((event: ActionEvent) => println(\"Click Me\"))\n  f.add(b)\n  f.setSize(300, 300)\n  f.setVisible(true)\n\n}\n\n```\n\n```\n/* Output:\nClick Me\n*///:~\n\n```\n\n### CurryingDemo\n\n```scala\npackage basic\n\nobject CurryingDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sum1(a: Int, b: Int) = a + b\n    println(sum1(1, 1))\n    def sum2(a: Int) = (b: Int) => a + b\n    println(sum2(1)(1))\n    def sum3(a: Int)(b: Int) = a + b\n    println(sum3(1)(1))\n  }\n\n}\n\n```\n\n```\n/* Output:\n2\n2\n2\n*///:~\n\n```\n\n### ReturnDemo\n\n```scala\npackage basic\n\nobject ReturnDemo {\n\n  def main(args: Array[String]): Unit = {\n    def greeting(name: String) = {\n      def sayHello(name: String): String = {\n        return \"Hello, \" + name\n      }\n      sayHello(name)\n    }\n    println(greeting(\"Leo\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\n*///:~\n\n```\n\n## Container\n\n### ListDemo\n\n```scala\npackage basic\n\nobject ListDemo {\n\n  def main(args: Array[String]): Unit = {\n    def decorator(l: List[Int], prefix: String): Unit = {\n      if (l != Nil) {\n        print(prefix + l.head + \" \")\n        decorator(l.tail, prefix)\n      }\n    }\n    val l = List(1, 2, 3, 4, 5)\n    decorator(l, \"#\")\n  }\n\n}\n\n```\n\n```\n/* Output:\n#1 #2 #3 #4 #5 \n*///:~\n\n```\n\n### LinkedListDemo\n\n```scala\npackage basic\n\nobject LinkedListDemo {\n\n  def main(args: Array[String]): Unit = {\n//    val l = scala.collection.mutable.LinkedList(1, 2, 3, 4, 5)\n//    var current = l\n//    while (current != Nil) {\n//      current.elem = current.elem * 2\n//      current = current.next\n//    }\n//    println(l.mkString(\",\"))\n\n    val l = scala.collection.mutable.LinkedList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var current = l\n    var first = true\n    while (current != Nil && current.next != Nil) {\n      if (first) { current.elem = current.elem * 2; first = false }\n      current = current.next.next\n      if (current != Nil) current.elem = current.elem * 2\n    }\n    println(l.mkString(\",\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\n2,2,6,4,10,6,14,8,18,10\n*///:~\n\n```\n\n### SetDemo\n\n```scala\npackage basic\n\nobject SetDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s1 = new scala.collection.mutable.HashSet[Int]()\n    s1 += 1; s1 += 2; s1 += 5\n    val s2 = new scala.collection.mutable.LinkedHashSet[Int]()\n    s2 += 1; s2 += 2; s2 += 5\n    val s3 = scala.collection.mutable.SortedSet[String](\"banana\", \"apple\", \"candy\")\n    println(s1)\n    println(s2)\n    println(s3)\n  }\n\n}\n\n```\n\n```\n/* Output:\nSet(1, 5, 2)\nSet(1, 2, 5)\nTreeSet(apple, banana, candy)\n*///:~\n\n```\n\n## Generic\n\n### GenericDemo\n\n```scala\npackage basic\n\nobject GenericDemo {\n\n  def main(args: Array[String]): Unit = {\n    class Student[T](val localId: T) {\n      def getSchoolId(hukouId: T) = \"S-\" + hukouId + \"-\" + localId\n    }\n    val leo = new Student[Int](111)\n    println(leo.getSchoolId(100))\n\n    def getCard[T](content: T) = {\n      if (content.isInstanceOf[Int]) \"card: 001, \" + content\n      else if (content.isInstanceOf[String]) \"card: this is your card, \" + content\n      else \"card: \" + content\n    }\n    println(getCard[String](\"hello world\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nS-100-111\ncard: this is your card, hello world\n*///:~\n\n```\n\n### BoundsDemo\n\n```scala\npackage basic\n\nobject BoundsDemoI {\n\n  def main(args: Array[String]): Unit = {\n    class Person(val name: String) {\n      def sayHello = println(\"Hello, I'm \" + name)\n      def makeFriends(p: Person): Unit = {\n        sayHello\n        p.sayHello\n      }\n    }\n    class Student(name: String) extends Person(name)\n    class Party[T <: Person](p1: T, p2: T) {\n      def play = p1.makeFriends(p2)\n    }\n    val s1 = new Student(\"leo\")\n    val s2 = new Student(\"jack\")\n    val p = new Party[Student](s1, s2)\n    p.play\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, I'm leo\nHello, I'm jack\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BoundsDemoII {\n\n  def main(args: Array[String]): Unit = {\n    class Father(val name: String)\n    class Child(name: String) extends Father(name)\n    def getIDCard[R >: Child](person: R): Unit = {\n      if (person.getClass == classOf[Child]) println(\"please tell us your parents' names.\")\n      else if (person.getClass == classOf[Father]) println(\"sign your name for your child's id card.\")\n      else println(\"sorry, you are not allowed to get id card.\")\n    }\n    getIDCard[Child](new Child(\"leo\"))\n    getIDCard[Father](new Father(\"jack\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nplease tell us your parents' names.\nsign your name for your child's id card.\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BoundsDemoIII {\n\n  def main(args: Array[String]): Unit = {\n    class Person(val name: String) {\n      def sayHello = println(\"Hello, I'm \" + name)\n      def makeFriends(p: Person): Unit = {\n        sayHello\n        p.sayHello\n      }\n    }\n    class Student(name: String) extends Person(name)\n    class Dog(val name: String) { def sayHello = println(\"Wang Wang, I'm \" + name) }\n    implicit def dog2person(dog: Object): Person = if (dog.isInstanceOf[Dog]) { val _dog = dog.asInstanceOf[Dog]; new Person(_dog.name ) } else null\n    class Party[T <% Person](p1: T, p2: T) {\n      def play = p1.makeFriends(p2)\n    }\n    val s = new Student(\"leo\")\n    val d = new Dog(\"jack\")\n    val p = new Party[Person](s, d)\n    p.play\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, I'm leo\nHello, I'm jack\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BoundsDemoIV {\n\n  def main(args: Array[String]): Unit = {\n    class Calculator[T: Ordering](val number1: T, val number2: T) {\n      def max(implicit order: Ordering[T]) = if (order.compare(number1, number2) > 0) number1 else number2\n    }\n    val c = new Calculator[Int](1, 2)\n    println(c.max)\n  }\n\n}\n\n```\n\n```\n/* Output:\n2\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BoundsDemoV {\n\n  def main(args: Array[String]): Unit = {\n    class Meat(val name: String)\n    class Vegetable(val name: String)\n    def packageFood[T: Manifest](food: T*) = {\n      val foodPackage = new Array[T](food.length)\n      for (i <- 0 until food.length) foodPackage(i) = food(i)\n      foodPackage\n    }\n    val gongbaojiding = new Meat(\"gongbaojiding\")\n    val yuxiangrousi = new Meat(\"yuxiangrousi\")\n    val shousiyangpai = new Meat(\"shousiyangpai\")\n    val meatPackage = packageFood(gongbaojiding, yuxiangrousi, shousiyangpai)\n    val qingcai = new Vegetable(\"qingcai\")\n    val baicai = new Vegetable(\"baicai\")\n    val huanggua = new Vegetable(\"huanggua\")\n    val vegetablePackage = packageFood(qingcai, baicai, huanggua)\n    println(meatPackage)\n    println(vegetablePackage)\n  }\n\n}\n\n```\n\n```\n/* Output:\n[Lbasic.BoundsDemoV$Meat$1;@e580929\n[Lbasic.BoundsDemoV$Vegetable$1;@1cd072a9\n*///:~\n\n```\n\n### ContravariantDemo\n\n```scala\npackage basic\n\nobject ContravariantDemo {\n\n  def main(args: Array[String]): Unit = {\n    class Master\n    class Professional extends Master\n    class Card[-T](val name: String)\n    def enterMeet(card: Card[Professional]): Unit = {\n      println(\"welcom to have this meeting!\")\n    }\n    enterMeet(new Card[Professional](\"leo\"))\n    enterMeet(new Card[Master](\"jack\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nwelcom to have this meeting!\nwelcom to have this meeting!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject CovariantDemo {\n\n  def main(args: Array[String]): Unit = {\n    class Master\n    class Professional extends Master\n    class Card[+T](val name: String)\n    def enterMeet(card: Card[Master]): Unit = {\n      println(\"welcom to have this meeting!\")\n    }\n    enterMeet(new Card[Master](\"leo\"))\n    enterMeet(new Card[Professional](\"jack\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nwelcom to have this meeting!\nwelcom to have this meeting!\n*///:~\n\n```\n\n## Implicit Conversion\n\n### ImplicitConversionDemo\n\n```scala\npackage basic\n\nobject ImplicitConversionDemoI {\n\n  def main(args: Array[String]): Unit = {\n    class SpecialPerson(val name: String)\n    class Student(val name: String)\n    class Older(val name: String)\n    class Teacher(val name: String)\n    implicit def object2SpecialPerson(obj: Object): SpecialPerson = {\n      if (obj.getClass == classOf[Student]) { val stu = obj.asInstanceOf[Student]; new SpecialPerson(stu.name) }\n      else if (obj.getClass == classOf[Older]) { val older = obj.asInstanceOf[Older]; new SpecialPerson(older.name) }\n      else null\n    }\n    var ticketNumber = 0\n    def buySpecialTicket(p: SpecialPerson) = {\n      ticketNumber += 1\n      \"T-\" + ticketNumber\n    }\n    val s = new Student(\"leo\")\n    println(buySpecialTicket(s))\n    val o = new Older(\"jack\")\n    println(buySpecialTicket(o))\n    val t = new Teacher(\"tom\")\n    println(buySpecialTicket(t))\n  }\n\n}\n\n```\n\n```\n/* Output:\nT-1\nT-2\nT-3\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject ImplicitConversionDemoII {\n\n  def main(args: Array[String]): Unit = {\n    class Man(val name: String)\n    class Superman(val name: String) {\n      def emitLaser = println(\"emit a laster!\")\n    }\n    implicit def man2supername(man: Man): Superman = new Superman(man.name)\n    val leo = new Man(\"leo\")\n    leo.emitLaser\n  }\n\n}\n\n```\n\n```\n/* Output:\nemit a laster!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject ImplicitConversionDemoIII {\n\n  def main(args: Array[String]): Unit = {\n    class SpecialPerson(val name: String)\n    class Student(val name: String)\n    class Older(val name: String)\n    class Teacher(val name: String)\n    implicit def object2SpecialPerson(obj: Object): SpecialPerson = {\n      if (obj.getClass == classOf[Student]) { val stu = obj.asInstanceOf[Student]; new SpecialPerson(stu.name) }\n      else if (obj.getClass == classOf[Older]) { val older = obj.asInstanceOf[Older]; new SpecialPerson(older.name) }\n      else null\n    }\n    class TicketHouse {\n      var ticketNumber = 0\n      def buySpecialTicket(p: SpecialPerson) = {\n        ticketNumber += 1\n        \"T-\" + ticketNumber\n      }\n    }\n    val th = new TicketHouse\n    val s = new Student(\"leo\")\n    println(th.buySpecialTicket(s))\n    val o = new Older(\"jack\")\n    println(th.buySpecialTicket(o))\n    val t = new Teacher(\"tom\")\n    println(th.buySpecialTicket(t))\n  }\n\n}\n\n```\n\n```\n/* Output:\nT-1\nT-2\nT-3\n*///:~\n\n```\n\n### ImplicitParameterDemo\n\n```scala\npackage basic\n\nobject ImplicitParameterDemo {\n\n  def main(args: Array[String]): Unit = {\n    class SignPen {\n      def write(content: String) = println(content)\n    }\n    implicit val signPen = new SignPen\n    def signForExam(name: String)(implicit signPen: SignPen): Unit = {\n      signPen.write(name + \" come to exam in time.\")\n    }\n    signForExam(\"leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nleo come to exam in time.\n*///:~\n\n```\n\n## Actor\n\n### ActorDemo\n\n```scala\npackage basic\n\nimport scala.actors.Actor\n\nobject ActorDemoI {\n\n  def main(args: Array[String]): Unit = {\n    val helloActor = new HelloActor\n    helloActor.start()\n    helloActor ! \"leo\"\n  }\n\n  class HelloActor extends Actor {\n\n    def act() {\n      while (true) {\n        receive {\n          case name: String => println(\"Hello, \" + name)\n        }\n      }\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, leo\n*///:~\n\n```\n\n```scala\npackage basic\n\nimport scala.actors.Actor\n\nobject ActorDemoII {\n\n  def main(args: Array[String]): Unit = {\n    val userManageActor = new UserManageActor\n    userManageActor.start()\n    userManageActor ! Login(\"leo\", \"1234\")\n    userManageActor ! Register(\"leo\", \"1234\")\n  }\n\n  case class Login(username: String, password: String)\n\n  case class Register(username: String, password: String)\n\n  class UserManageActor extends Actor {\n\n    def act() {\n      while (true) {\n        receive {\n          case Login(username, password) => println(\"login, username is \" + username + \", password is \" + password)\n          case Register(username, password) => println(\"register, username is \" + username + \", password is \" + password)\n        }\n      }\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nlogin, username is leo, password is 1234\nregister, username is leo, password is 1234\n*///:~\n\n```\n\n```scala\npackage basic\n\nimport scala.actors.Actor\n\nobject ActorDemoIII {\n\n  def main(args: Array[String]): Unit = {\n    val leoTelephoneActor = new LeoTelephoneActor\n    leoTelephoneActor.start()\n    val jackTelephoneActor = new JackTelephoneActor(leoTelephoneActor)\n    jackTelephoneActor.start()\n  }\n\n  case class Message(content: String, sender: Actor)\n\n  class LeoTelephoneActor extends Actor {\n\n    def act() {\n      while (true) {\n        receive {\n          case Message(content, sender) => { println(\"leo telephone: \" + content); sender ! \"I'm leo, please call me after 10 minutes.\" }\n        }\n      }\n    }\n\n  }\n\n  class JackTelephoneActor(val leoTelephoneActor: Actor) extends Actor {\n\n    def act() {\n      leoTelephoneActor ! Message(\"Hello, Leo, I'm Jack\", this)\n      receive {\n        case response: String => println(\"jack telephone: \" + response)\n      }\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nleo telephone: Hello, Leo, I'm Jack\njack telephone: I'm leo, please call me after 10 minutes.\n*///:~\n\n```","source":"_posts/Scala快速入门.md","raw":"---\ntitle: Scala快速入门\ndate: 2019-09-13 08:00:00\ntags: Scala\ncategories: Scala\n---\nScala快速入门\n\n## Scala官网\n\n* [Scala官网](https://www.scala-lang.org/)\n* [Scala安装指南](https://docs.scala-lang.org/getting-started-intellij-track/getting-started-with-scala-in-intellij.html)\n* [Scala入门指南](https://docs.scala-lang.org/tour/tour-of-scala.html)\n\n## Scala基础\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    println(1 + 1)\n    println((1 + 1) * 2.0)\n    println(\"hello\".toCharArray)\n    println(((1 + 1) * 2.0).toString)\n    println(\"hello\".toUpperCase)\n    println(\"HELLO\".toLowerCase)\n  }\n\n}\n\n```\n\n```\n/* Output:\n2\n4.0\n[C@11531931\n4.0\nHELLO\nhello\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    val r = 1 + 1\n    println(2 * r)\n    var a = 1; a = 2\n    println(a)\n    val n: String = null\n    val m: Any = \"leo\"\n    val n1, n2: String = null\n    val m1, m2 = 100\n    println(n)\n    println(m)\n    println(n1)\n    println(n2)\n    println(m1)\n    println(m2)\n  }\n\n}\n\n```\n\n```\n/* Output:\n4\n2\nnull\nleo\nnull\nnull\n100\n100\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    println(1.toString)\n    println(1.to(10))\n    println(\"Hello\".intersect(\"World\"))\n    println(1 + 1)\n    println(1.+(1))\n    println(1 to 10)\n    var counter = 1; counter += 1\n    println(counter)\n  }\n\n}\n\n```\n\n```\n/* Output:\n1\nRange(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nlo\n2\n2\nRange(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n2\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.math._\n    println(sqrt(2))\n    println(pow(2, 4))\n    println(min(3, Pi))\n    println(\"Hello World\".distinct)\n    println(\"Hello World\"(6))\n    println(\"Hello World\".apply(6))\n    println(Array(1, 2, 3, 4))\n    println(Array.apply(1, 2, 3, 4))\n  }\n\n}\n\n```\n\n```\n/* Output:\n1.4142135623730951\n16.0\n3.0\nHelo Wrd\nW\nW\n[I@6442b0a6\n[I@60f82f98\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    var age = 30\n    println(if (age > 18) 1 else 0)\n    val isAdult1 = if (age > 18) 1 else 0\n    println(isAdult1)\n    var isAdult2 = -1\n    if (age > 18) isAdult2 = 1 else isAdult2 = 0\n    println(isAdult2)\n    println(if (age > 18) \"adult\" else 0)\n    age = 12\n    println(if (age > 18) \"adult\")\n    println(if (age > 18) \"adult\" else ())\n    println(if (age > 18) \"adult\" else if (age > 12) \"teenager\" else \"children\")\n  }\n\n}\n\n```\n\n```\n/* Output:\n1\n1\n1\nadult\n()\n()\nchildren\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    var x, y, z = 0\n    if (x < 10) { y = y + 1; z = z + 1 }\n    println(x, y, z)\n    if (x < 10) {\n      y = y + 1\n      z = z + 1\n    }\n    println(x, y, z)\n    var w = if (x < 10) { y = y + 1; z + 1 }\n    println(x, y, z, w)\n  }\n\n}\n\n```\n\n```\n/* Output:\n(0,1,1)\n(0,2,2)\n(0,3,2,3)\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    print(\"Hello World\"); println(\"Hello World\")\n    printf(\"Hi, my name is %s, I'm %d years old.\\n\", \"Leo\", 30)\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello WorldHello World\nHi, my name is Leo, I'm 30 years old.\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.io.StdIn\n    val name = StdIn.readLine(\"Welcome to Game House. Please tell me your name: \")\n    print(\"Thanks. Then please tell me your age: \")\n    val age = StdIn.readInt()\n    if (age > 18) {\n      printf(\"Hi, %s, you are %d years old, so you are legal to come here!\", name, age)\n    } else {\n      printf(\"Sorry, boy, %s, you are only %d years old. you are illegal to come here!\", name, age)\n    }\n  }\n\n}\n\n```\n\n```\n/* Output:\nWelcome to Game House. Please tell me your name: leo\nThanks. Then please tell me your age: 20\nHi, leo, you are 20 years old, so you are legal to come here!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    println(1 + \"\")\n    println(1.toString + \"\")\n    var n = 10\n    while (n > 0) {\n      print(n + \" \")\n      n -= 1\n    }\n    println()\n    n = 5\n    for (i <- 1 to n) print(i + \" \")\n    println()\n    for (i <- 1 until n) print(i + \" \")\n    println()\n    import scala.util.control.Breaks._\n    breakable {\n      var n = 10\n      for (c <- \"Hello World\") {\n        if (n == 5) break\n        print(c)\n        n -= 1\n      }\n    }\n  }\n\n}\n\n```\n\n```\n/* Output:\n1\n1\n10 9 8 7 6 5 4 3 2 1 \n1 2 3 4 5 \n1 2 3 4 \nHello\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    for (i <- 1 to 9; j <- 1 to i) {\n      print(j + \" * \" + i + \" = \" + i * j + \" \")\n      if (i == j) println()\n    }\n  }\n\n}\n\n```\n\n```\n/* Output:\n1 * 1 = 1 \n1 * 2 = 2 2 * 2 = 4 \n1 * 3 = 3 2 * 3 = 6 3 * 3 = 9 \n1 * 4 = 4 2 * 4 = 8 3 * 4 = 12 4 * 4 = 16 \n1 * 5 = 5 2 * 5 = 10 3 * 5 = 15 4 * 5 = 20 5 * 5 = 25 \n1 * 6 = 6 2 * 6 = 12 3 * 6 = 18 4 * 6 = 24 5 * 6 = 30 6 * 6 = 36 \n1 * 7 = 7 2 * 7 = 14 3 * 7 = 21 4 * 7 = 28 5 * 7 = 35 6 * 7 = 42 7 * 7 = 49 \n1 * 8 = 8 2 * 8 = 16 3 * 8 = 24 4 * 8 = 32 5 * 8 = 40 6 * 8 = 48 7 * 8 = 56 8 * 8 = 64 \n1 * 9 = 9 2 * 9 = 18 3 * 9 = 27 4 * 9 = 36 5 * 9 = 45 6 * 9 = 54 7 * 9 = 63 8 * 9 = 72 9 * 9 = 81 \n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BasicDemo {\n\n  def main(args: Array[String]): Unit = {\n    for (i <- 1 to 10 if i % 2 == 0) print(i + \" \")\n    \n    val v = for (i <- 1 to 10) yield i\n    println(v)\n    for (i <- v) {\n      print(i + \" \")\n    }\n  }\n\n}\n\n```\n\n```\n/* Output:\n2 4 6 8 10 Vector(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n1 2 3 4 5 6 7 8 9 10 \n*///:~\n\n```\n\n## Scala函数\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sayHello(name: String, age: Int) = {\n      if (age > 18) { printf(\"Hi %s, you are a big boy\\n\", name); age }\n      else { printf(\"Hi %s, you are a little boy\\n\", name); age }\n    }\n    sayHello(\"leo\", 30)\n  }\n\n}\n\n```\n\n```\n/* Output:\nHi leo, you are a big boy\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sayHello(name: String) = println(\"Hello, \" + name)\n    sayHello(\"Leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sum(n: Int) = {\n      var sum = 0\n      for (i <- 1 to n) sum += i\n      sum\n    }\n    println(sum(100))\n  }\n\n}\n\n```\n\n```\n/* Output:\n5050\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def fab(n: Int): Int = {\n      if (n <= 1) 1\n      else fab(n - 1) + fab(n - 2)\n    }\n    println(fab(5))\n  }\n\n}\n\n```\n\n```\n/* Output:\n8\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sayHello(firstName: String, middleName: String = \"William\", lastName: String = \"Croft\") = firstName + \" \" + middleName + \" \" + lastName\n    println(sayHello(\"Leo\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nLeo William Croft\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sayHello(firstName: String, middleName: String, lastName: String) = firstName + \" \" + middleName + \" \" + lastName\n    println(sayHello(firstName = \"Mick\", lastName = \"Nina\", middleName = \"Jack\"))\n    println(sayHello(\"Mick\", middleName = \"Jack\", lastName = \"Nina\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nMick Jack Nina\nMick Jack Nina\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sayHello(name: String, age: Int = 20): Unit = {\n      println(\"Hello, \" + name + \", your age is \" + age)\n    }\n    sayHello(\"Leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo, your age is 20\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sum(nums: Int*) = {\n      var res = 0\n      for (num <- nums) res += num\n      res\n    }\n    println(sum(1, 2, 3, 4, 5))\n  }\n\n}\n\n```\n\n```\n/* Output:\n15\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sum(nums: Int*): Int = {\n      if (nums.length == 0) 0\n      else nums.head + sum(nums.tail: _*)\n    }\n    println(sum(1 to 5: _*))\n  }\n\n}\n\n```\n\n```\n/* Output:\n15\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sayHello1(name: String) = \"Hello, \" + name\n    def sayHello2(name: String): Unit = {\n      print(\"Hello, \" + name)\n    }\n    println(sayHello1(\"Leo\"))\n    sayHello2(\"Leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\nHello, Leo\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.io.Source._\n    // 即使文件不存在，也不会报错，只有第一个使用变量时会报错，证明了表达式计算的lazy特性。\n    lazy val lines = fromFile(\"spark.txt\").mkString\n  }\n\n}\n\n```\n\n```\n/* Output:\n\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    import java.io._\n    try {\n      throw new IllegalArgumentException(\"x should not be negative\")\n    } catch {\n      case _: IllegalArgumentException => println(\"Illegal Argument!\")\n    } finally {\n      println(\"Release Resources!\")\n    }\n    try {\n      throw new IOException(\"User Defined Exception\")\n    } catch {\n      case e1: IllegalArgumentException => println(\"Illegal Argument!\")\n      case e2: IOException => println(\"IO Exception!\")\n    }\n  }\n\n}\n\n```\n\n```\n/* Output:\nIllegal Argument!\nRelease Resources!\nIO Exception!\n*///:~\n\n```\n\n## Array、ArrayBuffer\n\n### ArrayDemo\n\n```scala\npackage basic\n\nobject ArrayDemo {\n\n  def main(args: Array[String]): Unit = {\n    val a = new Array[Int](10)\n    println(a(0))\n    a(0) = 1\n    println(a)\n    val b = Array(\"hello\", \"world\")\n    b(0) = \"hi\"\n    println(b)\n    val c = Array(\"leo\", 30)\n    println(c)\n\n    val d = Array(1, 2, 3, 4, 5)\n    for (i <- 0 until d.length) {\n      print(d(i) + \" \")\n    }\n    println()\n    for (i <- 0 until (d.length, 2)) {\n      print(d(i) + \" \")\n    }\n    println()\n    for (i <- (0 until d.length).reverse) {\n      print(d(i) + \" \")\n    }\n    println()\n    for (i <- d) {\n      print(i + \" \")\n    }\n    println()\n    val e = Array(4, 2, 3, 1, 5)\n    val s = e.sum\n    val m = e.max\n    println(\"sum -> \" + s)\n    println(\"max -> \" + m)\n    scala.util.Sorting.quickSort(e)\n    println(e.mkString(\",\"))\n    println(e.mkString(\"<\", \",\", \">\"))\n    println(e.toString)\n  }\n\n}\n\n```\n\n```\n/* Output:\n0\n[I@11531931\n[Ljava.lang.String;@5e025e70\n[Ljava.lang.Object;@48140564\n1 2 3 4 5 \n1 3 5 \n5 4 3 2 1 \n1 2 3 4 5 \nsum -> 15\nmax -> 5\n1,2,3,4,5\n<1,2,3,4,5>\n[I@6b2fad11\n*///:~\n\n```\n\n### ArrayBufferDemo \n\n```scala\npackage basic\n\nobject ArrayBufferDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.collection.mutable.ArrayBuffer\n    val b = ArrayBuffer[Int]()\n    b += 1\n    b += (2, 3, 4, 5)\n    b ++= Array(6, 7, 8, 9, 10)\n    println(b)\n    b.trimEnd(5)\n    println(b)\n    b.insert(5, 6)\n    println(b)\n    b.insert(6, 7, 8, 9, 10)\n    println(b)\n    b.remove(1)\n    println(b)\n    b.remove(1, 3)\n    println(b)\n    val a = b.toArray\n    println(a)\n    println(a.toBuffer)\n  }\n\n}\n\n```\n\n```\n/* Output:\nArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nArrayBuffer(1, 2, 3, 4, 5)\nArrayBuffer(1, 2, 3, 4, 5, 6)\nArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nArrayBuffer(1, 3, 4, 5, 6, 7, 8, 9, 10)\nArrayBuffer(1, 6, 7, 8, 9, 10)\n[I@380fb434\nArrayBuffer(1, 6, 7, 8, 9, 10)\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject ArrayBufferDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.collection.mutable.ArrayBuffer\n    val a = Array(1, 2, 3, 4, 5)\n    val b = for (e <- a) yield e * e\n    println(b.mkString(\",\"))\n    val c = ArrayBuffer[Int]()\n    c += (1, 2, 3, 4, 5)\n    val d = for (e <- c) yield e * e\n    println(d.mkString(\",\"))\n    val e = for (e <- c if e %2 == 0) yield e * e\n    println(a.filter(_ % 2 == 0).map(2 * _).mkString(\",\"))\n    println(a.filter { _ % 2 == 0 } map { 2 * _ } mkString { \",\" })\n  }\n\n}\n\n```\n\n```\n/* Output:\n1,4,9,16,25\n1,4,9,16,25\n4,8\n4,8\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject ArrayBufferDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.collection.mutable.ArrayBuffer\n    val a = ArrayBuffer[Int]()\n     a += (1, 2, 3, 4, 5, -1, -3, -5, -9)\n     var foundFirstNegative = false\n     var arrayLength = a.length\n     var index = 0\n     while (index < arrayLength) {\n       if (a(index) >= 0) {\n         index += 1\n       } else {\n         if (!foundFirstNegative) { foundFirstNegative = true; index += 1 }\n         else { a.remove(index); arrayLength -= 1 }\n       }\n     }\n     println(a)\n  }\n\n}\n\n```\n\n```\n/* Output:\nArrayBuffer(1, 2, 3, 4, 5, -1)\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject ArrayBufferDemo {\n\n  def main(args: Array[String]): Unit = {\n    import scala.collection.mutable.ArrayBuffer\n    val a = ArrayBuffer[Int]()\n    a += (1, 2, 3, 4, 5, -1, -3, -5, -9)\n    var foundFirstNegative = false\n    val keepIndexes = for (i <- 0 until a.length if !foundFirstNegative || a(i) >= 0) yield {\n      if (a(i) < 0) foundFirstNegative = true\n      i\n    }\n    for (i <- 0 until keepIndexes.length) { a(i) = a(keepIndexes(i)) }\n    a.trimEnd(a.length - keepIndexes.length)\n    println(a)\n  }\n\n}\n\n```\n\n```\n/* Output:\nArrayBuffer(1, 2, 3, 4, 5, -1)\n*///:~\n\n```\n\n## Map、Tuple\n\n### MapDemo\n\n```scala\npackage basic\n\nobject MapDemo {\n\n  def main(args: Array[String]): Unit = {\n    val ages1 = Map(\"Leo\" -> 30, \"Jen\" -> 25, \"Jack\" -> 23)\n    //ages1(\"Leo\") = 31\n    println(ages1)\n    val ages2 = scala.collection.mutable.Map(\"Leo\" -> 30, \"Jen\" -> 25, \"Jack\" -> 23)\n    ages2(\"Leo\") = 31\n    println(ages2)\n    val ages3 = Map((\"Leo\", 30), (\"Jen\", 25), (\"Jack\", 23))\n    println(ages3)\n    val ages4 = new scala.collection.mutable.HashMap[String, Int]\n    val leoAge1 = ages1(\"Leo\")\n    val leoAge2 = if (ages1.contains(\"leo\")) ages1(\"leo\") else 0\n    val leoAge3 = ages1.getOrElse(\"leo\", 0)\n    println(leoAge1, leoAge2, leoAge3)\n    ages4(\"Leo\") = 31\n    ages4 += (\"Mike\" -> 35, \"Tom\" -> 40)\n    ages4 -= \"Mike\"\n    val ages5 = ages1 + (\"Mike\" -> 36, \"Tom\" -> 40)\n    val ages6 = ages5 - \"Tom\"\n    println(ages4)\n    println(ages5)\n    println(ages6)\n    for ((key, value) <- ages1) println(key + \" \" + value)\n    for (key <- ages1.keySet) println(key)\n    for (value <- ages1.values) println(value)\n    val ages7 = for ((key, value) <- ages1) yield (value, key)\n    for ((k, v) <- ages7) println(k, v)\n  }\n\n}\n\n```\n\n```\n/* Output:\nMap(Leo -> 30, Jen -> 25, Jack -> 23)\nMap(Jen -> 25, Jack -> 23, Leo -> 31)\nMap(Leo -> 30, Jen -> 25, Jack -> 23)\n(30,0,0)\nMap(Tom -> 40, Leo -> 31)\nMap(Mike -> 36, Tom -> 40, Leo -> 30, Jack -> 23, Jen -> 25)\nMap(Mike -> 36, Leo -> 30, Jack -> 23, Jen -> 25)\nLeo 30\nJen 25\nJack 23\nLeo\nJen\nJack\n30\n25\n23\n(30,Leo)\n(25,Jen)\n(23,Jack)\n*///:~\n\n```\n\n### TupleDemo\n\n```scala\npackage basic\n\nobject TupleDemo {\n\n  def main(args: Array[String]): Unit = {\n    val t = (\"Leo\", 30)\n    println(t._1, t._2)\n    val names = Array(\"Leo\", \"Jack\", \"Mike\")\n    val ages = Array(30, 24, 26)\n    val nameAges = names.zip(ages)\n    for ((name, age) <- nameAges) println(name + \" -> \" + age)\n  }\n\n}\n\n```\n\n```\n/* Output:\n(Leo,30)\nLeo -> 30\nJack -> 24\nMike -> 26\n*///:~\n\n```\n\n## SortedMap、LinkedHashMap\n\n### SortedMapDemo\n\n```scala\npackage basic\n\nobject SortedMapDemo {\n\n  def main(args: Array[String]): Unit = {\n    val ages = scala.collection.immutable.SortedMap(\"Leo\" -> 30, \"Alice\" -> 15, \"Jen\" -> 25)\n    for ((k, v) <- ages) println(k, v)\n  }\n\n}\n\n```\n\n```\n/* Output:\n(Alice,15)\n(Jen,25)\n(Leo,30)\n*///:~\n\n```\n\n### LinkedHashMapDemo\n\n```scala\npackage basic\n\nimport scala.collection.mutable\n\nobject LinkedHashMapDemo {\n\n  def main(args: Array[String]): Unit = {\n    val ages = new mutable.LinkedHashMap[String, Int]\n    ages(\"Leo\") = 30\n    ages(\"Alice\") = 15\n    ages(\"Jen\") = 25\n    for ((k, v) <- ages) println(k, v)\n  }\n\n}\n\n```\n\n```\n/* Output:\n(Leo,30)\n(Alice,15)\n(Jen,25)\n*///:~\n\n```\n\n## Class\n\n### ClassDemo\n\n```scala\npackage basic\n\nobject ClassDemo {\n\n  def main(args: Array[String]): Unit = {\n    val hw = new HelloWorld\n    hw.sayHello()\n    println(hw.getName)\n  }\n\n  class HelloWorld {\n\n    private var name = \"Leo\"\n\n    def sayHello() { println(\"Hello, \" + name) }\n\n    def getName = name\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\nLeo\n*///:~\n\n```\n\n### GetterSetterDemo\n\n```scala\npackage basic\n\nobject GetterSetterDemo {\n\n  def main(args: Array[String]): Unit = {\n    val leo = new Student\n    println(leo.name)\n    leo.name = \"leo1\"\n    println(leo.name)\n  }\n\n  class Student {\n\n    var name = \"Leo\"\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nLeo\nleo1\n*///:~\n\n```\n\n### CustomGetterSetterDemo\n\n```scala\npackage basic\n\nobject CustomGetterSetterDemo {\n\n  def main(args: Array[String]): Unit = {\n    val leo = new Student\n    println(leo.name)\n    leo.name = \"leo1\"\n    println(leo.name)\n  }\n\n  class Student {\n\n    private var myName = \"leo\"\n\n    def name = \"your name is \" + myName\n\n    def name_=(newValue: String): Unit = {\n      println(\"you cannot edit your name!\")\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nyour name is leo\nyou cannot edit your name!\nyour name is leo\n*///:~\n\n```\n\n### FieldGetterDemo\n\n```scala\npackage basic\n\nobject FieldGetterDemo {\n\n  def main(args: Array[String]): Unit = {\n    val leo = new Student\n    println(leo.name)\n    leo.updateName(\"jack\")\n    println(leo.name)\n    leo.updateName(\"leo1\")\n    println(leo.name)\n  }\n\n  class Student {\n\n    private var myName = \"leo\"\n\n    def updateName(newName: String): Unit = {\n      if (newName == \"leo1\") myName = newName\n      else println(\"not accept this new name!\")\n    }\n\n    def name = \"your name is \" + myName\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nyour name is leo\nnot accept this new name!\nyour name is leo\nyour name is leo1\n*///:~\n\n```\n\n### PrivateThisDemo\n\n```scala\npackage basic\n\nobject PrivateThisDemo {\n\n  def main(args: Array[String]): Unit = {\n    val leo = new Student\n    leo.age = 30\n    val jack = new Student\n    jack.age = 18\n    println(leo.older(jack))\n  }\n\n  class Student {\n\n    private var myAge = 0\n//      private[this] var myAge = 0\n\n    def age_=(newValue: Int): Unit = {\n      if (newValue > 0) myAge = newValue\n      else print(\"illegal age!\")\n    }\n\n    def age = myAge\n\n    def older(s: Student) = {\n      myAge > s.myAge\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\ntrue\n*///:~\n\n```\n\n### JavaGetterSetterDemo\n\n```scala\npackage basic\n\nimport scala.beans.BeanProperty\n\nobject JavaGetterSetterDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    s.setName(\"leo\")\n    println(s.getName)\n    val t = new Teacher(\"jack\")\n    println(t.getName)\n  }\n\n  class Student {\n\n    @BeanProperty var name: String = _\n\n  }\n\n  class Teacher(@BeanProperty var name: String)\n\n}\n\n```\n\n```\n/* Output:\nleo\njack\n*///:~\n\n```\n\n### AuxiliaryConstructorDemo\n\n```scala\npackage basic\n\nobject AuxiliaryConstructorDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s1 = new Student\n    println(s1.getName)\n    println(s1.getAge)\n    val s2 = new Student(\"leo\")\n    println(s2.getName)\n    println(s2.getAge)\n    val s3 = new Student(\"leo\", 30)\n    println(s3.getName)\n    println(s3.getAge)\n  }\n\n  class Student {\n\n    private var name = \"\"\n    private var age = 0\n\n    def this(name: String) {\n      this()\n      this.name = name\n    }\n\n    def this(name: String, age: Int) {\n      this(name)\n      this.age = age\n    }\n\n    def getName = name\n\n    def setName(newName: String): Unit = {\n      this.name = newName\n    }\n\n    def getAge = age\n\n    def setAge(newAge: Int): Unit = {\n      this.age = age\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\n0\nleo\n0\nleo\n30\n*///:~\n\n```\n\n### MainConstructor\n\n```scala\npackage basic\n\nobject MainConstructor {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student(\"leo\", 30)\n    val t = new Teacher\n  }\n\n  class Student(val name: String, val age: Int) {\n\n    println(\"your name is \" + name + \", your age is \" + age)\n\n  }\n\n  class Teacher(val name: String = \"jack\", val age: Int = 35) {\n\n    println(\"your name is \" + name + \", your age is \" + age)\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nyour name is leo, your age is 30\nyour name is jack, your age is 35\n*///:~\n\n```\n\n### InnerClassDemo\n\n```scala\npackage basic\n\nimport scala.collection.mutable.ArrayBuffer\n\nobject InnerClassDemo {\n\n  def main(args: Array[String]): Unit = {\n    val c1 = new Class\n    val s1 = c1.getStudents(\"leo\")\n    c1.students += s1\n    val c2 = new Class\n    val s2 = c2.getStudents(\"leo\")\n//    c1.students += s2\n    c2.students += s2\n    println(c1.students)\n    println(c2.students)\n  }\n\n  class Class {\n\n    class Student(val name: String) {}\n\n    val students = new ArrayBuffer[Student]\n\n    def getStudents(name: String) = {\n      new Student(name)\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nArrayBuffer(basic.InnerClassDemo$Class$Student@7a79be86)\nArrayBuffer(basic.InnerClassDemo$Class$Student@34ce8af7)\n*///:~\n\n```\n\n## Object\n\n### ObjectDemo\n\n```scala\npackage basic\n\nobject ObjectDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p = Person\n    println(p.getEyeNum)\n    println(Person.getEyeNum)\n  }\n\n  object Person {\n\n    private var eyeNum = 2\n\n    println(\"this person object\")\n\n    def getEyeNum = eyeNum\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nthis person object\n2\n2\n*///:~\n\n```\n\n### CompanionObjectDemo\n\n```scala\npackage basic\n\nobject CompanionObjectDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p = new Person(\"leo\", 30)\n    p.sayHello\n  }\n\n  object Person {\n\n    private var eyeNum = 2\n\n    println(\"this person object\")\n\n    def getEyeNum = eyeNum\n\n  }\n\n  class Person(val name: String, val age: Int) {\n\n    def sayHello = println(\"Hi, \" + name + \", I guess you are \" +\n      age + \" years old!\" + \", and usually you must have \" + Person.eyeNum + \" eyes.\")\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nthis person object\nHi, leo, I guess you are 30 years old!, and usually you must have 2 eyes.\n*///:~\n\n```\n\n### AbstractClassDemo\n\n```scala\npackage basic\n\nobject AbstractClassDemo {\n\n  def main(args: Array[String]): Unit = {\n    val h = HelloImpl\n    h.sayHello(\"world\")\n  }\n\n  abstract class Hello(var message: String) {\n\n    def sayHello(name: String): Unit\n\n  }\n\n  object HelloImpl extends Hello(\"hello\") {\n\n    override def sayHello(name: String) = {\n      println(message + \", \" + name)\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nhello, world\n*///:~\n\n```\n\n### ApplyDemo\n\n```scala\npackage basic\n\nobject ApplyDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p = Person(\"leo\")\n    println(p.name)\n  }\n\n  class Person(val name: String)\n\n  object Person {\n\n    def apply(name: String) = new Person(name)\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nleo\n*///:~\n\n```\n\n### HelloWorldDemo\n\n```scala\npackage basic\n\nobject HelloWorldDemo {\n\n  def main(args: Array[String]): Unit = {\n    println(\"Hello World\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello World\n*///:~\n\n```\n\n### HelloWorld\n\n```scala\npackage basic\n\nobject HelloWorld extends App {\n\n  println(\"Hello World\")\n\n}\n\n```\n\n```\n/* Output:\nHello World\n*///:~\n\n```\n\n### EnumerationDemo\n\n```scala\npackage basic\n\nobject EnumerationDemoI {\n\n  def main(args: Array[String]): Unit = {\n    println(Season.SPRING)\n    println(Season.values)\n    for (e <- Season.values) println(e)\n  }\n\n  object Season extends Enumeration {\n\n    val SPRING, SUMMER, AUTUMN, WINTER = Value\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nSPRING\nSeason.ValueSet(SPRING, SUMMER, AUTUMN, WINTER)\nSPRING\nSUMMER\nAUTUMN\nWINTER\n*///:~\n\n```\n\n\n```scala\npackage basic\n\nobject EnumerationDemoII {\n\n  def main(args: Array[String]): Unit = {\n    println(Season(0))\n    println(Season.withName(\"spring\"))\n    for (e <- Season.values) println(e)\n  }\n\n  object Season extends Enumeration {\n\n    val SPRING = Value(0, \"spring\")\n    val SUMMER = Value(1, \"summer\")\n    val AUTUMN = Value(2, \"autumn\")\n    val WINTER = Value(3, \"winter\")\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nspring\nspring\nspring\nsummer\nautumn\nwinter\n*///:~\n\n```\n\n## Extends\n\n### ExtendsDemo\n\n```scala\npackage basic\n\nobject ExtendsDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    println(s.getScore)\n    println(s.getName)\n  }\n\n  class Person {\n\n    private var name = \"leo\"\n\n    def getName = name\n\n  }\n\n  class Student extends Person {\n\n    private var score = \"A\"\n\n    def getScore = score\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nA\nleo\n*///:~\n\n```\n\n### OverrideDemo\n\n```scala\npackage basic\n\nobject OverrideDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    println(s.getScore)\n    println(s.getName)\n  }\n\n  class Person {\n\n    private var name = \"leo\"\n\n    def getName = name\n\n  }\n\n  class Student extends Person {\n\n    private var score = \"A\"\n\n    def getScore = score\n\n    override def getName = \"Hi, I'm \" + super.getName\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nA\nHi, I'm leo\n*///:~\n\n```\n\n### OverrideFieldDemo\n\n```scala\npackage basic\n\nobject OverrideFieldDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    println(s.name)\n    println(s.age)\n  }\n\n  class Person {\n\n    val name: String = \"person\"\n\n    def age: Int = 0\n\n  }\n\n  class Student extends Person {\n\n    override val name: String = \"leo\"\n\n    override def age: Int = 30\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nleo\n30\n*///:~\n\n```\n\n### InstanceOfDemo\n\n```scala\npackage basic\n\nobject InstanceOfDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p: Person = new Student\n    var s: Student = null\n    println(s)\n    if (p.isInstanceOf[Student]) s = p.asInstanceOf[Student]\n    println(s)\n  }\n\n  class Person\n\n  class Student extends Person\n\n}\n\n```\n\n```\n/* Output:\nnull\nbasic.InstanceOfDemo$Student@11531931\n*///:~\n\n```\n\n### ClassOfDemo\n\n```scala\npackage basic\n\nobject ClassOfDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p: Person = new Student\n    println(p.isInstanceOf[Person])\n    println(p.getClass == classOf[Person])\n    println(p.getClass == classOf[Student])\n  }\n\n  class Person\n\n  class Student extends Person\n\n}\n\n```\n\n```\n/* Output:\ntrue\nfalse\ntrue\n*///:~\n\n```\n\n### ProtectedDemo\n\n```scala\npackage basic\n\nobject ProtectedDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s1 = new Student\n    s1.sayHello\n    val s2 = new Student\n    s2.sayHello\n    s1.makeFriends(s2)\n  }\n\n  class Person {\n\n    protected var name: String = \"leo\"\n    //  protected[this] var hobby: String = \"game\"\n    protected var hobby: String = \"game\"\n\n  }\n\n  class Student extends Person {\n\n    def sayHello = println(\"Hello, \" + name)\n\n    def makeFriends(s: Student): Unit = {\n      println(\"my hobby is \" + hobby + \", your hobby is \" + s.hobby)\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, leo\nHello, leo\nmy hobby is game, your hobby is game\n*///:~\n\n```\n\n### ParentConstructor\n\n```scala\npackage basic\n\nobject ParentConstructor {\n\n  def main(args: Array[String]): Unit = {\n    val s1 = new Student(\"leo\")\n    println(s1.name, s1.age, s1.score)\n    val s2 = new Student(30)\n    println(s2.name, s2.age, s2.score)\n  }\n\n  class Person(val name: String, val age: Int)\n\n  class Student(name: String, age: Int, var score: Double) extends Person(name, age) {\n\n    def this(name: String) {\n      this(name, 0, 0)\n    }\n\n    def this(age: Int) {\n      this(\"leo\", age, 0)\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\n(leo,0,0.0)\n(leo,30,0.0)\n*///:~\n\n```\n\n### AnonymousInnerClassDemo\n\n```scala\npackage basic\n\nobject AnonymousInnerClassDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p = new Person(\"leo\") {\n      override def sayHello = \"Hi, I'm \" + name\n    }\n    greeting(p)\n  }\n\n  def greeting(p: Person {def sayHello: String}): Unit = {\n    println(p.sayHello)\n  }\n\n  class Person(protected val name: String) {\n\n    def sayHello = \"Hello, I'm \" + name\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHi, I'm leo\n*///:~\n\n```\n\n### AbstractClassDemo\n\n```scala\npackage basic\n\nobject AbstractClassDemo {\n\n  def main(args: Array[String]): Unit = {\n    val h = HelloImpl\n    h.sayHello(\"world\")\n  }\n\n  abstract class Hello(var message: String) {\n\n    def sayHello(name: String): Unit\n\n  }\n\n  object HelloImpl extends Hello(\"hello\") {\n\n    override def sayHello(name: String) = {\n      println(message + \", \" + name)\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nhello, world\n*///:~\n\n```\n\n### AbstractFieldDemo\n\n```scala\npackage basic\n\nobject AbstractFieldDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    println(s.name)\n  }\n\n  abstract class Person {\n\n    val name: String\n\n  }\n\n  class Student extends Person {\n\n    val name: String = \"leo\"\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nleo\n*///:~\n\n```\n\n## Pattern Match\n\n### PatternMatchDemo\n\n```scala\npackage basic\n\nobject PatternMatchDemo {\n\n  def main(args: Array[String]): Unit = {\n    val p: Person = new Student\n    p match {\n      case per: Person => println(\"it's Person's object\")\n      case _ => println(\"unknown type\")\n    }\n  }\n\n  class Person\n\n  class Student extends Person\n\n}\n```\n\n```\n/* Output:\nit's Person's object\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject PatternMatchDemoI {\n\n  def main(args: Array[String]): Unit = {\n    def judgeGrade(grade: String): Unit = {\n      grade match {\n        case \"A\" => println(\"Excellent\")\n        case \"B\" => println(\"Good\")\n        case \"C\" => println(\"Just so so\")\n        case _ => println(\"You need work harder\")\n      }\n    }\n    judgeGrade(\"A\")\n    judgeGrade(\"D\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nExcellent\nYou need work harder\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject PatternMatchDemoII {\n\n  def main(args: Array[String]): Unit = {\n    def judgeGrade(name: String, grade: String): Unit = {\n      grade match {\n        case \"A\" => println(name + \", you are excellent\")\n        case \"B\" => println(name + \", you are good\")\n        case \"C\" => println(name + \", your are just so so\")\n        case _ if name == \"leo\" => println(name + \", you are a good boy, come on\")\n        case _ => println(name + \", you need to work harder\")\n      }\n    }\n    judgeGrade(\"jack\", \"A\")\n    judgeGrade(\"leo\", \"D\")\n    judgeGrade(\"jen\", \"D\")\n  }\n\n}\n\n```\n\n```\n/* Output:\njack, you are excellent\nleo, you are a good boy, come on\njen, you need to work harder\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject PatternMatchDemoIII {\n\n  def main(args: Array[String]): Unit = {\n    import java.io._\n    def processException(e: Exception): Unit = {\n      e match {\n        case e1: IllegalArgumentException => println(\"you have illegal arguments! exception is: \" + e1)\n        case e2: FileNotFoundException => println(\"cannot find the file you need read or write! exceptiotn is: \" + e2)\n        case e3: IOException => println(\"you got an error while you were doing IO operation! exception is: \" + e3)\n        case _: Exception => println(\"cannot know which exception you have!\")\n      }\n    }\n    processException(new IllegalArgumentException(\"illegal argument!\"))\n    processException(new IOException(\"io exception!\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nyou have illegal arguments! exception is: java.lang.IllegalArgumentException: illegal argument!\nyou got an error while you were doing IO operation! exception is: java.io.IOException: io exception!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject PatternMatchDemoIV {\n\n  def main(args: Array[String]): Unit = {\n//    def greeting(arr: Array[String]): Unit = {\n//      arr match {\n//        case Array(\"Leo\") => println(\"Hi, Leo!\")\n//        case Array(girl1, girl2, girl3) => println(\"Hi, girls, nice to meet you. \" + girl1 + \" and \" + girl2 + \" and \" + girl3)\n//        case Array(\"Leo\", _*) => println(\"Hi, Leo, please introduce your friends to me.\")\n//        case _ => println(\"hey who are you?\")\n//      }\n//    }\n//    greeting(Array(\"Leo\"))\n//    greeting(Array(\"Jen\", \"Marry\", \"Penny\"))\n//    greeting(Array(\"Leo\", \"Jack\"))\n//    greeting(Array(\"Jack\"))\n\n    def greeting(list: List[String]): Unit = {\n      list match {\n        case \"Leo\" :: Nil => println(\"Hi, Leo!\")\n        case girl1 :: girl2 :: girl3 :: Nil => println(\"Hi, girls, nice to meet you. \" + girl1 + \" and \" + girl2 + \" and \" + girl3)\n        case \"Leo\" :: tail => println(\"Hi, Leo, please introduce your friends to me.\")\n        case _ => println(\"hey, who are you!\")\n      }\n    }\n    greeting(List(\"Leo\"))\n    greeting(List(\"Jen\", \"Marry\", \"Penny\"))\n    greeting(List(\"Leo\", \"Jack\"))\n    greeting(List(\"Jack\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nHi, Leo!\nHi, girls, nice to meet you. Jen and Marry and Penny\nHi, Leo, please introduce your friends to me.\nhey, who are you!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject PatternMatchDemoV {\n\n  def main(args: Array[String]): Unit = {\n    class Person\n    case class Teacher(name: String, subject: String) extends Person\n    case class Student(name: String, classroom: String) extends Person\n    def judgeIdentify(p: Person): Unit = {\n      p match {\n        case Teacher(name, subject) => println(\"Teacher, name is \" + name + \", subject is \" + subject)\n        case Student(name, classroom) => println(\"Student, name is \" + name + \", classroom is \" + classroom)\n        case _ => println(\"Illegal access, please go out of the school!\")\n      }\n    }\n    judgeIdentify(new Teacher(\"Leo\", \"mathematics\"))\n    judgeIdentify(new Student(\"Jack\", \"class\"))\n    judgeIdentify(new Person)\n  }\n\n}\n\n```\n\n```\n/* Output:\nTeacher, name is Leo, subject is mathematics\nStudent, name is Jack, classroom is class\nIllegal access, please go out of the school!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject PatternMatchDemoVI {\n\n  def main(args: Array[String]): Unit = {\n    val grades = Map(\"Leo\" -> \"A\", \"Jack\" -> \"B\", \"Jen\" -> \"C\")\n    def getGrade(name: String): Unit = {\n      val grade = grades.get(name)\n      grade match {\n        case Some(grade) => println(\"your grade is \" + grade)\n        case None => println(\"sorry, your grade information is not in the system\")\n      }\n    }\n    getGrade(\"Leo\")\n    getGrade(\"Marry\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nyour grade is A\nsorry, your grade information is not in the system\n*///:~\n\n```\n\n## Trait\n\n### TraitDemo\n\n```scala\npackage basic\n\nobject TraitDemoI {\n\n  def main(args: Array[String]): Unit = {\n    val p1 = new Person(\"leo\")\n    val p2 = new Person(\"jack\")\n    p1.sayHello(\"jack\")\n    p2.sayHello(\"leo\")\n    p1.makeFriends(p2)\n  }\n\n  trait HelloTrait {\n\n    def sayHello(name: String)\n\n  }\n\n  trait MakeFriendsTrait {\n\n    def makeFriends(p: Person)\n\n  }\n\n  class Person(val name: String) extends HelloTrait with MakeFriendsTrait {\n\n    def sayHello(otherName: String) = println(\"Hello, \" + otherName + \", I'm \" + name)\n\n    def makeFriends(p: Person) = println(\"Hello \" + p.name + \", I'm \" + name + \", I want to make friends with you.\")\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, jack, I'm leo\nHello, leo, I'm jack\nHello jack, I'm leo, I want to make friends with you.\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoII {\n\n  def main(args: Array[String]): Unit = {\n    val p1 = new Person(\"leo\")\n    val p2 = new Person(\"jack\")\n    p1.makeFriends(p2)\n  }\n\n  trait Logger {\n\n    def log(message: String) = println(message)\n\n  }\n\n  class Person(val name: String) extends Logger {\n\n    def makeFriends(p: Person): Unit = {\n      println(\"Hi, I'm \" + name + \", I'm glad to make friends with you, \" + p.name)\n      log(\"makeFriends method is invoked with parameter Person[name=\" + p.name + \"]\")\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHi, I'm leo, I'm glad to make friends with you, jack\nmakeFriends method is invoked with parameter Person[name=jack]\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoIII {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student(\"leo\")\n    s.sayHello\n  }\n\n  trait Person {\n\n    val eyeNum: Int = 2\n\n  }\n\n  class Student(val name: String) extends Person {\n\n    def sayHello = println(\"Hi, I'm \" + name + \", I have \" + eyeNum + \" eyes.\")\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHi, I'm leo, I have 2 eyes.\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoIV {\n\n  def main(args: Array[String]): Unit = {\n    val p1 = new Person(\"leo\")\n    val p2 = new Person(\"jack\")\n    p1.makeFriends(p2)\n  }\n\n  trait SayHello {\n\n    val msg: String\n\n    def sayHello(name: String) = println(msg + \", \" + name)\n\n  }\n\n  class Person(val name: String) extends SayHello {\n\n    val msg: String = \"hello\"\n\n    def makeFriends(p: Person): Unit = {\n      sayHello(p.name)\n      println(\"I'm \" + name + \", I want to make friends with you!\")\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nhello, jack\nI'm leo, I want to make friends with you!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoIX {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    println(s.getClass)\n  }\n\n  class Person { println(\"Person's constructor!\") }\n\n  trait Logger { println(\"Logger's constructor!\") }\n\n  trait MyLogger extends Logger { println(\"MyLogger's constructor!\") }\n\n  trait TimeLogger extends Logger { println(\"TimeLogger's constructor!\") }\n\n  class Student extends Person with MyLogger with TimeLogger {\n\n    println(\"Student's constructor!\")\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nPerson's constructor!\nLogger's constructor!\nMyLogger's constructor!\nTimeLogger's constructor!\nStudent's constructor!\nclass basic.TraitDemoIX$Student\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoIV {\n\n  def main(args: Array[String]): Unit = {\n    val p1 = new Person(\"leo\")\n    val p2 = new Person(\"jack\")\n    p1.makeFriends(p2)\n  }\n\n  trait SayHello {\n\n    val msg: String\n\n    def sayHello(name: String) = println(msg + \", \" + name)\n\n  }\n\n  class Person(val name: String) extends SayHello {\n\n    val msg: String = \"hello\"\n\n    def makeFriends(p: Person): Unit = {\n      sayHello(p.name)\n      println(\"I'm \" + name + \", I want to make friends with you!\")\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nhello, jack\nI'm leo, I want to make friends with you!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoIX {\n\n  def main(args: Array[String]): Unit = {\n    val s = new Student\n    println(s.getClass)\n  }\n\n  class Person { println(\"Person's constructor!\") }\n\n  trait Logger { println(\"Logger's constructor!\") }\n\n  trait MyLogger extends Logger { println(\"MyLogger's constructor!\") }\n\n  trait TimeLogger extends Logger { println(\"TimeLogger's constructor!\") }\n\n  class Student extends Person with MyLogger with TimeLogger {\n\n    println(\"Student's constructor!\")\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nPerson's constructor!\nLogger's constructor!\nMyLogger's constructor!\nTimeLogger's constructor!\nStudent's constructor!\nclass basic.TraitDemoIX$Student\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoV {\n\n  def main(args: Array[String]): Unit = {\n    val p1 = new Person(\"leo\")\n    p1.sayHello\n    val p2 = new Person(\"jack\") with MyLogger\n    p2.sayHello\n  }\n\n  trait Logged {\n\n    def log(msg: String) {}\n\n  }\n\n  trait MyLogger extends Logged {\n\n    override def log(msg: String) { println(\"log: \" + msg) }\n\n  }\n\n  class Person(val name: String) extends Logged {\n\n    def sayHello { println(\"Hi, I'm \" + name); log(\"sayHello is invoked!\") }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHi, I'm leo\nHi, I'm jack\nlog: sayHello is invoked!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoVI {\n\n  def main(args: Array[String]): Unit = {\n    val p = new Person(\"leo\")\n    p.sayHello\n  }\n\n  trait Handler {\n\n    def handle(data: String) {}\n\n  }\n\n  trait DataValidHandler extends Handler {\n\n    override def handle(data: String): Unit = {\n      println(\"check data: \" + data)\n      super.handle(data)\n    }\n\n  }\n\n  trait SignatureValidHandler extends Handler {\n\n    override def handle(data: String): Unit = {\n      println(\"check signature: \" + data)\n      super.handle(data)\n    }\n\n  }\n\n  class Person(val name: String) extends SignatureValidHandler with DataValidHandler {\n\n    def sayHello = { println(\"Hello, \" + name); handle(name) }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, leo\ncheck data: leo\ncheck signature: leo\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoVII {\n\n  def main(args: Array[String]): Unit = {\n    println(classOf[Logger])\n    println(classOf[MyLogger])\n  }\n\n  trait Logger {\n\n    def log(msg: String)\n\n  }\n\n  trait MyLogger extends Logger {\n\n    abstract override def log(msg: String) { super.log(msg) }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\ninterface basic.TraitDemoVII$Logger\ninterface basic.TraitDemoVII$MyLogger\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoVIII {\n\n  def main(args: Array[String]): Unit = {\n    val p1 = new Person(\"leo\")\n    val p2 = new Person(\"jack\")\n    println(p1.getClass)\n    println(p2.getClass)\n  }\n\n  trait Valid {\n\n    def getName: String\n\n    def valid: Boolean = {\n      getName == \"leo\"\n    }\n\n  }\n\n  class Person(val name: String) extends Valid {\n\n    println(valid)\n\n    def getName = name\n\n  }\n\n}\n\n```\n\n```\n/* Output:\ntrue\nfalse\nclass basic.TraitDemoVIII$Person\nclass basic.TraitDemoVIII$Person\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoX {\n\n  def main(args: Array[String]): Unit = {\n    class Person1\n    val p1 = new {\n      val msg: String = \"init\"\n    } with Person1 with SayHello\n    class Person2 extends {\n      val msg: String = \"init\"\n    } with SayHello\n    val p2 = new Person2\n    println(p1.getClass)\n    println(p2.getClass)\n  }\n\n  trait SayHello {\n\n    val msg: String\n    println(msg.toString)\n\n  }\n\n}\n\n```\n\n```\n/* Output:\ninit\ninit\nclass basic.TraitDemoX$$anon$1\nclass basic.TraitDemoX$Person2$1\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoXI {\n\n  def main(args: Array[String]): Unit = {\n    val p = new Person\n    println(p.getClass)\n  }\n\n  trait SayHello {\n\n    lazy val msg: String = null\n    println(msg.toString)\n\n  }\n\n  class Person extends SayHello {\n\n    override lazy val msg: String = \"init\"\n\n  }\n\n}\n\n```\n\n```\n/* Output:\ninit\nclass basic.TraitDemoXI$Person\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject TraitDemoXII {\n\n  def main(args: Array[String]): Unit = {\n    val p = new Person(\"leo\")\n    p.sayHello\n  }\n\n  class MyUtil {\n\n    def printMessage(msg: String) = println(msg)\n\n  }\n\n  trait Logger extends MyUtil {\n\n    def log(msg: String) = printMessage(\"log: \" + msg)\n\n  }\n\n  class Person(val name: String) extends Logger {\n\n    def sayHello: Unit = {\n      log(\"Hi, I'm \" + name)\n      printMessage(\"Hi, I'm \" + name)\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nlog: Hi, I'm leo\nHi, I'm leo\n*///:~\n\n```\n\n## Functional Program\n\n### FunctionalProgramDemo\n\n```scala\npackage basic\n\nobject FunctionalProgramDemo {\n\n  def main(args: Array[String]): Unit = {\n    val l1 = List(\"Leo\", \"Jen\", \"Peter\", \"Jack\").map(\"name is \" + _)\n    val l2 = List(\"Hello World\", \"You Me\").flatMap(_.split(\" \"))\n    val l3 = List(\"I\", \"have\", \"a\", \"beautiful\", \"house\")\n    val l4 =  List(\"Leo\", \"Jen\", \"Peter\", \"Jack\").zip(List(100, 90, 75, 83))\n    println(l1)\n    println(l2)\n    println(l3)\n    println(l4)\n  }\n\n}\n\n```\n\n```\n/* Output:\nList(name is Leo, name is Jen, name is Peter, name is Jack)\nList(Hello, World, You, Me)\nList(I, have, a, beautiful, house)\nList((Leo,100), (Jen,90), (Peter,75), (Jack,83))\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject FunctionalProgramDemoI {\n\n  def main(args: Array[String]): Unit = {\n    val line1 = scala.io.Source.fromFile(\"README.md\").mkString\n    val line2 = scala.io.Source.fromFile(\"README.md\").mkString\n    val lines = List(line1, line2)\n    val count = lines.flatMap(_.split(\"\\n\")).flatMap(_.split(\" \")).map((_, 1)).map(_._2).reduceLeft(_ + _)\n    println(count)\n  }\n\n}\n\n```\n\n```\n/* Output:\n16\n*///:~\n\n```\n\n### FunctionAssignDemo\n\n```scala\npackage basic\n\nobject FunctionAssignDemo {\n\n  def main(args: Array[String]): Unit = {\n    val sayHelloFunc = sayHello _\n    sayHelloFunc(\"leo\")\n  }\n\n  def sayHello(name: String) { println(\"Hello, \" + name) }\n\n}\n\n```\n\n```\n/* Output:\nHello, leo\n*///:~\n\n```\n\n### AnonymousFunctionDemo\n\n```scala\npackage basic\n\nobject AnonymousFunctionDemo {\n\n  def main(args: Array[String]): Unit = {\n    val sayHelloFunc = (name: String) => println(\"Hello, \" + name)\n    sayHelloFunc(\"Leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\n*///:~\n\n```\n\n### HigherOrderFunctionDemo\n\n```scala\npackage basic\n\nobject HigherOrderFunctionDemoI {\n\n  def main(args: Array[String]): Unit = {\n    val sayHelloFunc = (name: String) => println(\"Hello, \" + name)\n    def greeting(func: (String) => Unit, name: String) { func(name) }\n    greeting(sayHelloFunc, \"Leo\")\n\n    println(Array(1, 2, 3, 4, 5).map((num: Int) => num * num).mkString(\",\"))\n\n    def getGreetingFunc(msg: String) = (name: String) => println(msg + \", \" + name)\n    val greetingFunc = getGreetingFunc(\"hello\")\n    greetingFunc(\"leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\n1,4,9,16,25\nhello, leo\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject HigherOrderFunctionDemoII {\n\n  def main(args: Array[String]): Unit = {\n    def greeting(func: (String) => Unit, name: String) { func(name) }\n    greeting((name: String) => println(\"Hello, \" + name), \"Leo\")\n    greeting((name) => println(\"Hello, \" + name), \"Leo\")\n    greeting(name => println(\"Hello, \" + name), \"Leo\")\n\n    def triple(func: (Int) => Int) = { func(3) }\n    println(triple(3 * _))\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\nHello, Leo\nHello, Leo\n9\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject HigherOrderFunctionDemoIII {\n\n  def main(args: Array[String]): Unit = {\n    println(Array(1, 2, 3, 4, 5).map(2 * _).mkString(\",\"))\n    (1 to 9).map(\"*\" * _).foreach(println _)\n    println((1 to 20).filter(_ % 2 == 0).mkString(\",\"))\n    println((1 to 5).reduceLeft(_ * _))\n    println(Array(3, 2, 5, 4, 10, 1).sortWith(_ < _).mkString(\",\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\n2,4,6,8,10\n*\n**\n***\n****\n*****\n******\n*******\n********\n*********\n2,4,6,8,10,12,14,16,18,20\n120\n1,2,3,4,5,10\n*///:~\n\n```\n\n### ClosureDemo\n\n```scala\npackage basic\n\nobject ClosureDemo {\n\n  def main(args: Array[String]): Unit = {\n    def getGreetingFunc(msg: String) = (name: String) => println(msg + \", \" + name)\n    val greetingFuncHello = getGreetingFunc(\"hello\")\n    val greetingFuncHi = getGreetingFunc(\"hi\")\n    greetingFuncHello(\"leo\")\n    greetingFuncHi(\"leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nhello, leo\nhi, leo\n*///:~\n\n```\n\n### SAMConvertDemo\n\n```scala\npackage basic\n\nimport java.awt.event._\nimport javax.swing._\n\nobject SAMConvertDemo extends App {\n\n//  val f = new JFrame(\"Hello World\")\n//  val b = new JButton(\"Click Me\")\n//  b.setBounds(100, 100, 65, 30)\n//  b.addActionListener(new ActionListener {\n//    override def actionPerformed(event: ActionEvent): Unit = {\n//      println(\"Click Me\")\n//    }\n//  })\n//  f.add(b)\n//  f.setSize(300, 300)\n//  f.setVisible(true)\n\n  val f = new JFrame(\"Hello World\")\n  val b = new JButton(\"Click Me\")\n  b.setBounds(100, 100, 65, 30)\n  implicit def getActionListener(actionProcessFunc: (ActionEvent) => Unit) = new ActionListener {\n    override def actionPerformed(event: ActionEvent): Unit = {\n      actionProcessFunc(event)\n    }\n  }\n  b.addActionListener((event: ActionEvent) => println(\"Click Me\"))\n  f.add(b)\n  f.setSize(300, 300)\n  f.setVisible(true)\n\n}\n\n```\n\n```\n/* Output:\nClick Me\n*///:~\n\n```\n\n### CurryingDemo\n\n```scala\npackage basic\n\nobject CurryingDemo {\n\n  def main(args: Array[String]): Unit = {\n    def sum1(a: Int, b: Int) = a + b\n    println(sum1(1, 1))\n    def sum2(a: Int) = (b: Int) => a + b\n    println(sum2(1)(1))\n    def sum3(a: Int)(b: Int) = a + b\n    println(sum3(1)(1))\n  }\n\n}\n\n```\n\n```\n/* Output:\n2\n2\n2\n*///:~\n\n```\n\n### ReturnDemo\n\n```scala\npackage basic\n\nobject ReturnDemo {\n\n  def main(args: Array[String]): Unit = {\n    def greeting(name: String) = {\n      def sayHello(name: String): String = {\n        return \"Hello, \" + name\n      }\n      sayHello(name)\n    }\n    println(greeting(\"Leo\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, Leo\n*///:~\n\n```\n\n## Container\n\n### ListDemo\n\n```scala\npackage basic\n\nobject ListDemo {\n\n  def main(args: Array[String]): Unit = {\n    def decorator(l: List[Int], prefix: String): Unit = {\n      if (l != Nil) {\n        print(prefix + l.head + \" \")\n        decorator(l.tail, prefix)\n      }\n    }\n    val l = List(1, 2, 3, 4, 5)\n    decorator(l, \"#\")\n  }\n\n}\n\n```\n\n```\n/* Output:\n#1 #2 #3 #4 #5 \n*///:~\n\n```\n\n### LinkedListDemo\n\n```scala\npackage basic\n\nobject LinkedListDemo {\n\n  def main(args: Array[String]): Unit = {\n//    val l = scala.collection.mutable.LinkedList(1, 2, 3, 4, 5)\n//    var current = l\n//    while (current != Nil) {\n//      current.elem = current.elem * 2\n//      current = current.next\n//    }\n//    println(l.mkString(\",\"))\n\n    val l = scala.collection.mutable.LinkedList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    var current = l\n    var first = true\n    while (current != Nil && current.next != Nil) {\n      if (first) { current.elem = current.elem * 2; first = false }\n      current = current.next.next\n      if (current != Nil) current.elem = current.elem * 2\n    }\n    println(l.mkString(\",\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\n2,2,6,4,10,6,14,8,18,10\n*///:~\n\n```\n\n### SetDemo\n\n```scala\npackage basic\n\nobject SetDemo {\n\n  def main(args: Array[String]): Unit = {\n    val s1 = new scala.collection.mutable.HashSet[Int]()\n    s1 += 1; s1 += 2; s1 += 5\n    val s2 = new scala.collection.mutable.LinkedHashSet[Int]()\n    s2 += 1; s2 += 2; s2 += 5\n    val s3 = scala.collection.mutable.SortedSet[String](\"banana\", \"apple\", \"candy\")\n    println(s1)\n    println(s2)\n    println(s3)\n  }\n\n}\n\n```\n\n```\n/* Output:\nSet(1, 5, 2)\nSet(1, 2, 5)\nTreeSet(apple, banana, candy)\n*///:~\n\n```\n\n## Generic\n\n### GenericDemo\n\n```scala\npackage basic\n\nobject GenericDemo {\n\n  def main(args: Array[String]): Unit = {\n    class Student[T](val localId: T) {\n      def getSchoolId(hukouId: T) = \"S-\" + hukouId + \"-\" + localId\n    }\n    val leo = new Student[Int](111)\n    println(leo.getSchoolId(100))\n\n    def getCard[T](content: T) = {\n      if (content.isInstanceOf[Int]) \"card: 001, \" + content\n      else if (content.isInstanceOf[String]) \"card: this is your card, \" + content\n      else \"card: \" + content\n    }\n    println(getCard[String](\"hello world\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nS-100-111\ncard: this is your card, hello world\n*///:~\n\n```\n\n### BoundsDemo\n\n```scala\npackage basic\n\nobject BoundsDemoI {\n\n  def main(args: Array[String]): Unit = {\n    class Person(val name: String) {\n      def sayHello = println(\"Hello, I'm \" + name)\n      def makeFriends(p: Person): Unit = {\n        sayHello\n        p.sayHello\n      }\n    }\n    class Student(name: String) extends Person(name)\n    class Party[T <: Person](p1: T, p2: T) {\n      def play = p1.makeFriends(p2)\n    }\n    val s1 = new Student(\"leo\")\n    val s2 = new Student(\"jack\")\n    val p = new Party[Student](s1, s2)\n    p.play\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, I'm leo\nHello, I'm jack\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BoundsDemoII {\n\n  def main(args: Array[String]): Unit = {\n    class Father(val name: String)\n    class Child(name: String) extends Father(name)\n    def getIDCard[R >: Child](person: R): Unit = {\n      if (person.getClass == classOf[Child]) println(\"please tell us your parents' names.\")\n      else if (person.getClass == classOf[Father]) println(\"sign your name for your child's id card.\")\n      else println(\"sorry, you are not allowed to get id card.\")\n    }\n    getIDCard[Child](new Child(\"leo\"))\n    getIDCard[Father](new Father(\"jack\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nplease tell us your parents' names.\nsign your name for your child's id card.\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BoundsDemoIII {\n\n  def main(args: Array[String]): Unit = {\n    class Person(val name: String) {\n      def sayHello = println(\"Hello, I'm \" + name)\n      def makeFriends(p: Person): Unit = {\n        sayHello\n        p.sayHello\n      }\n    }\n    class Student(name: String) extends Person(name)\n    class Dog(val name: String) { def sayHello = println(\"Wang Wang, I'm \" + name) }\n    implicit def dog2person(dog: Object): Person = if (dog.isInstanceOf[Dog]) { val _dog = dog.asInstanceOf[Dog]; new Person(_dog.name ) } else null\n    class Party[T <% Person](p1: T, p2: T) {\n      def play = p1.makeFriends(p2)\n    }\n    val s = new Student(\"leo\")\n    val d = new Dog(\"jack\")\n    val p = new Party[Person](s, d)\n    p.play\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, I'm leo\nHello, I'm jack\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BoundsDemoIV {\n\n  def main(args: Array[String]): Unit = {\n    class Calculator[T: Ordering](val number1: T, val number2: T) {\n      def max(implicit order: Ordering[T]) = if (order.compare(number1, number2) > 0) number1 else number2\n    }\n    val c = new Calculator[Int](1, 2)\n    println(c.max)\n  }\n\n}\n\n```\n\n```\n/* Output:\n2\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject BoundsDemoV {\n\n  def main(args: Array[String]): Unit = {\n    class Meat(val name: String)\n    class Vegetable(val name: String)\n    def packageFood[T: Manifest](food: T*) = {\n      val foodPackage = new Array[T](food.length)\n      for (i <- 0 until food.length) foodPackage(i) = food(i)\n      foodPackage\n    }\n    val gongbaojiding = new Meat(\"gongbaojiding\")\n    val yuxiangrousi = new Meat(\"yuxiangrousi\")\n    val shousiyangpai = new Meat(\"shousiyangpai\")\n    val meatPackage = packageFood(gongbaojiding, yuxiangrousi, shousiyangpai)\n    val qingcai = new Vegetable(\"qingcai\")\n    val baicai = new Vegetable(\"baicai\")\n    val huanggua = new Vegetable(\"huanggua\")\n    val vegetablePackage = packageFood(qingcai, baicai, huanggua)\n    println(meatPackage)\n    println(vegetablePackage)\n  }\n\n}\n\n```\n\n```\n/* Output:\n[Lbasic.BoundsDemoV$Meat$1;@e580929\n[Lbasic.BoundsDemoV$Vegetable$1;@1cd072a9\n*///:~\n\n```\n\n### ContravariantDemo\n\n```scala\npackage basic\n\nobject ContravariantDemo {\n\n  def main(args: Array[String]): Unit = {\n    class Master\n    class Professional extends Master\n    class Card[-T](val name: String)\n    def enterMeet(card: Card[Professional]): Unit = {\n      println(\"welcom to have this meeting!\")\n    }\n    enterMeet(new Card[Professional](\"leo\"))\n    enterMeet(new Card[Master](\"jack\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nwelcom to have this meeting!\nwelcom to have this meeting!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject CovariantDemo {\n\n  def main(args: Array[String]): Unit = {\n    class Master\n    class Professional extends Master\n    class Card[+T](val name: String)\n    def enterMeet(card: Card[Master]): Unit = {\n      println(\"welcom to have this meeting!\")\n    }\n    enterMeet(new Card[Master](\"leo\"))\n    enterMeet(new Card[Professional](\"jack\"))\n  }\n\n}\n\n```\n\n```\n/* Output:\nwelcom to have this meeting!\nwelcom to have this meeting!\n*///:~\n\n```\n\n## Implicit Conversion\n\n### ImplicitConversionDemo\n\n```scala\npackage basic\n\nobject ImplicitConversionDemoI {\n\n  def main(args: Array[String]): Unit = {\n    class SpecialPerson(val name: String)\n    class Student(val name: String)\n    class Older(val name: String)\n    class Teacher(val name: String)\n    implicit def object2SpecialPerson(obj: Object): SpecialPerson = {\n      if (obj.getClass == classOf[Student]) { val stu = obj.asInstanceOf[Student]; new SpecialPerson(stu.name) }\n      else if (obj.getClass == classOf[Older]) { val older = obj.asInstanceOf[Older]; new SpecialPerson(older.name) }\n      else null\n    }\n    var ticketNumber = 0\n    def buySpecialTicket(p: SpecialPerson) = {\n      ticketNumber += 1\n      \"T-\" + ticketNumber\n    }\n    val s = new Student(\"leo\")\n    println(buySpecialTicket(s))\n    val o = new Older(\"jack\")\n    println(buySpecialTicket(o))\n    val t = new Teacher(\"tom\")\n    println(buySpecialTicket(t))\n  }\n\n}\n\n```\n\n```\n/* Output:\nT-1\nT-2\nT-3\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject ImplicitConversionDemoII {\n\n  def main(args: Array[String]): Unit = {\n    class Man(val name: String)\n    class Superman(val name: String) {\n      def emitLaser = println(\"emit a laster!\")\n    }\n    implicit def man2supername(man: Man): Superman = new Superman(man.name)\n    val leo = new Man(\"leo\")\n    leo.emitLaser\n  }\n\n}\n\n```\n\n```\n/* Output:\nemit a laster!\n*///:~\n\n```\n\n```scala\npackage basic\n\nobject ImplicitConversionDemoIII {\n\n  def main(args: Array[String]): Unit = {\n    class SpecialPerson(val name: String)\n    class Student(val name: String)\n    class Older(val name: String)\n    class Teacher(val name: String)\n    implicit def object2SpecialPerson(obj: Object): SpecialPerson = {\n      if (obj.getClass == classOf[Student]) { val stu = obj.asInstanceOf[Student]; new SpecialPerson(stu.name) }\n      else if (obj.getClass == classOf[Older]) { val older = obj.asInstanceOf[Older]; new SpecialPerson(older.name) }\n      else null\n    }\n    class TicketHouse {\n      var ticketNumber = 0\n      def buySpecialTicket(p: SpecialPerson) = {\n        ticketNumber += 1\n        \"T-\" + ticketNumber\n      }\n    }\n    val th = new TicketHouse\n    val s = new Student(\"leo\")\n    println(th.buySpecialTicket(s))\n    val o = new Older(\"jack\")\n    println(th.buySpecialTicket(o))\n    val t = new Teacher(\"tom\")\n    println(th.buySpecialTicket(t))\n  }\n\n}\n\n```\n\n```\n/* Output:\nT-1\nT-2\nT-3\n*///:~\n\n```\n\n### ImplicitParameterDemo\n\n```scala\npackage basic\n\nobject ImplicitParameterDemo {\n\n  def main(args: Array[String]): Unit = {\n    class SignPen {\n      def write(content: String) = println(content)\n    }\n    implicit val signPen = new SignPen\n    def signForExam(name: String)(implicit signPen: SignPen): Unit = {\n      signPen.write(name + \" come to exam in time.\")\n    }\n    signForExam(\"leo\")\n  }\n\n}\n\n```\n\n```\n/* Output:\nleo come to exam in time.\n*///:~\n\n```\n\n## Actor\n\n### ActorDemo\n\n```scala\npackage basic\n\nimport scala.actors.Actor\n\nobject ActorDemoI {\n\n  def main(args: Array[String]): Unit = {\n    val helloActor = new HelloActor\n    helloActor.start()\n    helloActor ! \"leo\"\n  }\n\n  class HelloActor extends Actor {\n\n    def act() {\n      while (true) {\n        receive {\n          case name: String => println(\"Hello, \" + name)\n        }\n      }\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nHello, leo\n*///:~\n\n```\n\n```scala\npackage basic\n\nimport scala.actors.Actor\n\nobject ActorDemoII {\n\n  def main(args: Array[String]): Unit = {\n    val userManageActor = new UserManageActor\n    userManageActor.start()\n    userManageActor ! Login(\"leo\", \"1234\")\n    userManageActor ! Register(\"leo\", \"1234\")\n  }\n\n  case class Login(username: String, password: String)\n\n  case class Register(username: String, password: String)\n\n  class UserManageActor extends Actor {\n\n    def act() {\n      while (true) {\n        receive {\n          case Login(username, password) => println(\"login, username is \" + username + \", password is \" + password)\n          case Register(username, password) => println(\"register, username is \" + username + \", password is \" + password)\n        }\n      }\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nlogin, username is leo, password is 1234\nregister, username is leo, password is 1234\n*///:~\n\n```\n\n```scala\npackage basic\n\nimport scala.actors.Actor\n\nobject ActorDemoIII {\n\n  def main(args: Array[String]): Unit = {\n    val leoTelephoneActor = new LeoTelephoneActor\n    leoTelephoneActor.start()\n    val jackTelephoneActor = new JackTelephoneActor(leoTelephoneActor)\n    jackTelephoneActor.start()\n  }\n\n  case class Message(content: String, sender: Actor)\n\n  class LeoTelephoneActor extends Actor {\n\n    def act() {\n      while (true) {\n        receive {\n          case Message(content, sender) => { println(\"leo telephone: \" + content); sender ! \"I'm leo, please call me after 10 minutes.\" }\n        }\n      }\n    }\n\n  }\n\n  class JackTelephoneActor(val leoTelephoneActor: Actor) extends Actor {\n\n    def act() {\n      leoTelephoneActor ! Message(\"Hello, Leo, I'm Jack\", this)\n      receive {\n        case response: String => println(\"jack telephone: \" + response)\n      }\n    }\n\n  }\n\n}\n\n```\n\n```\n/* Output:\nleo telephone: Hello, Leo, I'm Jack\njack telephone: I'm leo, please call me after 10 minutes.\n*///:~\n\n```","slug":"Scala快速入门","published":1,"updated":"2023-09-12T10:24:15.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln2n3nw1000cyuzqao9h2fd7","content":"<p>Scala快速入门</p>\n<h2 id=\"Scala官网\"><a href=\"#Scala官网\" class=\"headerlink\" title=\"Scala官网\"></a>Scala官网</h2><ul>\n<li><a href=\"https://www.scala-lang.org/\">Scala官网</a></li>\n<li><a href=\"https://docs.scala-lang.org/getting-started-intellij-track/getting-started-with-scala-in-intellij.html\">Scala安装指南</a></li>\n<li><a href=\"https://docs.scala-lang.org/tour/tour-of-scala.html\">Scala入门指南</a></li>\n</ul>\n<h2 id=\"Scala基础\"><a href=\"#Scala基础\" class=\"headerlink\" title=\"Scala基础\"></a>Scala基础</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"number\">1</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">    println((<span class=\"number\">1</span> + <span class=\"number\">1</span>) * <span class=\"number\">2.0</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;hello&quot;</span>.toCharArray)</span><br><span class=\"line\">    println(((<span class=\"number\">1</span> + <span class=\"number\">1</span>) * <span class=\"number\">2.0</span>).toString)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;hello&quot;</span>.toUpperCase)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;HELLO&quot;</span>.toLowerCase)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">2</span><br><span class=\"line\">4.0</span><br><span class=\"line\">[C@11531931</span><br><span class=\"line\">4.0</span><br><span class=\"line\">HELLO</span><br><span class=\"line\">hello</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> r = <span class=\"number\">1</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    println(<span class=\"number\">2</span> * r)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>; a = <span class=\"number\">2</span></span><br><span class=\"line\">    println(a)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> n: <span class=\"type\">String</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> m: <span class=\"type\">Any</span> = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> n1, n2: <span class=\"type\">String</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> m1, m2 = <span class=\"number\">100</span></span><br><span class=\"line\">    println(n)</span><br><span class=\"line\">    println(m)</span><br><span class=\"line\">    println(n1)</span><br><span class=\"line\">    println(n2)</span><br><span class=\"line\">    println(m1)</span><br><span class=\"line\">    println(m2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">4</span><br><span class=\"line\">2</span><br><span class=\"line\">null</span><br><span class=\"line\">leo</span><br><span class=\"line\">null</span><br><span class=\"line\">null</span><br><span class=\"line\">100</span><br><span class=\"line\">100</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"number\">1.</span>toString)</span><br><span class=\"line\">    println(<span class=\"number\">1.</span>to(<span class=\"number\">10</span>))</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello&quot;</span>.intersect(<span class=\"string\">&quot;World&quot;</span>))</span><br><span class=\"line\">    println(<span class=\"number\">1</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">    println(<span class=\"number\">1.</span>+(<span class=\"number\">1</span>))</span><br><span class=\"line\">    println(<span class=\"number\">1</span> to <span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> counter = <span class=\"number\">1</span>; counter += <span class=\"number\">1</span></span><br><span class=\"line\">    println(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">1</span><br><span class=\"line\">Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class=\"line\">lo</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class=\"line\">2</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.math._</span><br><span class=\"line\">    println(sqrt(<span class=\"number\">2</span>))</span><br><span class=\"line\">    println(pow(<span class=\"number\">2</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">    println(min(<span class=\"number\">3</span>, <span class=\"type\">Pi</span>))</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello World&quot;</span>.distinct)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello World&quot;</span>(<span class=\"number\">6</span>))</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello World&quot;</span>.apply(<span class=\"number\">6</span>))</span><br><span class=\"line\">    println(<span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">    println(<span class=\"type\">Array</span>.apply(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">1.4142135623730951</span><br><span class=\"line\">16.0</span><br><span class=\"line\">3.0</span><br><span class=\"line\">Helo Wrd</span><br><span class=\"line\">W</span><br><span class=\"line\">W</span><br><span class=\"line\">[I@6442b0a6</span><br><span class=\"line\">[I@60f82f98</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"number\">30</span></span><br><span class=\"line\">    println(<span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> isAdult1 = <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">    println(isAdult1)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isAdult2 = <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) isAdult2 = <span class=\"number\">1</span> <span class=\"keyword\">else</span> isAdult2 = <span class=\"number\">0</span></span><br><span class=\"line\">    println(isAdult2)</span><br><span class=\"line\">    println(<span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) <span class=\"string\">&quot;adult&quot;</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    age = <span class=\"number\">12</span></span><br><span class=\"line\">    println(<span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) <span class=\"string\">&quot;adult&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) <span class=\"string\">&quot;adult&quot;</span> <span class=\"keyword\">else</span> ())</span><br><span class=\"line\">    println(<span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) <span class=\"string\">&quot;adult&quot;</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">12</span>) <span class=\"string\">&quot;teenager&quot;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;children&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">adult</span><br><span class=\"line\">()</span><br><span class=\"line\">()</span><br><span class=\"line\">children</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x, y, z = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">10</span>) &#123; y = y + <span class=\"number\">1</span>; z = z + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    println(x, y, z)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      y = y + <span class=\"number\">1</span></span><br><span class=\"line\">      z = z + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(x, y, z)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> w = <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">10</span>) &#123; y = y + <span class=\"number\">1</span>; z + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    println(x, y, z, w)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">(0,1,1)</span><br><span class=\"line\">(0,2,2)</span><br><span class=\"line\">(0,3,2,3)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    print(<span class=\"string\">&quot;Hello World&quot;</span>); println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;Hi, my name is %s, I&#x27;m %d years old.\\n&quot;</span>, <span class=\"string\">&quot;Leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello WorldHello World</span><br><span class=\"line\">Hi, my name is Leo, I&#x27;m 30 years old.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.io.<span class=\"type\">StdIn</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> name = <span class=\"type\">StdIn</span>.readLine(<span class=\"string\">&quot;Welcome to Game House. Please tell me your name: &quot;</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;Thanks. Then please tell me your age: &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> age = <span class=\"type\">StdIn</span>.readInt()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">      printf(<span class=\"string\">&quot;Hi, %s, you are %d years old, so you are legal to come here!&quot;</span>, name, age)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      printf(<span class=\"string\">&quot;Sorry, boy, %s, you are only %d years old. you are illegal to come here!&quot;</span>, name, age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Welcome to Game House. Please tell me your name: leo</span><br><span class=\"line\">Thanks. Then please tell me your age: 20</span><br><span class=\"line\">Hi, leo, you are 20 years old, so you are legal to come here!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"number\">1</span> + <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"number\">1.</span>toString + <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      print(n + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">      n -= <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    n = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to n) print(i + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> until n) print(i + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.util.control.<span class=\"type\">Breaks</span>._</span><br><span class=\"line\">    breakable &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> n = <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (c &lt;- <span class=\"string\">&quot;Hello World&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">5</span>) <span class=\"keyword\">break</span></span><br><span class=\"line\">        print(c)</span><br><span class=\"line\">        n -= <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">10 9 8 7 6 5 4 3 2 1 </span><br><span class=\"line\">1 2 3 4 5 </span><br><span class=\"line\">1 2 3 4 </span><br><span class=\"line\">Hello</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">9</span>; j &lt;- <span class=\"number\">1</span> to i) &#123;</span><br><span class=\"line\">      print(j + <span class=\"string\">&quot; * &quot;</span> + i + <span class=\"string\">&quot; = &quot;</span> + i * j + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i == j) println()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">1 * 1 = 1 </span><br><span class=\"line\">1 * 2 = 2 2 * 2 = 4 </span><br><span class=\"line\">1 * 3 = 3 2 * 3 = 6 3 * 3 = 9 </span><br><span class=\"line\">1 * 4 = 4 2 * 4 = 8 3 * 4 = 12 4 * 4 = 16 </span><br><span class=\"line\">1 * 5 = 5 2 * 5 = 10 3 * 5 = 15 4 * 5 = 20 5 * 5 = 25 </span><br><span class=\"line\">1 * 6 = 6 2 * 6 = 12 3 * 6 = 18 4 * 6 = 24 5 * 6 = 30 6 * 6 = 36 </span><br><span class=\"line\">1 * 7 = 7 2 * 7 = 14 3 * 7 = 21 4 * 7 = 28 5 * 7 = 35 6 * 7 = 42 7 * 7 = 49 </span><br><span class=\"line\">1 * 8 = 8 2 * 8 = 16 3 * 8 = 24 4 * 8 = 32 5 * 8 = 40 6 * 8 = 48 7 * 8 = 56 8 * 8 = 64 </span><br><span class=\"line\">1 * 9 = 9 2 * 9 = 18 3 * 9 = 27 4 * 9 = 36 5 * 9 = 45 6 * 9 = 54 7 * 9 = 63 8 * 9 = 72 9 * 9 = 81 </span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span> <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) print(i + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">val</span> v = <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span>) <span class=\"keyword\">yield</span> i</span><br><span class=\"line\">    println(v)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- v) &#123;</span><br><span class=\"line\">      print(i + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">2 4 6 8 10 Vector(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class=\"line\">1 2 3 4 5 6 7 8 9 10 </span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Scala函数\"><a href=\"#Scala函数\" class=\"headerlink\" title=\"Scala函数\"></a>Scala函数</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span>) = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) &#123; printf(<span class=\"string\">&quot;Hi %s, you are a big boy\\n&quot;</span>, name); age &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123; printf(<span class=\"string\">&quot;Hi %s, you are a little boy\\n&quot;</span>, name); age &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sayHello(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hi leo, you are a big boy</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>) = println(<span class=\"string\">&quot;Hello, &quot;</span> + name)</span><br><span class=\"line\">    sayHello(<span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span></span>(n: <span class=\"type\">Int</span>) = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to n) sum += i</span><br><span class=\"line\">      sum</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(sum(<span class=\"number\">100</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">5050</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span></span>(n: <span class=\"type\">Int</span>): <span class=\"type\">Int</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> fab(n - <span class=\"number\">1</span>) + fab(n - <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(fab(<span class=\"number\">5</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">8</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(firstName: <span class=\"type\">String</span>, middleName: <span class=\"type\">String</span> = <span class=\"string\">&quot;William&quot;</span>, lastName: <span class=\"type\">String</span> = <span class=\"string\">&quot;Croft&quot;</span>) = firstName + <span class=\"string\">&quot; &quot;</span> + middleName + <span class=\"string\">&quot; &quot;</span> + lastName</span><br><span class=\"line\">    println(sayHello(<span class=\"string\">&quot;Leo&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Leo William Croft</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(firstName: <span class=\"type\">String</span>, middleName: <span class=\"type\">String</span>, lastName: <span class=\"type\">String</span>) = firstName + <span class=\"string\">&quot; &quot;</span> + middleName + <span class=\"string\">&quot; &quot;</span> + lastName</span><br><span class=\"line\">    println(sayHello(firstName = <span class=\"string\">&quot;Mick&quot;</span>, lastName = <span class=\"string\">&quot;Nina&quot;</span>, middleName = <span class=\"string\">&quot;Jack&quot;</span>))</span><br><span class=\"line\">    println(sayHello(<span class=\"string\">&quot;Mick&quot;</span>, middleName = <span class=\"string\">&quot;Jack&quot;</span>, lastName = <span class=\"string\">&quot;Nina&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Mick Jack Nina</span><br><span class=\"line\">Mick Jack Nina</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span> = <span class=\"number\">20</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;Hello, &quot;</span> + name + <span class=\"string\">&quot;, your age is &quot;</span> + age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sayHello(<span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo, your age is 20</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span></span>(nums: <span class=\"type\">Int</span>*) = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (num &lt;- nums) res += num</span><br><span class=\"line\">      res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">15</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span></span>(nums: <span class=\"type\">Int</span>*): <span class=\"type\">Int</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span>) <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> nums.head + sum(nums.tail: _*)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(sum(<span class=\"number\">1</span> to <span class=\"number\">5</span>: _*))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">15</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello1</span></span>(name: <span class=\"type\">String</span>) = <span class=\"string\">&quot;Hello, &quot;</span> + name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello2</span></span>(name: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      print(<span class=\"string\">&quot;Hello, &quot;</span> + name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(sayHello1(<span class=\"string\">&quot;Leo&quot;</span>))</span><br><span class=\"line\">    sayHello2(<span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.io.<span class=\"type\">Source</span>._</span><br><span class=\"line\">    <span class=\"comment\">// 即使文件不存在，也不会报错，只有第一个使用变量时会报错，证明了表达式计算的lazy特性。</span></span><br><span class=\"line\">    <span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> lines = fromFile(<span class=\"string\">&quot;spark.txt&quot;</span>).mkString</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\"></span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> java.io._</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">IllegalArgumentException</span>(<span class=\"string\">&quot;x should not be negative&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> _: <span class=\"type\">IllegalArgumentException</span> =&gt; println(<span class=\"string\">&quot;Illegal Argument!&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;Release Resources!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">IOException</span>(<span class=\"string\">&quot;User Defined Exception&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> e1: <span class=\"type\">IllegalArgumentException</span> =&gt; println(<span class=\"string\">&quot;Illegal Argument!&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> e2: <span class=\"type\">IOException</span> =&gt; println(<span class=\"string\">&quot;IO Exception!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Illegal Argument!</span><br><span class=\"line\">Release Resources!</span><br><span class=\"line\">IO Exception!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array、ArrayBuffer\"><a href=\"#Array、ArrayBuffer\" class=\"headerlink\" title=\"Array、ArrayBuffer\"></a>Array、ArrayBuffer</h2><h3 id=\"ArrayDemo\"><a href=\"#ArrayDemo\" class=\"headerlink\" title=\"ArrayDemo\"></a>ArrayDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ArrayDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> a = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">Int</span>](<span class=\"number\">10</span>)</span><br><span class=\"line\">    println(a(<span class=\"number\">0</span>))</span><br><span class=\"line\">    a(<span class=\"number\">0</span>) = <span class=\"number\">1</span></span><br><span class=\"line\">    println(a)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> b = <span class=\"type\">Array</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">    b(<span class=\"number\">0</span>) = <span class=\"string\">&quot;hi&quot;</span></span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> c = <span class=\"type\">Array</span>(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">    println(c)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> d = <span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until d.length) &#123;</span><br><span class=\"line\">      print(d(i) + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until (d.length, <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">      print(d(i) + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- (<span class=\"number\">0</span> until d.length).reverse) &#123;</span><br><span class=\"line\">      print(d(i) + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- d) &#123;</span><br><span class=\"line\">      print(i + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> e = <span class=\"type\">Array</span>(<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = e.sum</span><br><span class=\"line\">    <span class=\"keyword\">val</span> m = e.max</span><br><span class=\"line\">    println(<span class=\"string\">&quot;sum -&gt; &quot;</span> + s)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;max -&gt; &quot;</span> + m)</span><br><span class=\"line\">    scala.util.<span class=\"type\">Sorting</span>.quickSort(e)</span><br><span class=\"line\">    println(e.mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    println(e.mkString(<span class=\"string\">&quot;&lt;&quot;</span>, <span class=\"string\">&quot;,&quot;</span>, <span class=\"string\">&quot;&gt;&quot;</span>))</span><br><span class=\"line\">    println(e.toString)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">0</span><br><span class=\"line\">[I@11531931</span><br><span class=\"line\">[Ljava.lang.String;@5e025e70</span><br><span class=\"line\">[Ljava.lang.Object;@48140564</span><br><span class=\"line\">1 2 3 4 5 </span><br><span class=\"line\">1 3 5 </span><br><span class=\"line\">5 4 3 2 1 </span><br><span class=\"line\">1 2 3 4 5 </span><br><span class=\"line\">sum -&gt; 15</span><br><span class=\"line\">max -&gt; 5</span><br><span class=\"line\">1,2,3,4,5</span><br><span class=\"line\">&lt;1,2,3,4,5&gt;</span><br><span class=\"line\">[I@6b2fad11</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ArrayBufferDemo\"><a href=\"#ArrayBufferDemo\" class=\"headerlink\" title=\"ArrayBufferDemo\"></a>ArrayBufferDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ArrayBufferDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> b = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">    b += <span class=\"number\">1</span></span><br><span class=\"line\">    b += (<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    b ++= <span class=\"type\">Array</span>(<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    b.trimEnd(<span class=\"number\">5</span>)</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    b.insert(<span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    b.insert(<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    b.remove(<span class=\"number\">1</span>)</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    b.remove(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> a = b.toArray</span><br><span class=\"line\">    println(a)</span><br><span class=\"line\">    println(a.toBuffer)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class=\"line\">ArrayBuffer(1, 2, 3, 4, 5)</span><br><span class=\"line\">ArrayBuffer(1, 2, 3, 4, 5, 6)</span><br><span class=\"line\">ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class=\"line\">ArrayBuffer(1, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class=\"line\">ArrayBuffer(1, 6, 7, 8, 9, 10)</span><br><span class=\"line\">[I@380fb434</span><br><span class=\"line\">ArrayBuffer(1, 6, 7, 8, 9, 10)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ArrayBufferDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> a = <span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> b = <span class=\"keyword\">for</span> (e &lt;- a) <span class=\"keyword\">yield</span> e * e</span><br><span class=\"line\">    println(b.mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> c = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">    c += (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> d = <span class=\"keyword\">for</span> (e &lt;- c) <span class=\"keyword\">yield</span> e * e</span><br><span class=\"line\">    println(d.mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> e = <span class=\"keyword\">for</span> (e &lt;- c <span class=\"keyword\">if</span> e %<span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">yield</span> e * e</span><br><span class=\"line\">    println(a.filter(_ % <span class=\"number\">2</span> == <span class=\"number\">0</span>).map(<span class=\"number\">2</span> * _).mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    println(a.filter &#123; _ % <span class=\"number\">2</span> == <span class=\"number\">0</span> &#125; map &#123; <span class=\"number\">2</span> * _ &#125; mkString &#123; <span class=\"string\">&quot;,&quot;</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">1,4,9,16,25</span><br><span class=\"line\">1,4,9,16,25</span><br><span class=\"line\">4,8</span><br><span class=\"line\">4,8</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ArrayBufferDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> a = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">     a += (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">-1</span>, <span class=\"number\">-3</span>, <span class=\"number\">-5</span>, <span class=\"number\">-9</span>)</span><br><span class=\"line\">     <span class=\"keyword\">var</span> foundFirstNegative = <span class=\"literal\">false</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> arrayLength = a.length</span><br><span class=\"line\">     <span class=\"keyword\">var</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">     <span class=\"keyword\">while</span> (index &lt; arrayLength) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (a(index) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         index += <span class=\"number\">1</span></span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!foundFirstNegative) &#123; foundFirstNegative = <span class=\"literal\">true</span>; index += <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span> &#123; a.remove(index); arrayLength -= <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     println(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">ArrayBuffer(1, 2, 3, 4, 5, -1)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ArrayBufferDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> a = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">    a += (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">-1</span>, <span class=\"number\">-3</span>, <span class=\"number\">-5</span>, <span class=\"number\">-9</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foundFirstNegative = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> keepIndexes = <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until a.length <span class=\"keyword\">if</span> !foundFirstNegative || a(i) &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">yield</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a(i) &lt; <span class=\"number\">0</span>) foundFirstNegative = <span class=\"literal\">true</span></span><br><span class=\"line\">      i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until keepIndexes.length) &#123; a(i) = a(keepIndexes(i)) &#125;</span><br><span class=\"line\">    a.trimEnd(a.length - keepIndexes.length)</span><br><span class=\"line\">    println(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">ArrayBuffer(1, 2, 3, 4, 5, -1)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Map、Tuple\"><a href=\"#Map、Tuple\" class=\"headerlink\" title=\"Map、Tuple\"></a>Map、Tuple</h2><h3 id=\"MapDemo\"><a href=\"#MapDemo\" class=\"headerlink\" title=\"MapDemo\"></a>MapDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">MapDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages1 = <span class=\"type\">Map</span>(<span class=\"string\">&quot;Leo&quot;</span> -&gt; <span class=\"number\">30</span>, <span class=\"string\">&quot;Jen&quot;</span> -&gt; <span class=\"number\">25</span>, <span class=\"string\">&quot;Jack&quot;</span> -&gt; <span class=\"number\">23</span>)</span><br><span class=\"line\">    <span class=\"comment\">//ages1(&quot;Leo&quot;) = 31</span></span><br><span class=\"line\">    println(ages1)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages2 = scala.collection.mutable.<span class=\"type\">Map</span>(<span class=\"string\">&quot;Leo&quot;</span> -&gt; <span class=\"number\">30</span>, <span class=\"string\">&quot;Jen&quot;</span> -&gt; <span class=\"number\">25</span>, <span class=\"string\">&quot;Jack&quot;</span> -&gt; <span class=\"number\">23</span>)</span><br><span class=\"line\">    ages2(<span class=\"string\">&quot;Leo&quot;</span>) = <span class=\"number\">31</span></span><br><span class=\"line\">    println(ages2)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages3 = <span class=\"type\">Map</span>((<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"number\">30</span>), (<span class=\"string\">&quot;Jen&quot;</span>, <span class=\"number\">25</span>), (<span class=\"string\">&quot;Jack&quot;</span>, <span class=\"number\">23</span>))</span><br><span class=\"line\">    println(ages3)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages4 = <span class=\"keyword\">new</span> scala.collection.mutable.<span class=\"type\">HashMap</span>[<span class=\"type\">String</span>, <span class=\"type\">Int</span>]</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leoAge1 = ages1(<span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leoAge2 = <span class=\"keyword\">if</span> (ages1.contains(<span class=\"string\">&quot;leo&quot;</span>)) ages1(<span class=\"string\">&quot;leo&quot;</span>) <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> leoAge3 = ages1.getOrElse(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    println(leoAge1, leoAge2, leoAge3)</span><br><span class=\"line\">    ages4(<span class=\"string\">&quot;Leo&quot;</span>) = <span class=\"number\">31</span></span><br><span class=\"line\">    ages4 += (<span class=\"string\">&quot;Mike&quot;</span> -&gt; <span class=\"number\">35</span>, <span class=\"string\">&quot;Tom&quot;</span> -&gt; <span class=\"number\">40</span>)</span><br><span class=\"line\">    ages4 -= <span class=\"string\">&quot;Mike&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages5 = ages1 + (<span class=\"string\">&quot;Mike&quot;</span> -&gt; <span class=\"number\">36</span>, <span class=\"string\">&quot;Tom&quot;</span> -&gt; <span class=\"number\">40</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages6 = ages5 - <span class=\"string\">&quot;Tom&quot;</span></span><br><span class=\"line\">    println(ages4)</span><br><span class=\"line\">    println(ages5)</span><br><span class=\"line\">    println(ages6)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ((key, value) &lt;- ages1) println(key + <span class=\"string\">&quot; &quot;</span> + value)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key &lt;- ages1.keySet) println(key)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (value &lt;- ages1.values) println(value)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages7 = <span class=\"keyword\">for</span> ((key, value) &lt;- ages1) <span class=\"keyword\">yield</span> (value, key)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ((k, v) &lt;- ages7) println(k, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Map(Leo -&gt; 30, Jen -&gt; 25, Jack -&gt; 23)</span><br><span class=\"line\">Map(Jen -&gt; 25, Jack -&gt; 23, Leo -&gt; 31)</span><br><span class=\"line\">Map(Leo -&gt; 30, Jen -&gt; 25, Jack -&gt; 23)</span><br><span class=\"line\">(30,0,0)</span><br><span class=\"line\">Map(Tom -&gt; 40, Leo -&gt; 31)</span><br><span class=\"line\">Map(Mike -&gt; 36, Tom -&gt; 40, Leo -&gt; 30, Jack -&gt; 23, Jen -&gt; 25)</span><br><span class=\"line\">Map(Mike -&gt; 36, Leo -&gt; 30, Jack -&gt; 23, Jen -&gt; 25)</span><br><span class=\"line\">Leo 30</span><br><span class=\"line\">Jen 25</span><br><span class=\"line\">Jack 23</span><br><span class=\"line\">Leo</span><br><span class=\"line\">Jen</span><br><span class=\"line\">Jack</span><br><span class=\"line\">30</span><br><span class=\"line\">25</span><br><span class=\"line\">23</span><br><span class=\"line\">(30,Leo)</span><br><span class=\"line\">(25,Jen)</span><br><span class=\"line\">(23,Jack)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TupleDemo\"><a href=\"#TupleDemo\" class=\"headerlink\" title=\"TupleDemo\"></a>TupleDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TupleDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> t = (<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">    println(t._1, t._2)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> names = <span class=\"type\">Array</span>(<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>, <span class=\"string\">&quot;Mike&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages = <span class=\"type\">Array</span>(<span class=\"number\">30</span>, <span class=\"number\">24</span>, <span class=\"number\">26</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> nameAges = names.zip(ages)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ((name, age) &lt;- nameAges) println(name + <span class=\"string\">&quot; -&gt; &quot;</span> + age)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">(Leo,30)</span><br><span class=\"line\">Leo -&gt; 30</span><br><span class=\"line\">Jack -&gt; 24</span><br><span class=\"line\">Mike -&gt; 26</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SortedMap、LinkedHashMap\"><a href=\"#SortedMap、LinkedHashMap\" class=\"headerlink\" title=\"SortedMap、LinkedHashMap\"></a>SortedMap、LinkedHashMap</h2><h3 id=\"SortedMapDemo\"><a href=\"#SortedMapDemo\" class=\"headerlink\" title=\"SortedMapDemo\"></a>SortedMapDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SortedMapDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages = scala.collection.immutable.<span class=\"type\">SortedMap</span>(<span class=\"string\">&quot;Leo&quot;</span> -&gt; <span class=\"number\">30</span>, <span class=\"string\">&quot;Alice&quot;</span> -&gt; <span class=\"number\">15</span>, <span class=\"string\">&quot;Jen&quot;</span> -&gt; <span class=\"number\">25</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ((k, v) &lt;- ages) println(k, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">(Alice,15)</span><br><span class=\"line\">(Jen,25)</span><br><span class=\"line\">(Leo,30)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"LinkedHashMapDemo\"><a href=\"#LinkedHashMapDemo\" class=\"headerlink\" title=\"LinkedHashMapDemo\"></a>LinkedHashMapDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">LinkedHashMapDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages = <span class=\"keyword\">new</span> mutable.<span class=\"type\">LinkedHashMap</span>[<span class=\"type\">String</span>, <span class=\"type\">Int</span>]</span><br><span class=\"line\">    ages(<span class=\"string\">&quot;Leo&quot;</span>) = <span class=\"number\">30</span></span><br><span class=\"line\">    ages(<span class=\"string\">&quot;Alice&quot;</span>) = <span class=\"number\">15</span></span><br><span class=\"line\">    ages(<span class=\"string\">&quot;Jen&quot;</span>) = <span class=\"number\">25</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ((k, v) &lt;- ages) println(k, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">(Leo,30)</span><br><span class=\"line\">(Alice,15)</span><br><span class=\"line\">(Jen,25)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><h3 id=\"ClassDemo\"><a href=\"#ClassDemo\" class=\"headerlink\" title=\"ClassDemo\"></a>ClassDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ClassDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> hw = <span class=\"keyword\">new</span> <span class=\"type\">HelloWorld</span></span><br><span class=\"line\">    hw.sayHello()</span><br><span class=\"line\">    println(hw.getName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;Leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>() &#123; println(<span class=\"string\">&quot;Hello, &quot;</span> + name) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span> </span>= name</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">Leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"GetterSetterDemo\"><a href=\"#GetterSetterDemo\" class=\"headerlink\" title=\"GetterSetterDemo\"></a>GetterSetterDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">GetterSetterDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leo = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">    leo.name = <span class=\"string\">&quot;leo1&quot;</span></span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;Leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Leo</span><br><span class=\"line\">leo1</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CustomGetterSetterDemo\"><a href=\"#CustomGetterSetterDemo\" class=\"headerlink\" title=\"CustomGetterSetterDemo\"></a>CustomGetterSetterDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CustomGetterSetterDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leo = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">    leo.name = <span class=\"string\">&quot;leo1&quot;</span></span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> myName = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name</span> </span>= <span class=\"string\">&quot;your name is &quot;</span> + myName</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name_=</span></span>(newValue: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;you cannot edit your name!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">your name is leo</span><br><span class=\"line\">you cannot edit your name!</span><br><span class=\"line\">your name is leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FieldGetterDemo\"><a href=\"#FieldGetterDemo\" class=\"headerlink\" title=\"FieldGetterDemo\"></a>FieldGetterDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FieldGetterDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leo = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">    leo.updateName(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">    leo.updateName(<span class=\"string\">&quot;leo1&quot;</span>)</span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> myName = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateName</span></span>(newName: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newName == <span class=\"string\">&quot;leo1&quot;</span>) myName = newName</span><br><span class=\"line\">      <span class=\"keyword\">else</span> println(<span class=\"string\">&quot;not accept this new name!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name</span> </span>= <span class=\"string\">&quot;your name is &quot;</span> + myName</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">your name is leo</span><br><span class=\"line\">not accept this new name!</span><br><span class=\"line\">your name is leo</span><br><span class=\"line\">your name is leo1</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PrivateThisDemo\"><a href=\"#PrivateThisDemo\" class=\"headerlink\" title=\"PrivateThisDemo\"></a>PrivateThisDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PrivateThisDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leo = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    leo.age = <span class=\"number\">30</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> jack = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    jack.age = <span class=\"number\">18</span></span><br><span class=\"line\">    println(leo.older(jack))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> myAge = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">//      private[this] var myAge = 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age_=</span></span>(newValue: <span class=\"type\">Int</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newValue &gt; <span class=\"number\">0</span>) myAge = newValue</span><br><span class=\"line\">      <span class=\"keyword\">else</span> print(<span class=\"string\">&quot;illegal age!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span> </span>= myAge</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">older</span></span>(s: <span class=\"type\">Student</span>) = &#123;</span><br><span class=\"line\">      myAge &gt; s.myAge</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">true</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JavaGetterSetterDemo\"><a href=\"#JavaGetterSetterDemo\" class=\"headerlink\" title=\"JavaGetterSetterDemo\"></a>JavaGetterSetterDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scala.beans.<span class=\"type\">BeanProperty</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">JavaGetterSetterDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    s.setName(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    println(s.getName)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> t = <span class=\"keyword\">new</span> <span class=\"type\">Teacher</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    println(t.getName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@BeanProperty</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> = _</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span>(<span class=\"params\">@<span class=\"type\">BeanProperty</span> var name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">leo</span><br><span class=\"line\">jack</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AuxiliaryConstructorDemo\"><a href=\"#AuxiliaryConstructorDemo\" class=\"headerlink\" title=\"AuxiliaryConstructorDemo\"></a>AuxiliaryConstructorDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">AuxiliaryConstructorDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s1 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s1.getName)</span><br><span class=\"line\">    println(s1.getAge)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s2 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    println(s2.getName)</span><br><span class=\"line\">    println(s2.getAge)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s3 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">    println(s3.getName)</span><br><span class=\"line\">    println(s3.getAge)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> age = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>(name)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span> </span>= name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setName</span></span>(newName: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = newName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAge</span> </span>= age</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setAge</span></span>(newAge: <span class=\"type\">Int</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">0</span><br><span class=\"line\">leo</span><br><span class=\"line\">0</span><br><span class=\"line\">leo</span><br><span class=\"line\">30</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MainConstructor\"><a href=\"#MainConstructor\" class=\"headerlink\" title=\"MainConstructor\"></a>MainConstructor</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">MainConstructor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> t = <span class=\"keyword\">new</span> <span class=\"type\">Teacher</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val age: <span class=\"type\">Int</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;your name is &quot;</span> + name + <span class=\"string\">&quot;, your age is &quot;</span> + age)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span>(<span class=\"params\">val name: <span class=\"type\">String</span> = &quot;jack&quot;, val age: <span class=\"type\">Int</span> = 35</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;your name is &quot;</span> + name + <span class=\"string\">&quot;, your age is &quot;</span> + age)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">your name is leo, your age is 30</span><br><span class=\"line\">your name is jack, your age is 35</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"InnerClassDemo\"><a href=\"#InnerClassDemo\" class=\"headerlink\" title=\"InnerClassDemo\"></a>InnerClassDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">InnerClassDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> c1 = <span class=\"keyword\">new</span> <span class=\"type\">Class</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> s1 = c1.getStudents(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    c1.students += s1</span><br><span class=\"line\">    <span class=\"keyword\">val</span> c2 = <span class=\"keyword\">new</span> <span class=\"type\">Class</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> s2 = c2.getStudents(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//    c1.students += s2</span></span><br><span class=\"line\">    c2.students += s2</span><br><span class=\"line\">    println(c1.students)</span><br><span class=\"line\">    println(c2.students)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Class</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> students = <span class=\"keyword\">new</span> <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Student</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getStudents</span></span>(name: <span class=\"type\">String</span>) = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">ArrayBuffer(basic.InnerClassDemo$Class$Student@7a79be86)</span><br><span class=\"line\">ArrayBuffer(basic.InnerClassDemo$Class$Student@34ce8af7)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><h3 id=\"ObjectDemo\"><a href=\"#ObjectDemo\" class=\"headerlink\" title=\"ObjectDemo\"></a>ObjectDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ObjectDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"type\">Person</span></span><br><span class=\"line\">    println(p.getEyeNum)</span><br><span class=\"line\">    println(<span class=\"type\">Person</span>.getEyeNum)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> eyeNum = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;this person object&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getEyeNum</span> </span>= eyeNum</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">this person object</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CompanionObjectDemo\"><a href=\"#CompanionObjectDemo\" class=\"headerlink\" title=\"CompanionObjectDemo\"></a>CompanionObjectDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CompanionObjectDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">    p.sayHello</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> eyeNum = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;this person object&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getEyeNum</span> </span>= eyeNum</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val age: <span class=\"type\">Int</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= println(<span class=\"string\">&quot;Hi, &quot;</span> + name + <span class=\"string\">&quot;, I guess you are &quot;</span> +</span><br><span class=\"line\">      age + <span class=\"string\">&quot; years old!&quot;</span> + <span class=\"string\">&quot;, and usually you must have &quot;</span> + <span class=\"type\">Person</span>.eyeNum + <span class=\"string\">&quot; eyes.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">this person object</span><br><span class=\"line\">Hi, leo, I guess you are 30 years old!, and usually you must have 2 eyes.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AbstractClassDemo\"><a href=\"#AbstractClassDemo\" class=\"headerlink\" title=\"AbstractClassDemo\"></a>AbstractClassDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">AbstractClassDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> h = <span class=\"type\">HelloImpl</span></span><br><span class=\"line\">    h.sayHello(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span>(<span class=\"params\">var message: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>): <span class=\"type\">Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HelloImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hello</span>(<span class=\"params\">&quot;hello&quot;</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>) = &#123;</span><br><span class=\"line\">      println(message + <span class=\"string\">&quot;, &quot;</span> + name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">hello, world</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ApplyDemo\"><a href=\"#ApplyDemo\" class=\"headerlink\" title=\"ApplyDemo\"></a>ApplyDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ApplyDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    println(p.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(name: <span class=\"type\">String</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HelloWorldDemo\"><a href=\"#HelloWorldDemo\" class=\"headerlink\" title=\"HelloWorldDemo\"></a>HelloWorldDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HelloWorldDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello World</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HelloWorld\"><a href=\"#HelloWorld\" class=\"headerlink\" title=\"HelloWorld\"></a>HelloWorld</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello World</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"EnumerationDemo\"><a href=\"#EnumerationDemo\" class=\"headerlink\" title=\"EnumerationDemo\"></a>EnumerationDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">EnumerationDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"type\">Season</span>.<span class=\"type\">SPRING</span>)</span><br><span class=\"line\">    println(<span class=\"type\">Season</span>.values)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (e &lt;- <span class=\"type\">Season</span>.values) println(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Season</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enumeration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">SPRING</span>, <span class=\"type\">SUMMER</span>, <span class=\"type\">AUTUMN</span>, <span class=\"type\">WINTER</span> = <span class=\"type\">Value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">SPRING</span><br><span class=\"line\">Season.ValueSet(SPRING, SUMMER, AUTUMN, WINTER)</span><br><span class=\"line\">SPRING</span><br><span class=\"line\">SUMMER</span><br><span class=\"line\">AUTUMN</span><br><span class=\"line\">WINTER</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">EnumerationDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"type\">Season</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">    println(<span class=\"type\">Season</span>.withName(<span class=\"string\">&quot;spring&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (e &lt;- <span class=\"type\">Season</span>.values) println(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Season</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enumeration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">SPRING</span> = <span class=\"type\">Value</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;spring&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">SUMMER</span> = <span class=\"type\">Value</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;summer&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">AUTUMN</span> = <span class=\"type\">Value</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;autumn&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">WINTER</span> = <span class=\"type\">Value</span>(<span class=\"number\">3</span>, <span class=\"string\">&quot;winter&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">spring</span><br><span class=\"line\">spring</span><br><span class=\"line\">spring</span><br><span class=\"line\">summer</span><br><span class=\"line\">autumn</span><br><span class=\"line\">winter</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Extends\"><a href=\"#Extends\" class=\"headerlink\" title=\"Extends\"></a>Extends</h2><h3 id=\"ExtendsDemo\"><a href=\"#ExtendsDemo\" class=\"headerlink\" title=\"ExtendsDemo\"></a>ExtendsDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ExtendsDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s.getScore)</span><br><span class=\"line\">    println(s.getName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span> </span>= name</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> score = <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getScore</span> </span>= score</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">A</span><br><span class=\"line\">leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OverrideDemo\"><a href=\"#OverrideDemo\" class=\"headerlink\" title=\"OverrideDemo\"></a>OverrideDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">OverrideDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s.getScore)</span><br><span class=\"line\">    println(s.getName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span> </span>= name</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> score = <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getScore</span> </span>= score</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span> </span>= <span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + <span class=\"keyword\">super</span>.getName</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">A</span><br><span class=\"line\">Hi, I&#x27;m leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OverrideFieldDemo\"><a href=\"#OverrideFieldDemo\" class=\"headerlink\" title=\"OverrideFieldDemo\"></a>OverrideFieldDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">OverrideFieldDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s.name)</span><br><span class=\"line\">    println(s.age)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: <span class=\"type\">String</span> = <span class=\"string\">&quot;person&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span></span>: <span class=\"type\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> name: <span class=\"type\">String</span> = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span></span>: <span class=\"type\">Int</span> = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">leo</span><br><span class=\"line\">30</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"InstanceOfDemo\"><a href=\"#InstanceOfDemo\" class=\"headerlink\" title=\"InstanceOfDemo\"></a>InstanceOfDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">InstanceOfDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p: <span class=\"type\">Person</span> = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> s: <span class=\"type\">Student</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    println(s)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.isInstanceOf[<span class=\"type\">Student</span>]) s = p.asInstanceOf[<span class=\"type\">Student</span>]</span><br><span class=\"line\">    println(s)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">null</span><br><span class=\"line\">basic.InstanceOfDemo$Student@11531931</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ClassOfDemo\"><a href=\"#ClassOfDemo\" class=\"headerlink\" title=\"ClassOfDemo\"></a>ClassOfDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ClassOfDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p: <span class=\"type\">Person</span> = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(p.isInstanceOf[<span class=\"type\">Person</span>])</span><br><span class=\"line\">    println(p.getClass == classOf[<span class=\"type\">Person</span>])</span><br><span class=\"line\">    println(p.getClass == classOf[<span class=\"type\">Student</span>])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">true</span><br><span class=\"line\">false</span><br><span class=\"line\">true</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ProtectedDemo\"><a href=\"#ProtectedDemo\" class=\"headerlink\" title=\"ProtectedDemo\"></a>ProtectedDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ProtectedDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s1 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    s1.sayHello</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s2 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    s2.sayHello</span><br><span class=\"line\">    s1.makeFriends(s2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//  protected[this] var hobby: String = &quot;game&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">var</span> hobby: <span class=\"type\">String</span> = <span class=\"string\">&quot;game&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= println(<span class=\"string\">&quot;Hello, &quot;</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(s: <span class=\"type\">Student</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;my hobby is &quot;</span> + hobby + <span class=\"string\">&quot;, your hobby is &quot;</span> + s.hobby)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, leo</span><br><span class=\"line\">Hello, leo</span><br><span class=\"line\">my hobby is game, your hobby is game</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ParentConstructor\"><a href=\"#ParentConstructor\" class=\"headerlink\" title=\"ParentConstructor\"></a>ParentConstructor</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ParentConstructor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s1 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    println(s1.name, s1.age, s1.score)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s2 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"number\">30</span>)</span><br><span class=\"line\">    println(s2.name, s2.age, s2.score)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val age: <span class=\"type\">Int</span></span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span>, var score: <span class=\"type\">Double</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>(name, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(age: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>(<span class=\"string\">&quot;leo&quot;</span>, age, <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">(leo,0,0.0)</span><br><span class=\"line\">(leo,30,0.0)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AnonymousInnerClassDemo\"><a href=\"#AnonymousInnerClassDemo\" class=\"headerlink\" title=\"AnonymousInnerClassDemo\"></a>AnonymousInnerClassDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">AnonymousInnerClassDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= <span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    greeting(p)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span>(p: <span class=\"type\">Person</span> &#123;<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>: <span class=\"type\">String</span>&#125;): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(p.sayHello)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">protected val name: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= <span class=\"string\">&quot;Hello, I&#x27;m &quot;</span> + name</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hi, I&#x27;m leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AbstractClassDemo-1\"><a href=\"#AbstractClassDemo-1\" class=\"headerlink\" title=\"AbstractClassDemo\"></a>AbstractClassDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">AbstractClassDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> h = <span class=\"type\">HelloImpl</span></span><br><span class=\"line\">    h.sayHello(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span>(<span class=\"params\">var message: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>): <span class=\"type\">Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HelloImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hello</span>(<span class=\"params\">&quot;hello&quot;</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>) = &#123;</span><br><span class=\"line\">      println(message + <span class=\"string\">&quot;, &quot;</span> + name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">hello, world</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AbstractFieldDemo\"><a href=\"#AbstractFieldDemo\" class=\"headerlink\" title=\"AbstractFieldDemo\"></a>AbstractFieldDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">AbstractFieldDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: <span class=\"type\">String</span> = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pattern-Match\"><a href=\"#Pattern-Match\" class=\"headerlink\" title=\"Pattern Match\"></a>Pattern Match</h2><h3 id=\"PatternMatchDemo\"><a href=\"#PatternMatchDemo\" class=\"headerlink\" title=\"PatternMatchDemo\"></a>PatternMatchDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p: <span class=\"type\">Person</span> = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    p <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> per: <span class=\"type\">Person</span> =&gt; println(<span class=\"string\">&quot;it&#x27;s Person&#x27;s object&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> _ =&gt; println(<span class=\"string\">&quot;unknown type&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">it&#x27;s Person&#x27;s object</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">judgeGrade</span></span>(grade: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      grade <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;A&quot;</span> =&gt; println(<span class=\"string\">&quot;Excellent&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;B&quot;</span> =&gt; println(<span class=\"string\">&quot;Good&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;C&quot;</span> =&gt; println(<span class=\"string\">&quot;Just so so&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> _ =&gt; println(<span class=\"string\">&quot;You need work harder&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    judgeGrade(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">    judgeGrade(<span class=\"string\">&quot;D&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Excellent</span><br><span class=\"line\">You need work harder</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">judgeGrade</span></span>(name: <span class=\"type\">String</span>, grade: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      grade <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;A&quot;</span> =&gt; println(name + <span class=\"string\">&quot;, you are excellent&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;B&quot;</span> =&gt; println(name + <span class=\"string\">&quot;, you are good&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;C&quot;</span> =&gt; println(name + <span class=\"string\">&quot;, your are just so so&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> _ <span class=\"keyword\">if</span> name == <span class=\"string\">&quot;leo&quot;</span> =&gt; println(name + <span class=\"string\">&quot;, you are a good boy, come on&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> _ =&gt; println(name + <span class=\"string\">&quot;, you need to work harder&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    judgeGrade(<span class=\"string\">&quot;jack&quot;</span>, <span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">    judgeGrade(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"string\">&quot;D&quot;</span>)</span><br><span class=\"line\">    judgeGrade(<span class=\"string\">&quot;jen&quot;</span>, <span class=\"string\">&quot;D&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">jack, you are excellent</span><br><span class=\"line\">leo, you are a good boy, come on</span><br><span class=\"line\">jen, you need to work harder</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemoIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> java.io._</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">processException</span></span>(e: <span class=\"type\">Exception</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      e <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> e1: <span class=\"type\">IllegalArgumentException</span> =&gt; println(<span class=\"string\">&quot;you have illegal arguments! exception is: &quot;</span> + e1)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> e2: <span class=\"type\">FileNotFoundException</span> =&gt; println(<span class=\"string\">&quot;cannot find the file you need read or write! exceptiotn is: &quot;</span> + e2)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> e3: <span class=\"type\">IOException</span> =&gt; println(<span class=\"string\">&quot;you got an error while you were doing IO operation! exception is: &quot;</span> + e3)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> _: <span class=\"type\">Exception</span> =&gt; println(<span class=\"string\">&quot;cannot know which exception you have!&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    processException(<span class=\"keyword\">new</span> <span class=\"type\">IllegalArgumentException</span>(<span class=\"string\">&quot;illegal argument!&quot;</span>))</span><br><span class=\"line\">    processException(<span class=\"keyword\">new</span> <span class=\"type\">IOException</span>(<span class=\"string\">&quot;io exception!&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">you have illegal arguments! exception is: java.lang.IllegalArgumentException: illegal argument!</span><br><span class=\"line\">you got an error while you were doing IO operation! exception is: java.io.IOException: io exception!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemoIV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\"><span class=\"comment\">//    def greeting(arr: Array[String]): Unit = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//      arr match &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Array(&quot;Leo&quot;) =&gt; println(&quot;Hi, Leo!&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//        case Array(girl1, girl2, girl3) =&gt; println(&quot;Hi, girls, nice to meet you. &quot; + girl1 + &quot; and &quot; + girl2 + &quot; and &quot; + girl3)</span></span><br><span class=\"line\"><span class=\"comment\">//        case Array(&quot;Leo&quot;, _*) =&gt; println(&quot;Hi, Leo, please introduce your friends to me.&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//        case _ =&gt; println(&quot;hey who are you?&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    greeting(Array(&quot;Leo&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//    greeting(Array(&quot;Jen&quot;, &quot;Marry&quot;, &quot;Penny&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//    greeting(Array(&quot;Leo&quot;, &quot;Jack&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//    greeting(Array(&quot;Jack&quot;))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span>(list: <span class=\"type\">List</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      list <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;Leo&quot;</span> :: <span class=\"type\">Nil</span> =&gt; println(<span class=\"string\">&quot;Hi, Leo!&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> girl1 :: girl2 :: girl3 :: <span class=\"type\">Nil</span> =&gt; println(<span class=\"string\">&quot;Hi, girls, nice to meet you. &quot;</span> + girl1 + <span class=\"string\">&quot; and &quot;</span> + girl2 + <span class=\"string\">&quot; and &quot;</span> + girl3)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;Leo&quot;</span> :: tail =&gt; println(<span class=\"string\">&quot;Hi, Leo, please introduce your friends to me.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> _ =&gt; println(<span class=\"string\">&quot;hey, who are you!&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    greeting(<span class=\"type\">List</span>(<span class=\"string\">&quot;Leo&quot;</span>))</span><br><span class=\"line\">    greeting(<span class=\"type\">List</span>(<span class=\"string\">&quot;Jen&quot;</span>, <span class=\"string\">&quot;Marry&quot;</span>, <span class=\"string\">&quot;Penny&quot;</span>))</span><br><span class=\"line\">    greeting(<span class=\"type\">List</span>(<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>))</span><br><span class=\"line\">    greeting(<span class=\"type\">List</span>(<span class=\"string\">&quot;Jack&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hi, Leo!</span><br><span class=\"line\">Hi, girls, nice to meet you. Jen and Marry and Penny</span><br><span class=\"line\">Hi, Leo, please introduce your friends to me.</span><br><span class=\"line\">hey, who are you!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemoV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span>(<span class=\"params\">name: <span class=\"type\">String</span>, subject: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">name: <span class=\"type\">String</span>, classroom: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">judgeIdentify</span></span>(p: <span class=\"type\">Person</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      p <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Teacher</span>(name, subject) =&gt; println(<span class=\"string\">&quot;Teacher, name is &quot;</span> + name + <span class=\"string\">&quot;, subject is &quot;</span> + subject)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Student</span>(name, classroom) =&gt; println(<span class=\"string\">&quot;Student, name is &quot;</span> + name + <span class=\"string\">&quot;, classroom is &quot;</span> + classroom)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> _ =&gt; println(<span class=\"string\">&quot;Illegal access, please go out of the school!&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    judgeIdentify(<span class=\"keyword\">new</span> <span class=\"type\">Teacher</span>(<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"string\">&quot;mathematics&quot;</span>))</span><br><span class=\"line\">    judgeIdentify(<span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;Jack&quot;</span>, <span class=\"string\">&quot;class&quot;</span>))</span><br><span class=\"line\">    judgeIdentify(<span class=\"keyword\">new</span> <span class=\"type\">Person</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Teacher, name is Leo, subject is mathematics</span><br><span class=\"line\">Student, name is Jack, classroom is class</span><br><span class=\"line\">Illegal access, please go out of the school!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemoVI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> grades = <span class=\"type\">Map</span>(<span class=\"string\">&quot;Leo&quot;</span> -&gt; <span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span> -&gt; <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;Jen&quot;</span> -&gt; <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getGrade</span></span>(name: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> grade = grades.get(name)</span><br><span class=\"line\">      grade <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(grade) =&gt; println(<span class=\"string\">&quot;your grade is &quot;</span> + grade)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">None</span> =&gt; println(<span class=\"string\">&quot;sorry, your grade information is not in the system&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getGrade(<span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">    getGrade(<span class=\"string\">&quot;Marry&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">your grade is A</span><br><span class=\"line\">sorry, your grade information is not in the system</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Trait\"><a href=\"#Trait\" class=\"headerlink\" title=\"Trait\"></a>Trait</h2><h3 id=\"TraitDemo\"><a href=\"#TraitDemo\" class=\"headerlink\" title=\"TraitDemo\"></a>TraitDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    p1.sayHello(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    p2.sayHello(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    p1.makeFriends(p2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">HelloTrait</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">MakeFriendsTrait</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">HelloTrait</span> <span class=\"keyword\">with</span> <span class=\"title\">MakeFriendsTrait</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(otherName: <span class=\"type\">String</span>) = println(<span class=\"string\">&quot;Hello, &quot;</span> + otherName + <span class=\"string\">&quot;, I&#x27;m &quot;</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>) = println(<span class=\"string\">&quot;Hello &quot;</span> + p.name + <span class=\"string\">&quot;, I&#x27;m &quot;</span> + name + <span class=\"string\">&quot;, I want to make friends with you.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, jack, I&#x27;m leo</span><br><span class=\"line\">Hello, leo, I&#x27;m jack</span><br><span class=\"line\">Hello jack, I&#x27;m leo, I want to make friends with you.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    p1.makeFriends(p2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(message: <span class=\"type\">String</span>) = println(message)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + name + <span class=\"string\">&quot;, I&#x27;m glad to make friends with you, &quot;</span> + p.name)</span><br><span class=\"line\">      log(<span class=\"string\">&quot;makeFriends method is invoked with parameter Person[name=&quot;</span> + p.name + <span class=\"string\">&quot;]&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hi, I&#x27;m leo, I&#x27;m glad to make friends with you, jack</span><br><span class=\"line\">makeFriends method is invoked with parameter Person[name=jack]</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    s.sayHello</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> eyeNum: <span class=\"type\">Int</span> = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= println(<span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + name + <span class=\"string\">&quot;, I have &quot;</span> + eyeNum + <span class=\"string\">&quot; eyes.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hi, I&#x27;m leo, I have 2 eyes.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoIV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    p1.makeFriends(p2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>) = println(msg + <span class=\"string\">&quot;, &quot;</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span> = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      sayHello(p.name)</span><br><span class=\"line\">      println(<span class=\"string\">&quot;I&#x27;m &quot;</span> + name + <span class=\"string\">&quot;, I want to make friends with you!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">hello, jack</span><br><span class=\"line\">I&#x27;m leo, I want to make friends with you!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoIX</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s.getClass)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123; println(<span class=\"string\">&quot;Person&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123; println(<span class=\"string\">&quot;Logger&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">MyLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123; println(<span class=\"string\">&quot;MyLogger&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">TimeLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123; println(<span class=\"string\">&quot;TimeLogger&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> <span class=\"keyword\">with</span> <span class=\"title\">MyLogger</span> <span class=\"keyword\">with</span> <span class=\"title\">TimeLogger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;Student&#x27;s constructor!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Person&#x27;s constructor!</span><br><span class=\"line\">Logger&#x27;s constructor!</span><br><span class=\"line\">MyLogger&#x27;s constructor!</span><br><span class=\"line\">TimeLogger&#x27;s constructor!</span><br><span class=\"line\">Student&#x27;s constructor!</span><br><span class=\"line\">class basic.TraitDemoIX$Student</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoIV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    p1.makeFriends(p2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>) = println(msg + <span class=\"string\">&quot;, &quot;</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span> = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      sayHello(p.name)</span><br><span class=\"line\">      println(<span class=\"string\">&quot;I&#x27;m &quot;</span> + name + <span class=\"string\">&quot;, I want to make friends with you!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">hello, jack</span><br><span class=\"line\">I&#x27;m leo, I want to make friends with you!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoIX</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s.getClass)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123; println(<span class=\"string\">&quot;Person&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123; println(<span class=\"string\">&quot;Logger&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">MyLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123; println(<span class=\"string\">&quot;MyLogger&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">TimeLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123; println(<span class=\"string\">&quot;TimeLogger&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> <span class=\"keyword\">with</span> <span class=\"title\">MyLogger</span> <span class=\"keyword\">with</span> <span class=\"title\">TimeLogger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;Student&#x27;s constructor!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Person&#x27;s constructor!</span><br><span class=\"line\">Logger&#x27;s constructor!</span><br><span class=\"line\">MyLogger&#x27;s constructor!</span><br><span class=\"line\">TimeLogger&#x27;s constructor!</span><br><span class=\"line\">Student&#x27;s constructor!</span><br><span class=\"line\">class basic.TraitDemoIX$Student</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    p1.sayHello</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;jack&quot;</span>) <span class=\"keyword\">with</span> <span class=\"type\">MyLogger</span></span><br><span class=\"line\">    p2.sayHello</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logged</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">MyLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logged</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123; println(<span class=\"string\">&quot;log: &quot;</span> + msg) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Logged</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>&#123; println(<span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + name); log(<span class=\"string\">&quot;sayHello is invoked!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hi, I&#x27;m leo</span><br><span class=\"line\">Hi, I&#x27;m jack</span><br><span class=\"line\">log: sayHello is invoked!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoVI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    p.sayHello</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span></span>(data: <span class=\"type\">String</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">DataValidHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span></span>(data: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;check data: &quot;</span> + data)</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.handle(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">SignatureValidHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span></span>(data: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;check signature: &quot;</span> + data)</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.handle(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">SignatureValidHandler</span> <span class=\"keyword\">with</span> <span class=\"title\">DataValidHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= &#123; println(<span class=\"string\">&quot;Hello, &quot;</span> + name); handle(name) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, leo</span><br><span class=\"line\">check data: leo</span><br><span class=\"line\">check signature: leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoVII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(classOf[<span class=\"type\">Logger</span>])</span><br><span class=\"line\">    println(classOf[<span class=\"type\">MyLogger</span>])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">MyLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">super</span>.log(msg) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">interface basic.TraitDemoVII$Logger</span><br><span class=\"line\">interface basic.TraitDemoVII$MyLogger</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoVIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    println(p1.getClass)</span><br><span class=\"line\">    println(p2.getClass)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Valid</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span></span>: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">valid</span></span>: <span class=\"type\">Boolean</span> = &#123;</span><br><span class=\"line\">      getName == <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Valid</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    println(valid)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span> </span>= name</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">true</span><br><span class=\"line\">false</span><br><span class=\"line\">class basic.TraitDemoVIII$Person</span><br><span class=\"line\">class basic.TraitDemoVIII$Person</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoX</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person1</span></span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span> = <span class=\"string\">&quot;init&quot;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">with</span> <span class=\"type\">Person1</span> <span class=\"keyword\">with</span> <span class=\"type\">SayHello</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person2</span> <span class=\"keyword\">extends</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span> = <span class=\"string\">&quot;init&quot;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">with</span> <span class=\"type\">SayHello</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person2</span></span><br><span class=\"line\">    println(p1.getClass)</span><br><span class=\"line\">    println(p2.getClass)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span></span><br><span class=\"line\">    println(msg.toString)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">init</span><br><span class=\"line\">init</span><br><span class=\"line\">class basic.TraitDemoX$$anon$1</span><br><span class=\"line\">class basic.TraitDemoX$Person2$1</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoXI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Person</span></span><br><span class=\"line\">    println(p.getClass)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    println(msg.toString)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span> = <span class=\"string\">&quot;init&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">init</span><br><span class=\"line\">class basic.TraitDemoXI$Person</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoXII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    p.sayHello</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printMessage</span></span>(msg: <span class=\"type\">String</span>) = println(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> <span class=\"keyword\">extends</span> <span class=\"title\">MyUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) = printMessage(<span class=\"string\">&quot;log: &quot;</span> + msg)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>: <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      log(<span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + name)</span><br><span class=\"line\">      printMessage(<span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">log: Hi, I&#x27;m leo</span><br><span class=\"line\">Hi, I&#x27;m leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Functional-Program\"><a href=\"#Functional-Program\" class=\"headerlink\" title=\"Functional Program\"></a>Functional Program</h2><h3 id=\"FunctionalProgramDemo\"><a href=\"#FunctionalProgramDemo\" class=\"headerlink\" title=\"FunctionalProgramDemo\"></a>FunctionalProgramDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionalProgramDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> l1 = <span class=\"type\">List</span>(<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"string\">&quot;Jen&quot;</span>, <span class=\"string\">&quot;Peter&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>).map(<span class=\"string\">&quot;name is &quot;</span> + _)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> l2 = <span class=\"type\">List</span>(<span class=\"string\">&quot;Hello World&quot;</span>, <span class=\"string\">&quot;You Me&quot;</span>).flatMap(_.split(<span class=\"string\">&quot; &quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> l3 = <span class=\"type\">List</span>(<span class=\"string\">&quot;I&quot;</span>, <span class=\"string\">&quot;have&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;beautiful&quot;</span>, <span class=\"string\">&quot;house&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> l4 =  <span class=\"type\">List</span>(<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"string\">&quot;Jen&quot;</span>, <span class=\"string\">&quot;Peter&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>).zip(<span class=\"type\">List</span>(<span class=\"number\">100</span>, <span class=\"number\">90</span>, <span class=\"number\">75</span>, <span class=\"number\">83</span>))</span><br><span class=\"line\">    println(l1)</span><br><span class=\"line\">    println(l2)</span><br><span class=\"line\">    println(l3)</span><br><span class=\"line\">    println(l4)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">List(name is Leo, name is Jen, name is Peter, name is Jack)</span><br><span class=\"line\">List(Hello, World, You, Me)</span><br><span class=\"line\">List(I, have, a, beautiful, house)</span><br><span class=\"line\">List((Leo,100), (Jen,90), (Peter,75), (Jack,83))</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionalProgramDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> line1 = scala.io.<span class=\"type\">Source</span>.fromFile(<span class=\"string\">&quot;README.md&quot;</span>).mkString</span><br><span class=\"line\">    <span class=\"keyword\">val</span> line2 = scala.io.<span class=\"type\">Source</span>.fromFile(<span class=\"string\">&quot;README.md&quot;</span>).mkString</span><br><span class=\"line\">    <span class=\"keyword\">val</span> lines = <span class=\"type\">List</span>(line1, line2)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> count = lines.flatMap(_.split(<span class=\"string\">&quot;\\n&quot;</span>)).flatMap(_.split(<span class=\"string\">&quot; &quot;</span>)).map((_, <span class=\"number\">1</span>)).map(_._2).reduceLeft(_ + _)</span><br><span class=\"line\">    println(count)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">16</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FunctionAssignDemo\"><a href=\"#FunctionAssignDemo\" class=\"headerlink\" title=\"FunctionAssignDemo\"></a>FunctionAssignDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionAssignDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sayHelloFunc = sayHello _</span><br><span class=\"line\">    sayHelloFunc(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>) &#123; println(<span class=\"string\">&quot;Hello, &quot;</span> + name) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AnonymousFunctionDemo\"><a href=\"#AnonymousFunctionDemo\" class=\"headerlink\" title=\"AnonymousFunctionDemo\"></a>AnonymousFunctionDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">AnonymousFunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sayHelloFunc = (name: <span class=\"type\">String</span>) =&gt; println(<span class=\"string\">&quot;Hello, &quot;</span> + name)</span><br><span class=\"line\">    sayHelloFunc(<span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HigherOrderFunctionDemo\"><a href=\"#HigherOrderFunctionDemo\" class=\"headerlink\" title=\"HigherOrderFunctionDemo\"></a>HigherOrderFunctionDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HigherOrderFunctionDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sayHelloFunc = (name: <span class=\"type\">String</span>) =&gt; println(<span class=\"string\">&quot;Hello, &quot;</span> + name)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span>(func: (<span class=\"type\">String</span>) =&gt; <span class=\"type\">Unit</span>, name: <span class=\"type\">String</span>) &#123; func(name) &#125;</span><br><span class=\"line\">    greeting(sayHelloFunc, <span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).map((num: <span class=\"type\">Int</span>) =&gt; num * num).mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getGreetingFunc</span></span>(msg: <span class=\"type\">String</span>) = (name: <span class=\"type\">String</span>) =&gt; println(msg + <span class=\"string\">&quot;, &quot;</span> + name)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> greetingFunc = getGreetingFunc(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">    greetingFunc(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">1,4,9,16,25</span><br><span class=\"line\">hello, leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HigherOrderFunctionDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span>(func: (<span class=\"type\">String</span>) =&gt; <span class=\"type\">Unit</span>, name: <span class=\"type\">String</span>) &#123; func(name) &#125;</span><br><span class=\"line\">    greeting((name: <span class=\"type\">String</span>) =&gt; println(<span class=\"string\">&quot;Hello, &quot;</span> + name), <span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">    greeting((name) =&gt; println(<span class=\"string\">&quot;Hello, &quot;</span> + name), <span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">    greeting(name =&gt; println(<span class=\"string\">&quot;Hello, &quot;</span> + name), <span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">triple</span></span>(func: (<span class=\"type\">Int</span>) =&gt; <span class=\"type\">Int</span>) = &#123; func(<span class=\"number\">3</span>) &#125;</span><br><span class=\"line\">    println(triple(<span class=\"number\">3</span> * _))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">9</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HigherOrderFunctionDemoIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).map(<span class=\"number\">2</span> * _).mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    (<span class=\"number\">1</span> to <span class=\"number\">9</span>).map(<span class=\"string\">&quot;*&quot;</span> * _).foreach(println _)</span><br><span class=\"line\">    println((<span class=\"number\">1</span> to <span class=\"number\">20</span>).filter(_ % <span class=\"number\">2</span> == <span class=\"number\">0</span>).mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    println((<span class=\"number\">1</span> to <span class=\"number\">5</span>).reduceLeft(_ * _))</span><br><span class=\"line\">    println(<span class=\"type\">Array</span>(<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>).sortWith(_ &lt; _).mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">2,4,6,8,10</span><br><span class=\"line\">*</span><br><span class=\"line\">**</span><br><span class=\"line\">***</span><br><span class=\"line\">****</span><br><span class=\"line\">*****</span><br><span class=\"line\">******</span><br><span class=\"line\">*******</span><br><span class=\"line\">********</span><br><span class=\"line\">*********</span><br><span class=\"line\">2,4,6,8,10,12,14,16,18,20</span><br><span class=\"line\">120</span><br><span class=\"line\">1,2,3,4,5,10</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ClosureDemo\"><a href=\"#ClosureDemo\" class=\"headerlink\" title=\"ClosureDemo\"></a>ClosureDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ClosureDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getGreetingFunc</span></span>(msg: <span class=\"type\">String</span>) = (name: <span class=\"type\">String</span>) =&gt; println(msg + <span class=\"string\">&quot;, &quot;</span> + name)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> greetingFuncHello = getGreetingFunc(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> greetingFuncHi = getGreetingFunc(<span class=\"string\">&quot;hi&quot;</span>)</span><br><span class=\"line\">    greetingFuncHello(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    greetingFuncHi(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">hello, leo</span><br><span class=\"line\">hi, leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SAMConvertDemo\"><a href=\"#SAMConvertDemo\" class=\"headerlink\" title=\"SAMConvertDemo\"></a>SAMConvertDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event._</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SAMConvertDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  val f = new JFrame(&quot;Hello World&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//  val b = new JButton(&quot;Click Me&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//  b.setBounds(100, 100, 65, 30)</span></span><br><span class=\"line\"><span class=\"comment\">//  b.addActionListener(new ActionListener &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    override def actionPerformed(event: ActionEvent): Unit = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//      println(&quot;Click Me&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//  f.add(b)</span></span><br><span class=\"line\"><span class=\"comment\">//  f.setSize(300, 300)</span></span><br><span class=\"line\"><span class=\"comment\">//  f.setVisible(true)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">val</span> f = <span class=\"keyword\">new</span> <span class=\"type\">JFrame</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">val</span> b = <span class=\"keyword\">new</span> <span class=\"type\">JButton</span>(<span class=\"string\">&quot;Click Me&quot;</span>)</span><br><span class=\"line\">  b.setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">65</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">  <span class=\"keyword\">implicit</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getActionListener</span></span>(actionProcessFunc: (<span class=\"type\">ActionEvent</span>) =&gt; <span class=\"type\">Unit</span>) = <span class=\"keyword\">new</span> <span class=\"type\">ActionListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">actionPerformed</span></span>(event: <span class=\"type\">ActionEvent</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      actionProcessFunc(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b.addActionListener((event: <span class=\"type\">ActionEvent</span>) =&gt; println(<span class=\"string\">&quot;Click Me&quot;</span>))</span><br><span class=\"line\">  f.add(b)</span><br><span class=\"line\">  f.setSize(<span class=\"number\">300</span>, <span class=\"number\">300</span>)</span><br><span class=\"line\">  f.setVisible(<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Click Me</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CurryingDemo\"><a href=\"#CurryingDemo\" class=\"headerlink\" title=\"CurryingDemo\"></a>CurryingDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CurryingDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum1</span></span>(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>) = a + b</span><br><span class=\"line\">    println(sum1(<span class=\"number\">1</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum2</span></span>(a: <span class=\"type\">Int</span>) = (b: <span class=\"type\">Int</span>) =&gt; a + b</span><br><span class=\"line\">    println(sum2(<span class=\"number\">1</span>)(<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum3</span></span>(a: <span class=\"type\">Int</span>)(b: <span class=\"type\">Int</span>) = a + b</span><br><span class=\"line\">    println(sum3(<span class=\"number\">1</span>)(<span class=\"number\">1</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ReturnDemo\"><a href=\"#ReturnDemo\" class=\"headerlink\" title=\"ReturnDemo\"></a>ReturnDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ReturnDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span>(name: <span class=\"type\">String</span>) = &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>): <span class=\"type\">String</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      sayHello(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(greeting(<span class=\"string\">&quot;Leo&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h2><h3 id=\"ListDemo\"><a href=\"#ListDemo\" class=\"headerlink\" title=\"ListDemo\"></a>ListDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ListDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span></span>(l: <span class=\"type\">List</span>[<span class=\"type\">Int</span>], prefix: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (l != <span class=\"type\">Nil</span>) &#123;</span><br><span class=\"line\">        print(prefix + l.head + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">        decorator(l.tail, prefix)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> l = <span class=\"type\">List</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    decorator(l, <span class=\"string\">&quot;#&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">#1 #2 #3 #4 #5 </span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"LinkedListDemo\"><a href=\"#LinkedListDemo\" class=\"headerlink\" title=\"LinkedListDemo\"></a>LinkedListDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">LinkedListDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\"><span class=\"comment\">//    val l = scala.collection.mutable.LinkedList(1, 2, 3, 4, 5)</span></span><br><span class=\"line\"><span class=\"comment\">//    var current = l</span></span><br><span class=\"line\"><span class=\"comment\">//    while (current != Nil) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//      current.elem = current.elem * 2</span></span><br><span class=\"line\"><span class=\"comment\">//      current = current.next</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    println(l.mkString(&quot;,&quot;))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> l = scala.collection.mutable.<span class=\"type\">LinkedList</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> current = l</span><br><span class=\"line\">    <span class=\"keyword\">var</span> first = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"type\">Nil</span> &amp;&amp; current.next != <span class=\"type\">Nil</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (first) &#123; current.elem = current.elem * <span class=\"number\">2</span>; first = <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">      current = current.next.next</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (current != <span class=\"type\">Nil</span>) current.elem = current.elem * <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(l.mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">2,2,6,4,10,6,14,8,18,10</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SetDemo\"><a href=\"#SetDemo\" class=\"headerlink\" title=\"SetDemo\"></a>SetDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SetDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s1 = <span class=\"keyword\">new</span> scala.collection.mutable.<span class=\"type\">HashSet</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">    s1 += <span class=\"number\">1</span>; s1 += <span class=\"number\">2</span>; s1 += <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> s2 = <span class=\"keyword\">new</span> scala.collection.mutable.<span class=\"type\">LinkedHashSet</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">    s2 += <span class=\"number\">1</span>; s2 += <span class=\"number\">2</span>; s2 += <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> s3 = scala.collection.mutable.<span class=\"type\">SortedSet</span>[<span class=\"type\">String</span>](<span class=\"string\">&quot;banana&quot;</span>, <span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;candy&quot;</span>)</span><br><span class=\"line\">    println(s1)</span><br><span class=\"line\">    println(s2)</span><br><span class=\"line\">    println(s3)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Set(1, 5, 2)</span><br><span class=\"line\">Set(1, 2, 5)</span><br><span class=\"line\">TreeSet(apple, banana, candy)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Generic\"><a href=\"#Generic\" class=\"headerlink\" title=\"Generic\"></a>Generic</h2><h3 id=\"GenericDemo\"><a href=\"#GenericDemo\" class=\"headerlink\" title=\"GenericDemo\"></a>GenericDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">GenericDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>[<span class=\"type\">T</span>](<span class=\"params\">val localId: <span class=\"type\">T</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getSchoolId</span></span>(hukouId: <span class=\"type\">T</span>) = <span class=\"string\">&quot;S-&quot;</span> + hukouId + <span class=\"string\">&quot;-&quot;</span> + localId</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leo = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>[<span class=\"type\">Int</span>](<span class=\"number\">111</span>)</span><br><span class=\"line\">    println(leo.getSchoolId(<span class=\"number\">100</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getCard</span></span>[<span class=\"type\">T</span>](content: <span class=\"type\">T</span>) = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (content.isInstanceOf[<span class=\"type\">Int</span>]) <span class=\"string\">&quot;card: 001, &quot;</span> + content</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (content.isInstanceOf[<span class=\"type\">String</span>]) <span class=\"string\">&quot;card: this is your card, &quot;</span> + content</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"string\">&quot;card: &quot;</span> + content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(getCard[<span class=\"type\">String</span>](<span class=\"string\">&quot;hello world&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">S-100-111</span><br><span class=\"line\">card: this is your card, hello world</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BoundsDemo\"><a href=\"#BoundsDemo\" class=\"headerlink\" title=\"BoundsDemo\"></a>BoundsDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BoundsDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= println(<span class=\"string\">&quot;Hello, I&#x27;m &quot;</span> + name)</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">        sayHello</span><br><span class=\"line\">        p.sayHello</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Party</span>[<span class=\"type\">T</span> &lt;: <span class=\"type\">Person</span>](<span class=\"params\">p1: <span class=\"type\">T</span>, p2: <span class=\"type\">T</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span> </span>= p1.makeFriends(p2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s1 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s2 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Party</span>[<span class=\"type\">Student</span>](s1, s2)</span><br><span class=\"line\">    p.play</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, I&#x27;m leo</span><br><span class=\"line\">Hello, I&#x27;m jack</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BoundsDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Father</span>(<span class=\"params\">name</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getIDCard</span></span>[<span class=\"type\">R</span> &gt;: <span class=\"type\">Child</span>](person: <span class=\"type\">R</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (person.getClass == classOf[<span class=\"type\">Child</span>]) println(<span class=\"string\">&quot;please tell us your parents&#x27; names.&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (person.getClass == classOf[<span class=\"type\">Father</span>]) println(<span class=\"string\">&quot;sign your name for your child&#x27;s id card.&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">else</span> println(<span class=\"string\">&quot;sorry, you are not allowed to get id card.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getIDCard[<span class=\"type\">Child</span>](<span class=\"keyword\">new</span> <span class=\"type\">Child</span>(<span class=\"string\">&quot;leo&quot;</span>))</span><br><span class=\"line\">    getIDCard[<span class=\"type\">Father</span>](<span class=\"keyword\">new</span> <span class=\"type\">Father</span>(<span class=\"string\">&quot;jack&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">please tell us your parents&#x27; names.</span><br><span class=\"line\">sign your name for your child&#x27;s id card.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BoundsDemoIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= println(<span class=\"string\">&quot;Hello, I&#x27;m &quot;</span> + name)</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">        sayHello</span><br><span class=\"line\">        p.sayHello</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) </span>&#123; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= println(<span class=\"string\">&quot;Wang Wang, I&#x27;m &quot;</span> + name) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">implicit</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dog2person</span></span>(dog: <span class=\"type\">Object</span>): <span class=\"type\">Person</span> = <span class=\"keyword\">if</span> (dog.isInstanceOf[<span class=\"type\">Dog</span>]) &#123; <span class=\"keyword\">val</span> _dog = dog.asInstanceOf[<span class=\"type\">Dog</span>]; <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(_dog.name ) &#125; <span class=\"keyword\">else</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Party</span>[<span class=\"type\">T</span> &lt;% <span class=\"type\">Person</span>](<span class=\"params\">p1: <span class=\"type\">T</span>, p2: <span class=\"type\">T</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span> </span>= p1.makeFriends(p2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> d = <span class=\"keyword\">new</span> <span class=\"type\">Dog</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Party</span>[<span class=\"type\">Person</span>](s, d)</span><br><span class=\"line\">    p.play</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, I&#x27;m leo</span><br><span class=\"line\">Hello, I&#x27;m jack</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BoundsDemoIV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span>[<span class=\"type\">T</span>: <span class=\"type\">Ordering</span>](<span class=\"params\">val number1: <span class=\"type\">T</span>, val number2: <span class=\"type\">T</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max</span></span>(<span class=\"keyword\">implicit</span> order: <span class=\"type\">Ordering</span>[<span class=\"type\">T</span>]) = <span class=\"keyword\">if</span> (order.compare(number1, number2) &gt; <span class=\"number\">0</span>) number1 <span class=\"keyword\">else</span> number2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> c = <span class=\"keyword\">new</span> <span class=\"type\">Calculator</span>[<span class=\"type\">Int</span>](<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    println(c.max)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">2</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BoundsDemoV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meat</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vegetable</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">packageFood</span></span>[<span class=\"type\">T</span>: <span class=\"type\">Manifest</span>](food: <span class=\"type\">T</span>*) = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> foodPackage = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">T</span>](food.length)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until food.length) foodPackage(i) = food(i)</span><br><span class=\"line\">      foodPackage</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> gongbaojiding = <span class=\"keyword\">new</span> <span class=\"type\">Meat</span>(<span class=\"string\">&quot;gongbaojiding&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> yuxiangrousi = <span class=\"keyword\">new</span> <span class=\"type\">Meat</span>(<span class=\"string\">&quot;yuxiangrousi&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> shousiyangpai = <span class=\"keyword\">new</span> <span class=\"type\">Meat</span>(<span class=\"string\">&quot;shousiyangpai&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> meatPackage = packageFood(gongbaojiding, yuxiangrousi, shousiyangpai)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> qingcai = <span class=\"keyword\">new</span> <span class=\"type\">Vegetable</span>(<span class=\"string\">&quot;qingcai&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> baicai = <span class=\"keyword\">new</span> <span class=\"type\">Vegetable</span>(<span class=\"string\">&quot;baicai&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> huanggua = <span class=\"keyword\">new</span> <span class=\"type\">Vegetable</span>(<span class=\"string\">&quot;huanggua&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> vegetablePackage = packageFood(qingcai, baicai, huanggua)</span><br><span class=\"line\">    println(meatPackage)</span><br><span class=\"line\">    println(vegetablePackage)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">[Lbasic.BoundsDemoV$Meat$1;@e580929</span><br><span class=\"line\">[Lbasic.BoundsDemoV$Vegetable$1;@1cd072a9</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ContravariantDemo\"><a href=\"#ContravariantDemo\" class=\"headerlink\" title=\"ContravariantDemo\"></a>ContravariantDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ContravariantDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Master</span></span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Professional</span> <span class=\"keyword\">extends</span> <span class=\"title\">Master</span></span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Card</span>[-<span class=\"type\">T</span>](<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">enterMeet</span></span>(card: <span class=\"type\">Card</span>[<span class=\"type\">Professional</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;welcom to have this meeting!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    enterMeet(<span class=\"keyword\">new</span> <span class=\"type\">Card</span>[<span class=\"type\">Professional</span>](<span class=\"string\">&quot;leo&quot;</span>))</span><br><span class=\"line\">    enterMeet(<span class=\"keyword\">new</span> <span class=\"type\">Card</span>[<span class=\"type\">Master</span>](<span class=\"string\">&quot;jack&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">welcom to have this meeting!</span><br><span class=\"line\">welcom to have this meeting!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CovariantDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Master</span></span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Professional</span> <span class=\"keyword\">extends</span> <span class=\"title\">Master</span></span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Card</span>[+<span class=\"type\">T</span>](<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">enterMeet</span></span>(card: <span class=\"type\">Card</span>[<span class=\"type\">Master</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;welcom to have this meeting!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    enterMeet(<span class=\"keyword\">new</span> <span class=\"type\">Card</span>[<span class=\"type\">Master</span>](<span class=\"string\">&quot;leo&quot;</span>))</span><br><span class=\"line\">    enterMeet(<span class=\"keyword\">new</span> <span class=\"type\">Card</span>[<span class=\"type\">Professional</span>](<span class=\"string\">&quot;jack&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">welcom to have this meeting!</span><br><span class=\"line\">welcom to have this meeting!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Implicit-Conversion\"><a href=\"#Implicit-Conversion\" class=\"headerlink\" title=\"Implicit Conversion\"></a>Implicit Conversion</h2><h3 id=\"ImplicitConversionDemo\"><a href=\"#ImplicitConversionDemo\" class=\"headerlink\" title=\"ImplicitConversionDemo\"></a>ImplicitConversionDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ImplicitConversionDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpecialPerson</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Older</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">implicit</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">object2SpecialPerson</span></span>(obj: <span class=\"type\">Object</span>): <span class=\"type\">SpecialPerson</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj.getClass == classOf[<span class=\"type\">Student</span>]) &#123; <span class=\"keyword\">val</span> stu = obj.asInstanceOf[<span class=\"type\">Student</span>]; <span class=\"keyword\">new</span> <span class=\"type\">SpecialPerson</span>(stu.name) &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj.getClass == classOf[<span class=\"type\">Older</span>]) &#123; <span class=\"keyword\">val</span> older = obj.asInstanceOf[<span class=\"type\">Older</span>]; <span class=\"keyword\">new</span> <span class=\"type\">SpecialPerson</span>(older.name) &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ticketNumber = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buySpecialTicket</span></span>(p: <span class=\"type\">SpecialPerson</span>) = &#123;</span><br><span class=\"line\">      ticketNumber += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"string\">&quot;T-&quot;</span> + ticketNumber</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    println(buySpecialTicket(s))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> o = <span class=\"keyword\">new</span> <span class=\"type\">Older</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    println(buySpecialTicket(o))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> t = <span class=\"keyword\">new</span> <span class=\"type\">Teacher</span>(<span class=\"string\">&quot;tom&quot;</span>)</span><br><span class=\"line\">    println(buySpecialTicket(t))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">T-1</span><br><span class=\"line\">T-2</span><br><span class=\"line\">T-3</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ImplicitConversionDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Superman</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">emitLaser</span> </span>= println(<span class=\"string\">&quot;emit a laster!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">implicit</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">man2supername</span></span>(man: <span class=\"type\">Man</span>): <span class=\"type\">Superman</span> = <span class=\"keyword\">new</span> <span class=\"type\">Superman</span>(man.name)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leo = <span class=\"keyword\">new</span> <span class=\"type\">Man</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    leo.emitLaser</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">emit a laster!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ImplicitConversionDemoIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpecialPerson</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Older</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">implicit</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">object2SpecialPerson</span></span>(obj: <span class=\"type\">Object</span>): <span class=\"type\">SpecialPerson</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj.getClass == classOf[<span class=\"type\">Student</span>]) &#123; <span class=\"keyword\">val</span> stu = obj.asInstanceOf[<span class=\"type\">Student</span>]; <span class=\"keyword\">new</span> <span class=\"type\">SpecialPerson</span>(stu.name) &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj.getClass == classOf[<span class=\"type\">Older</span>]) &#123; <span class=\"keyword\">val</span> older = obj.asInstanceOf[<span class=\"type\">Older</span>]; <span class=\"keyword\">new</span> <span class=\"type\">SpecialPerson</span>(older.name) &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketHouse</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ticketNumber = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buySpecialTicket</span></span>(p: <span class=\"type\">SpecialPerson</span>) = &#123;</span><br><span class=\"line\">        ticketNumber += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"string\">&quot;T-&quot;</span> + ticketNumber</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> th = <span class=\"keyword\">new</span> <span class=\"type\">TicketHouse</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    println(th.buySpecialTicket(s))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> o = <span class=\"keyword\">new</span> <span class=\"type\">Older</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    println(th.buySpecialTicket(o))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> t = <span class=\"keyword\">new</span> <span class=\"type\">Teacher</span>(<span class=\"string\">&quot;tom&quot;</span>)</span><br><span class=\"line\">    println(th.buySpecialTicket(t))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">T-1</span><br><span class=\"line\">T-2</span><br><span class=\"line\">T-3</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ImplicitParameterDemo\"><a href=\"#ImplicitParameterDemo\" class=\"headerlink\" title=\"ImplicitParameterDemo\"></a>ImplicitParameterDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ImplicitParameterDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SignPen</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span></span>(content: <span class=\"type\">String</span>) = println(content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">implicit</span> <span class=\"keyword\">val</span> signPen = <span class=\"keyword\">new</span> <span class=\"type\">SignPen</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">signForExam</span></span>(name: <span class=\"type\">String</span>)(<span class=\"keyword\">implicit</span> signPen: <span class=\"type\">SignPen</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      signPen.write(name + <span class=\"string\">&quot; come to exam in time.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    signForExam(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">leo come to exam in time.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Actor\"><a href=\"#Actor\" class=\"headerlink\" title=\"Actor\"></a>Actor</h2><h3 id=\"ActorDemo\"><a href=\"#ActorDemo\" class=\"headerlink\" title=\"ActorDemo\"></a>ActorDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scala.actors.<span class=\"type\">Actor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ActorDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> helloActor = <span class=\"keyword\">new</span> <span class=\"type\">HelloActor</span></span><br><span class=\"line\">    helloActor.start()</span><br><span class=\"line\">    helloActor ! <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloActor</span> <span class=\"keyword\">extends</span> <span class=\"title\">Actor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">act</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        receive &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> name: <span class=\"type\">String</span> =&gt; println(<span class=\"string\">&quot;Hello, &quot;</span> + name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scala.actors.<span class=\"type\">Actor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ActorDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> userManageActor = <span class=\"keyword\">new</span> <span class=\"type\">UserManageActor</span></span><br><span class=\"line\">    userManageActor.start()</span><br><span class=\"line\">    userManageActor ! <span class=\"type\">Login</span>(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"string\">&quot;1234&quot;</span>)</span><br><span class=\"line\">    userManageActor ! <span class=\"type\">Register</span>(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"string\">&quot;1234&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span>(<span class=\"params\">username: <span class=\"type\">String</span>, password: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Register</span>(<span class=\"params\">username: <span class=\"type\">String</span>, password: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserManageActor</span> <span class=\"keyword\">extends</span> <span class=\"title\">Actor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">act</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        receive &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"type\">Login</span>(username, password) =&gt; println(<span class=\"string\">&quot;login, username is &quot;</span> + username + <span class=\"string\">&quot;, password is &quot;</span> + password)</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"type\">Register</span>(username, password) =&gt; println(<span class=\"string\">&quot;register, username is &quot;</span> + username + <span class=\"string\">&quot;, password is &quot;</span> + password)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">login, username is leo, password is 1234</span><br><span class=\"line\">register, username is leo, password is 1234</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scala.actors.<span class=\"type\">Actor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ActorDemoIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leoTelephoneActor = <span class=\"keyword\">new</span> <span class=\"type\">LeoTelephoneActor</span></span><br><span class=\"line\">    leoTelephoneActor.start()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> jackTelephoneActor = <span class=\"keyword\">new</span> <span class=\"type\">JackTelephoneActor</span>(leoTelephoneActor)</span><br><span class=\"line\">    jackTelephoneActor.start()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Message</span>(<span class=\"params\">content: <span class=\"type\">String</span>, sender: <span class=\"type\">Actor</span></span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeoTelephoneActor</span> <span class=\"keyword\">extends</span> <span class=\"title\">Actor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">act</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        receive &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"type\">Message</span>(content, sender) =&gt; &#123; println(<span class=\"string\">&quot;leo telephone: &quot;</span> + content); sender ! <span class=\"string\">&quot;I&#x27;m leo, please call me after 10 minutes.&quot;</span> &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JackTelephoneActor</span>(<span class=\"params\">val leoTelephoneActor: <span class=\"type\">Actor</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Actor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">act</span></span>() &#123;</span><br><span class=\"line\">      leoTelephoneActor ! <span class=\"type\">Message</span>(<span class=\"string\">&quot;Hello, Leo, I&#x27;m Jack&quot;</span>, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">      receive &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> response: <span class=\"type\">String</span> =&gt; println(<span class=\"string\">&quot;jack telephone: &quot;</span> + response)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">leo telephone: Hello, Leo, I&#x27;m Jack</span><br><span class=\"line\">jack telephone: I&#x27;m leo, please call me after 10 minutes.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Scala快速入门</p>\n<h2 id=\"Scala官网\"><a href=\"#Scala官网\" class=\"headerlink\" title=\"Scala官网\"></a>Scala官网</h2><ul>\n<li><a href=\"https://www.scala-lang.org/\">Scala官网</a></li>\n<li><a href=\"https://docs.scala-lang.org/getting-started-intellij-track/getting-started-with-scala-in-intellij.html\">Scala安装指南</a></li>\n<li><a href=\"https://docs.scala-lang.org/tour/tour-of-scala.html\">Scala入门指南</a></li>\n</ul>\n<h2 id=\"Scala基础\"><a href=\"#Scala基础\" class=\"headerlink\" title=\"Scala基础\"></a>Scala基础</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"number\">1</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">    println((<span class=\"number\">1</span> + <span class=\"number\">1</span>) * <span class=\"number\">2.0</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;hello&quot;</span>.toCharArray)</span><br><span class=\"line\">    println(((<span class=\"number\">1</span> + <span class=\"number\">1</span>) * <span class=\"number\">2.0</span>).toString)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;hello&quot;</span>.toUpperCase)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;HELLO&quot;</span>.toLowerCase)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">2</span><br><span class=\"line\">4.0</span><br><span class=\"line\">[C@11531931</span><br><span class=\"line\">4.0</span><br><span class=\"line\">HELLO</span><br><span class=\"line\">hello</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> r = <span class=\"number\">1</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    println(<span class=\"number\">2</span> * r)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>; a = <span class=\"number\">2</span></span><br><span class=\"line\">    println(a)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> n: <span class=\"type\">String</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> m: <span class=\"type\">Any</span> = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> n1, n2: <span class=\"type\">String</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> m1, m2 = <span class=\"number\">100</span></span><br><span class=\"line\">    println(n)</span><br><span class=\"line\">    println(m)</span><br><span class=\"line\">    println(n1)</span><br><span class=\"line\">    println(n2)</span><br><span class=\"line\">    println(m1)</span><br><span class=\"line\">    println(m2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">4</span><br><span class=\"line\">2</span><br><span class=\"line\">null</span><br><span class=\"line\">leo</span><br><span class=\"line\">null</span><br><span class=\"line\">null</span><br><span class=\"line\">100</span><br><span class=\"line\">100</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"number\">1.</span>toString)</span><br><span class=\"line\">    println(<span class=\"number\">1.</span>to(<span class=\"number\">10</span>))</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello&quot;</span>.intersect(<span class=\"string\">&quot;World&quot;</span>))</span><br><span class=\"line\">    println(<span class=\"number\">1</span> + <span class=\"number\">1</span>)</span><br><span class=\"line\">    println(<span class=\"number\">1.</span>+(<span class=\"number\">1</span>))</span><br><span class=\"line\">    println(<span class=\"number\">1</span> to <span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> counter = <span class=\"number\">1</span>; counter += <span class=\"number\">1</span></span><br><span class=\"line\">    println(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">1</span><br><span class=\"line\">Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class=\"line\">lo</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class=\"line\">2</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.math._</span><br><span class=\"line\">    println(sqrt(<span class=\"number\">2</span>))</span><br><span class=\"line\">    println(pow(<span class=\"number\">2</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">    println(min(<span class=\"number\">3</span>, <span class=\"type\">Pi</span>))</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello World&quot;</span>.distinct)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello World&quot;</span>(<span class=\"number\">6</span>))</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello World&quot;</span>.apply(<span class=\"number\">6</span>))</span><br><span class=\"line\">    println(<span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">    println(<span class=\"type\">Array</span>.apply(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">1.4142135623730951</span><br><span class=\"line\">16.0</span><br><span class=\"line\">3.0</span><br><span class=\"line\">Helo Wrd</span><br><span class=\"line\">W</span><br><span class=\"line\">W</span><br><span class=\"line\">[I@6442b0a6</span><br><span class=\"line\">[I@60f82f98</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"number\">30</span></span><br><span class=\"line\">    println(<span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> isAdult1 = <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">    println(isAdult1)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isAdult2 = <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) isAdult2 = <span class=\"number\">1</span> <span class=\"keyword\">else</span> isAdult2 = <span class=\"number\">0</span></span><br><span class=\"line\">    println(isAdult2)</span><br><span class=\"line\">    println(<span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) <span class=\"string\">&quot;adult&quot;</span> <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    age = <span class=\"number\">12</span></span><br><span class=\"line\">    println(<span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) <span class=\"string\">&quot;adult&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) <span class=\"string\">&quot;adult&quot;</span> <span class=\"keyword\">else</span> ())</span><br><span class=\"line\">    println(<span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) <span class=\"string\">&quot;adult&quot;</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">12</span>) <span class=\"string\">&quot;teenager&quot;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;children&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">adult</span><br><span class=\"line\">()</span><br><span class=\"line\">()</span><br><span class=\"line\">children</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x, y, z = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">10</span>) &#123; y = y + <span class=\"number\">1</span>; z = z + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    println(x, y, z)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      y = y + <span class=\"number\">1</span></span><br><span class=\"line\">      z = z + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(x, y, z)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> w = <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">10</span>) &#123; y = y + <span class=\"number\">1</span>; z + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    println(x, y, z, w)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">(0,1,1)</span><br><span class=\"line\">(0,2,2)</span><br><span class=\"line\">(0,3,2,3)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    print(<span class=\"string\">&quot;Hello World&quot;</span>); println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">    printf(<span class=\"string\">&quot;Hi, my name is %s, I&#x27;m %d years old.\\n&quot;</span>, <span class=\"string\">&quot;Leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello WorldHello World</span><br><span class=\"line\">Hi, my name is Leo, I&#x27;m 30 years old.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.io.<span class=\"type\">StdIn</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> name = <span class=\"type\">StdIn</span>.readLine(<span class=\"string\">&quot;Welcome to Game House. Please tell me your name: &quot;</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&quot;Thanks. Then please tell me your age: &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> age = <span class=\"type\">StdIn</span>.readInt()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">      printf(<span class=\"string\">&quot;Hi, %s, you are %d years old, so you are legal to come here!&quot;</span>, name, age)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      printf(<span class=\"string\">&quot;Sorry, boy, %s, you are only %d years old. you are illegal to come here!&quot;</span>, name, age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Welcome to Game House. Please tell me your name: leo</span><br><span class=\"line\">Thanks. Then please tell me your age: 20</span><br><span class=\"line\">Hi, leo, you are 20 years old, so you are legal to come here!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"number\">1</span> + <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"number\">1.</span>toString + <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      print(n + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">      n -= <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    n = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to n) print(i + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> until n) print(i + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.util.control.<span class=\"type\">Breaks</span>._</span><br><span class=\"line\">    breakable &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> n = <span class=\"number\">10</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (c &lt;- <span class=\"string\">&quot;Hello World&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">5</span>) <span class=\"keyword\">break</span></span><br><span class=\"line\">        print(c)</span><br><span class=\"line\">        n -= <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">10 9 8 7 6 5 4 3 2 1 </span><br><span class=\"line\">1 2 3 4 5 </span><br><span class=\"line\">1 2 3 4 </span><br><span class=\"line\">Hello</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">9</span>; j &lt;- <span class=\"number\">1</span> to i) &#123;</span><br><span class=\"line\">      print(j + <span class=\"string\">&quot; * &quot;</span> + i + <span class=\"string\">&quot; = &quot;</span> + i * j + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i == j) println()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">1 * 1 = 1 </span><br><span class=\"line\">1 * 2 = 2 2 * 2 = 4 </span><br><span class=\"line\">1 * 3 = 3 2 * 3 = 6 3 * 3 = 9 </span><br><span class=\"line\">1 * 4 = 4 2 * 4 = 8 3 * 4 = 12 4 * 4 = 16 </span><br><span class=\"line\">1 * 5 = 5 2 * 5 = 10 3 * 5 = 15 4 * 5 = 20 5 * 5 = 25 </span><br><span class=\"line\">1 * 6 = 6 2 * 6 = 12 3 * 6 = 18 4 * 6 = 24 5 * 6 = 30 6 * 6 = 36 </span><br><span class=\"line\">1 * 7 = 7 2 * 7 = 14 3 * 7 = 21 4 * 7 = 28 5 * 7 = 35 6 * 7 = 42 7 * 7 = 49 </span><br><span class=\"line\">1 * 8 = 8 2 * 8 = 16 3 * 8 = 24 4 * 8 = 32 5 * 8 = 40 6 * 8 = 48 7 * 8 = 56 8 * 8 = 64 </span><br><span class=\"line\">1 * 9 = 9 2 * 9 = 18 3 * 9 = 27 4 * 9 = 36 5 * 9 = 45 6 * 9 = 54 7 * 9 = 63 8 * 9 = 72 9 * 9 = 81 </span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BasicDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span> <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) print(i + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">val</span> v = <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span>) <span class=\"keyword\">yield</span> i</span><br><span class=\"line\">    println(v)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- v) &#123;</span><br><span class=\"line\">      print(i + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">2 4 6 8 10 Vector(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class=\"line\">1 2 3 4 5 6 7 8 9 10 </span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Scala函数\"><a href=\"#Scala函数\" class=\"headerlink\" title=\"Scala函数\"></a>Scala函数</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span>) = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">18</span>) &#123; printf(<span class=\"string\">&quot;Hi %s, you are a big boy\\n&quot;</span>, name); age &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123; printf(<span class=\"string\">&quot;Hi %s, you are a little boy\\n&quot;</span>, name); age &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sayHello(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hi leo, you are a big boy</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>) = println(<span class=\"string\">&quot;Hello, &quot;</span> + name)</span><br><span class=\"line\">    sayHello(<span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span></span>(n: <span class=\"type\">Int</span>) = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to n) sum += i</span><br><span class=\"line\">      sum</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(sum(<span class=\"number\">100</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">5050</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fab</span></span>(n: <span class=\"type\">Int</span>): <span class=\"type\">Int</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> fab(n - <span class=\"number\">1</span>) + fab(n - <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(fab(<span class=\"number\">5</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">8</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(firstName: <span class=\"type\">String</span>, middleName: <span class=\"type\">String</span> = <span class=\"string\">&quot;William&quot;</span>, lastName: <span class=\"type\">String</span> = <span class=\"string\">&quot;Croft&quot;</span>) = firstName + <span class=\"string\">&quot; &quot;</span> + middleName + <span class=\"string\">&quot; &quot;</span> + lastName</span><br><span class=\"line\">    println(sayHello(<span class=\"string\">&quot;Leo&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Leo William Croft</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(firstName: <span class=\"type\">String</span>, middleName: <span class=\"type\">String</span>, lastName: <span class=\"type\">String</span>) = firstName + <span class=\"string\">&quot; &quot;</span> + middleName + <span class=\"string\">&quot; &quot;</span> + lastName</span><br><span class=\"line\">    println(sayHello(firstName = <span class=\"string\">&quot;Mick&quot;</span>, lastName = <span class=\"string\">&quot;Nina&quot;</span>, middleName = <span class=\"string\">&quot;Jack&quot;</span>))</span><br><span class=\"line\">    println(sayHello(<span class=\"string\">&quot;Mick&quot;</span>, middleName = <span class=\"string\">&quot;Jack&quot;</span>, lastName = <span class=\"string\">&quot;Nina&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Mick Jack Nina</span><br><span class=\"line\">Mick Jack Nina</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span> = <span class=\"number\">20</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;Hello, &quot;</span> + name + <span class=\"string\">&quot;, your age is &quot;</span> + age)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sayHello(<span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo, your age is 20</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span></span>(nums: <span class=\"type\">Int</span>*) = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (num &lt;- nums) res += num</span><br><span class=\"line\">      res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">15</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span></span>(nums: <span class=\"type\">Int</span>*): <span class=\"type\">Int</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span>) <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> nums.head + sum(nums.tail: _*)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(sum(<span class=\"number\">1</span> to <span class=\"number\">5</span>: _*))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">15</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello1</span></span>(name: <span class=\"type\">String</span>) = <span class=\"string\">&quot;Hello, &quot;</span> + name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello2</span></span>(name: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      print(<span class=\"string\">&quot;Hello, &quot;</span> + name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(sayHello1(<span class=\"string\">&quot;Leo&quot;</span>))</span><br><span class=\"line\">    sayHello2(<span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.io.<span class=\"type\">Source</span>._</span><br><span class=\"line\">    <span class=\"comment\">// 即使文件不存在，也不会报错，只有第一个使用变量时会报错，证明了表达式计算的lazy特性。</span></span><br><span class=\"line\">    <span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> lines = fromFile(<span class=\"string\">&quot;spark.txt&quot;</span>).mkString</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\"></span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> java.io._</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">IllegalArgumentException</span>(<span class=\"string\">&quot;x should not be negative&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> _: <span class=\"type\">IllegalArgumentException</span> =&gt; println(<span class=\"string\">&quot;Illegal Argument!&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;Release Resources!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">IOException</span>(<span class=\"string\">&quot;User Defined Exception&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> e1: <span class=\"type\">IllegalArgumentException</span> =&gt; println(<span class=\"string\">&quot;Illegal Argument!&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> e2: <span class=\"type\">IOException</span> =&gt; println(<span class=\"string\">&quot;IO Exception!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Illegal Argument!</span><br><span class=\"line\">Release Resources!</span><br><span class=\"line\">IO Exception!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array、ArrayBuffer\"><a href=\"#Array、ArrayBuffer\" class=\"headerlink\" title=\"Array、ArrayBuffer\"></a>Array、ArrayBuffer</h2><h3 id=\"ArrayDemo\"><a href=\"#ArrayDemo\" class=\"headerlink\" title=\"ArrayDemo\"></a>ArrayDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ArrayDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> a = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">Int</span>](<span class=\"number\">10</span>)</span><br><span class=\"line\">    println(a(<span class=\"number\">0</span>))</span><br><span class=\"line\">    a(<span class=\"number\">0</span>) = <span class=\"number\">1</span></span><br><span class=\"line\">    println(a)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> b = <span class=\"type\">Array</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">    b(<span class=\"number\">0</span>) = <span class=\"string\">&quot;hi&quot;</span></span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> c = <span class=\"type\">Array</span>(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">    println(c)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> d = <span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until d.length) &#123;</span><br><span class=\"line\">      print(d(i) + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until (d.length, <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">      print(d(i) + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- (<span class=\"number\">0</span> until d.length).reverse) &#123;</span><br><span class=\"line\">      print(d(i) + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- d) &#123;</span><br><span class=\"line\">      print(i + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> e = <span class=\"type\">Array</span>(<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = e.sum</span><br><span class=\"line\">    <span class=\"keyword\">val</span> m = e.max</span><br><span class=\"line\">    println(<span class=\"string\">&quot;sum -&gt; &quot;</span> + s)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;max -&gt; &quot;</span> + m)</span><br><span class=\"line\">    scala.util.<span class=\"type\">Sorting</span>.quickSort(e)</span><br><span class=\"line\">    println(e.mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    println(e.mkString(<span class=\"string\">&quot;&lt;&quot;</span>, <span class=\"string\">&quot;,&quot;</span>, <span class=\"string\">&quot;&gt;&quot;</span>))</span><br><span class=\"line\">    println(e.toString)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">0</span><br><span class=\"line\">[I@11531931</span><br><span class=\"line\">[Ljava.lang.String;@5e025e70</span><br><span class=\"line\">[Ljava.lang.Object;@48140564</span><br><span class=\"line\">1 2 3 4 5 </span><br><span class=\"line\">1 3 5 </span><br><span class=\"line\">5 4 3 2 1 </span><br><span class=\"line\">1 2 3 4 5 </span><br><span class=\"line\">sum -&gt; 15</span><br><span class=\"line\">max -&gt; 5</span><br><span class=\"line\">1,2,3,4,5</span><br><span class=\"line\">&lt;1,2,3,4,5&gt;</span><br><span class=\"line\">[I@6b2fad11</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ArrayBufferDemo\"><a href=\"#ArrayBufferDemo\" class=\"headerlink\" title=\"ArrayBufferDemo\"></a>ArrayBufferDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ArrayBufferDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> b = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">    b += <span class=\"number\">1</span></span><br><span class=\"line\">    b += (<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    b ++= <span class=\"type\">Array</span>(<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    b.trimEnd(<span class=\"number\">5</span>)</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    b.insert(<span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    b.insert(<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    b.remove(<span class=\"number\">1</span>)</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    b.remove(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    println(b)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> a = b.toArray</span><br><span class=\"line\">    println(a)</span><br><span class=\"line\">    println(a.toBuffer)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class=\"line\">ArrayBuffer(1, 2, 3, 4, 5)</span><br><span class=\"line\">ArrayBuffer(1, 2, 3, 4, 5, 6)</span><br><span class=\"line\">ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class=\"line\">ArrayBuffer(1, 3, 4, 5, 6, 7, 8, 9, 10)</span><br><span class=\"line\">ArrayBuffer(1, 6, 7, 8, 9, 10)</span><br><span class=\"line\">[I@380fb434</span><br><span class=\"line\">ArrayBuffer(1, 6, 7, 8, 9, 10)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ArrayBufferDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> a = <span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> b = <span class=\"keyword\">for</span> (e &lt;- a) <span class=\"keyword\">yield</span> e * e</span><br><span class=\"line\">    println(b.mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> c = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">    c += (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> d = <span class=\"keyword\">for</span> (e &lt;- c) <span class=\"keyword\">yield</span> e * e</span><br><span class=\"line\">    println(d.mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> e = <span class=\"keyword\">for</span> (e &lt;- c <span class=\"keyword\">if</span> e %<span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">yield</span> e * e</span><br><span class=\"line\">    println(a.filter(_ % <span class=\"number\">2</span> == <span class=\"number\">0</span>).map(<span class=\"number\">2</span> * _).mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    println(a.filter &#123; _ % <span class=\"number\">2</span> == <span class=\"number\">0</span> &#125; map &#123; <span class=\"number\">2</span> * _ &#125; mkString &#123; <span class=\"string\">&quot;,&quot;</span> &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">1,4,9,16,25</span><br><span class=\"line\">1,4,9,16,25</span><br><span class=\"line\">4,8</span><br><span class=\"line\">4,8</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ArrayBufferDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> a = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">     a += (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">-1</span>, <span class=\"number\">-3</span>, <span class=\"number\">-5</span>, <span class=\"number\">-9</span>)</span><br><span class=\"line\">     <span class=\"keyword\">var</span> foundFirstNegative = <span class=\"literal\">false</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> arrayLength = a.length</span><br><span class=\"line\">     <span class=\"keyword\">var</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">     <span class=\"keyword\">while</span> (index &lt; arrayLength) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (a(index) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         index += <span class=\"number\">1</span></span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!foundFirstNegative) &#123; foundFirstNegative = <span class=\"literal\">true</span>; index += <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span> &#123; a.remove(index); arrayLength -= <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     println(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">ArrayBuffer(1, 2, 3, 4, 5, -1)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ArrayBufferDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> a = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">    a += (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">-1</span>, <span class=\"number\">-3</span>, <span class=\"number\">-5</span>, <span class=\"number\">-9</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foundFirstNegative = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> keepIndexes = <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until a.length <span class=\"keyword\">if</span> !foundFirstNegative || a(i) &gt;= <span class=\"number\">0</span>) <span class=\"keyword\">yield</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a(i) &lt; <span class=\"number\">0</span>) foundFirstNegative = <span class=\"literal\">true</span></span><br><span class=\"line\">      i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until keepIndexes.length) &#123; a(i) = a(keepIndexes(i)) &#125;</span><br><span class=\"line\">    a.trimEnd(a.length - keepIndexes.length)</span><br><span class=\"line\">    println(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">ArrayBuffer(1, 2, 3, 4, 5, -1)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Map、Tuple\"><a href=\"#Map、Tuple\" class=\"headerlink\" title=\"Map、Tuple\"></a>Map、Tuple</h2><h3 id=\"MapDemo\"><a href=\"#MapDemo\" class=\"headerlink\" title=\"MapDemo\"></a>MapDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">MapDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages1 = <span class=\"type\">Map</span>(<span class=\"string\">&quot;Leo&quot;</span> -&gt; <span class=\"number\">30</span>, <span class=\"string\">&quot;Jen&quot;</span> -&gt; <span class=\"number\">25</span>, <span class=\"string\">&quot;Jack&quot;</span> -&gt; <span class=\"number\">23</span>)</span><br><span class=\"line\">    <span class=\"comment\">//ages1(&quot;Leo&quot;) = 31</span></span><br><span class=\"line\">    println(ages1)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages2 = scala.collection.mutable.<span class=\"type\">Map</span>(<span class=\"string\">&quot;Leo&quot;</span> -&gt; <span class=\"number\">30</span>, <span class=\"string\">&quot;Jen&quot;</span> -&gt; <span class=\"number\">25</span>, <span class=\"string\">&quot;Jack&quot;</span> -&gt; <span class=\"number\">23</span>)</span><br><span class=\"line\">    ages2(<span class=\"string\">&quot;Leo&quot;</span>) = <span class=\"number\">31</span></span><br><span class=\"line\">    println(ages2)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages3 = <span class=\"type\">Map</span>((<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"number\">30</span>), (<span class=\"string\">&quot;Jen&quot;</span>, <span class=\"number\">25</span>), (<span class=\"string\">&quot;Jack&quot;</span>, <span class=\"number\">23</span>))</span><br><span class=\"line\">    println(ages3)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages4 = <span class=\"keyword\">new</span> scala.collection.mutable.<span class=\"type\">HashMap</span>[<span class=\"type\">String</span>, <span class=\"type\">Int</span>]</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leoAge1 = ages1(<span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leoAge2 = <span class=\"keyword\">if</span> (ages1.contains(<span class=\"string\">&quot;leo&quot;</span>)) ages1(<span class=\"string\">&quot;leo&quot;</span>) <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> leoAge3 = ages1.getOrElse(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    println(leoAge1, leoAge2, leoAge3)</span><br><span class=\"line\">    ages4(<span class=\"string\">&quot;Leo&quot;</span>) = <span class=\"number\">31</span></span><br><span class=\"line\">    ages4 += (<span class=\"string\">&quot;Mike&quot;</span> -&gt; <span class=\"number\">35</span>, <span class=\"string\">&quot;Tom&quot;</span> -&gt; <span class=\"number\">40</span>)</span><br><span class=\"line\">    ages4 -= <span class=\"string\">&quot;Mike&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages5 = ages1 + (<span class=\"string\">&quot;Mike&quot;</span> -&gt; <span class=\"number\">36</span>, <span class=\"string\">&quot;Tom&quot;</span> -&gt; <span class=\"number\">40</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages6 = ages5 - <span class=\"string\">&quot;Tom&quot;</span></span><br><span class=\"line\">    println(ages4)</span><br><span class=\"line\">    println(ages5)</span><br><span class=\"line\">    println(ages6)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ((key, value) &lt;- ages1) println(key + <span class=\"string\">&quot; &quot;</span> + value)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key &lt;- ages1.keySet) println(key)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (value &lt;- ages1.values) println(value)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages7 = <span class=\"keyword\">for</span> ((key, value) &lt;- ages1) <span class=\"keyword\">yield</span> (value, key)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ((k, v) &lt;- ages7) println(k, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Map(Leo -&gt; 30, Jen -&gt; 25, Jack -&gt; 23)</span><br><span class=\"line\">Map(Jen -&gt; 25, Jack -&gt; 23, Leo -&gt; 31)</span><br><span class=\"line\">Map(Leo -&gt; 30, Jen -&gt; 25, Jack -&gt; 23)</span><br><span class=\"line\">(30,0,0)</span><br><span class=\"line\">Map(Tom -&gt; 40, Leo -&gt; 31)</span><br><span class=\"line\">Map(Mike -&gt; 36, Tom -&gt; 40, Leo -&gt; 30, Jack -&gt; 23, Jen -&gt; 25)</span><br><span class=\"line\">Map(Mike -&gt; 36, Leo -&gt; 30, Jack -&gt; 23, Jen -&gt; 25)</span><br><span class=\"line\">Leo 30</span><br><span class=\"line\">Jen 25</span><br><span class=\"line\">Jack 23</span><br><span class=\"line\">Leo</span><br><span class=\"line\">Jen</span><br><span class=\"line\">Jack</span><br><span class=\"line\">30</span><br><span class=\"line\">25</span><br><span class=\"line\">23</span><br><span class=\"line\">(30,Leo)</span><br><span class=\"line\">(25,Jen)</span><br><span class=\"line\">(23,Jack)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TupleDemo\"><a href=\"#TupleDemo\" class=\"headerlink\" title=\"TupleDemo\"></a>TupleDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TupleDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> t = (<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">    println(t._1, t._2)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> names = <span class=\"type\">Array</span>(<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>, <span class=\"string\">&quot;Mike&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages = <span class=\"type\">Array</span>(<span class=\"number\">30</span>, <span class=\"number\">24</span>, <span class=\"number\">26</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> nameAges = names.zip(ages)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ((name, age) &lt;- nameAges) println(name + <span class=\"string\">&quot; -&gt; &quot;</span> + age)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">(Leo,30)</span><br><span class=\"line\">Leo -&gt; 30</span><br><span class=\"line\">Jack -&gt; 24</span><br><span class=\"line\">Mike -&gt; 26</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SortedMap、LinkedHashMap\"><a href=\"#SortedMap、LinkedHashMap\" class=\"headerlink\" title=\"SortedMap、LinkedHashMap\"></a>SortedMap、LinkedHashMap</h2><h3 id=\"SortedMapDemo\"><a href=\"#SortedMapDemo\" class=\"headerlink\" title=\"SortedMapDemo\"></a>SortedMapDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SortedMapDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages = scala.collection.immutable.<span class=\"type\">SortedMap</span>(<span class=\"string\">&quot;Leo&quot;</span> -&gt; <span class=\"number\">30</span>, <span class=\"string\">&quot;Alice&quot;</span> -&gt; <span class=\"number\">15</span>, <span class=\"string\">&quot;Jen&quot;</span> -&gt; <span class=\"number\">25</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ((k, v) &lt;- ages) println(k, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">(Alice,15)</span><br><span class=\"line\">(Jen,25)</span><br><span class=\"line\">(Leo,30)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"LinkedHashMapDemo\"><a href=\"#LinkedHashMapDemo\" class=\"headerlink\" title=\"LinkedHashMapDemo\"></a>LinkedHashMapDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">LinkedHashMapDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> ages = <span class=\"keyword\">new</span> mutable.<span class=\"type\">LinkedHashMap</span>[<span class=\"type\">String</span>, <span class=\"type\">Int</span>]</span><br><span class=\"line\">    ages(<span class=\"string\">&quot;Leo&quot;</span>) = <span class=\"number\">30</span></span><br><span class=\"line\">    ages(<span class=\"string\">&quot;Alice&quot;</span>) = <span class=\"number\">15</span></span><br><span class=\"line\">    ages(<span class=\"string\">&quot;Jen&quot;</span>) = <span class=\"number\">25</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ((k, v) &lt;- ages) println(k, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">(Leo,30)</span><br><span class=\"line\">(Alice,15)</span><br><span class=\"line\">(Jen,25)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class\"></a>Class</h2><h3 id=\"ClassDemo\"><a href=\"#ClassDemo\" class=\"headerlink\" title=\"ClassDemo\"></a>ClassDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ClassDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> hw = <span class=\"keyword\">new</span> <span class=\"type\">HelloWorld</span></span><br><span class=\"line\">    hw.sayHello()</span><br><span class=\"line\">    println(hw.getName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;Leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>() &#123; println(<span class=\"string\">&quot;Hello, &quot;</span> + name) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span> </span>= name</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">Leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"GetterSetterDemo\"><a href=\"#GetterSetterDemo\" class=\"headerlink\" title=\"GetterSetterDemo\"></a>GetterSetterDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">GetterSetterDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leo = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">    leo.name = <span class=\"string\">&quot;leo1&quot;</span></span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;Leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Leo</span><br><span class=\"line\">leo1</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CustomGetterSetterDemo\"><a href=\"#CustomGetterSetterDemo\" class=\"headerlink\" title=\"CustomGetterSetterDemo\"></a>CustomGetterSetterDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CustomGetterSetterDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leo = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">    leo.name = <span class=\"string\">&quot;leo1&quot;</span></span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> myName = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name</span> </span>= <span class=\"string\">&quot;your name is &quot;</span> + myName</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name_=</span></span>(newValue: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;you cannot edit your name!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">your name is leo</span><br><span class=\"line\">you cannot edit your name!</span><br><span class=\"line\">your name is leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FieldGetterDemo\"><a href=\"#FieldGetterDemo\" class=\"headerlink\" title=\"FieldGetterDemo\"></a>FieldGetterDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FieldGetterDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leo = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">    leo.updateName(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">    leo.updateName(<span class=\"string\">&quot;leo1&quot;</span>)</span><br><span class=\"line\">    println(leo.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> myName = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateName</span></span>(newName: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newName == <span class=\"string\">&quot;leo1&quot;</span>) myName = newName</span><br><span class=\"line\">      <span class=\"keyword\">else</span> println(<span class=\"string\">&quot;not accept this new name!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name</span> </span>= <span class=\"string\">&quot;your name is &quot;</span> + myName</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">your name is leo</span><br><span class=\"line\">not accept this new name!</span><br><span class=\"line\">your name is leo</span><br><span class=\"line\">your name is leo1</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PrivateThisDemo\"><a href=\"#PrivateThisDemo\" class=\"headerlink\" title=\"PrivateThisDemo\"></a>PrivateThisDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PrivateThisDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leo = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    leo.age = <span class=\"number\">30</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> jack = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    jack.age = <span class=\"number\">18</span></span><br><span class=\"line\">    println(leo.older(jack))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> myAge = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">//      private[this] var myAge = 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age_=</span></span>(newValue: <span class=\"type\">Int</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newValue &gt; <span class=\"number\">0</span>) myAge = newValue</span><br><span class=\"line\">      <span class=\"keyword\">else</span> print(<span class=\"string\">&quot;illegal age!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span> </span>= myAge</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">older</span></span>(s: <span class=\"type\">Student</span>) = &#123;</span><br><span class=\"line\">      myAge &gt; s.myAge</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">true</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JavaGetterSetterDemo\"><a href=\"#JavaGetterSetterDemo\" class=\"headerlink\" title=\"JavaGetterSetterDemo\"></a>JavaGetterSetterDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scala.beans.<span class=\"type\">BeanProperty</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">JavaGetterSetterDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    s.setName(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    println(s.getName)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> t = <span class=\"keyword\">new</span> <span class=\"type\">Teacher</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    println(t.getName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@BeanProperty</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> = _</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span>(<span class=\"params\">@<span class=\"type\">BeanProperty</span> var name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">leo</span><br><span class=\"line\">jack</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AuxiliaryConstructorDemo\"><a href=\"#AuxiliaryConstructorDemo\" class=\"headerlink\" title=\"AuxiliaryConstructorDemo\"></a>AuxiliaryConstructorDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">AuxiliaryConstructorDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s1 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s1.getName)</span><br><span class=\"line\">    println(s1.getAge)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s2 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    println(s2.getName)</span><br><span class=\"line\">    println(s2.getAge)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s3 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">    println(s3.getName)</span><br><span class=\"line\">    println(s3.getAge)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> age = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>()</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>(name)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span> </span>= name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setName</span></span>(newName: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = newName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getAge</span> </span>= age</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setAge</span></span>(newAge: <span class=\"type\">Int</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">0</span><br><span class=\"line\">leo</span><br><span class=\"line\">0</span><br><span class=\"line\">leo</span><br><span class=\"line\">30</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MainConstructor\"><a href=\"#MainConstructor\" class=\"headerlink\" title=\"MainConstructor\"></a>MainConstructor</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">MainConstructor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> t = <span class=\"keyword\">new</span> <span class=\"type\">Teacher</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val age: <span class=\"type\">Int</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;your name is &quot;</span> + name + <span class=\"string\">&quot;, your age is &quot;</span> + age)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span>(<span class=\"params\">val name: <span class=\"type\">String</span> = &quot;jack&quot;, val age: <span class=\"type\">Int</span> = 35</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;your name is &quot;</span> + name + <span class=\"string\">&quot;, your age is &quot;</span> + age)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">your name is leo, your age is 30</span><br><span class=\"line\">your name is jack, your age is 35</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"InnerClassDemo\"><a href=\"#InnerClassDemo\" class=\"headerlink\" title=\"InnerClassDemo\"></a>InnerClassDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">InnerClassDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> c1 = <span class=\"keyword\">new</span> <span class=\"type\">Class</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> s1 = c1.getStudents(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    c1.students += s1</span><br><span class=\"line\">    <span class=\"keyword\">val</span> c2 = <span class=\"keyword\">new</span> <span class=\"type\">Class</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> s2 = c2.getStudents(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//    c1.students += s2</span></span><br><span class=\"line\">    c2.students += s2</span><br><span class=\"line\">    println(c1.students)</span><br><span class=\"line\">    println(c2.students)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Class</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> students = <span class=\"keyword\">new</span> <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Student</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getStudents</span></span>(name: <span class=\"type\">String</span>) = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">ArrayBuffer(basic.InnerClassDemo$Class$Student@7a79be86)</span><br><span class=\"line\">ArrayBuffer(basic.InnerClassDemo$Class$Student@34ce8af7)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><h3 id=\"ObjectDemo\"><a href=\"#ObjectDemo\" class=\"headerlink\" title=\"ObjectDemo\"></a>ObjectDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ObjectDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"type\">Person</span></span><br><span class=\"line\">    println(p.getEyeNum)</span><br><span class=\"line\">    println(<span class=\"type\">Person</span>.getEyeNum)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> eyeNum = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;this person object&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getEyeNum</span> </span>= eyeNum</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">this person object</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CompanionObjectDemo\"><a href=\"#CompanionObjectDemo\" class=\"headerlink\" title=\"CompanionObjectDemo\"></a>CompanionObjectDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CompanionObjectDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">    p.sayHello</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> eyeNum = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;this person object&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getEyeNum</span> </span>= eyeNum</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val age: <span class=\"type\">Int</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= println(<span class=\"string\">&quot;Hi, &quot;</span> + name + <span class=\"string\">&quot;, I guess you are &quot;</span> +</span><br><span class=\"line\">      age + <span class=\"string\">&quot; years old!&quot;</span> + <span class=\"string\">&quot;, and usually you must have &quot;</span> + <span class=\"type\">Person</span>.eyeNum + <span class=\"string\">&quot; eyes.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">this person object</span><br><span class=\"line\">Hi, leo, I guess you are 30 years old!, and usually you must have 2 eyes.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AbstractClassDemo\"><a href=\"#AbstractClassDemo\" class=\"headerlink\" title=\"AbstractClassDemo\"></a>AbstractClassDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">AbstractClassDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> h = <span class=\"type\">HelloImpl</span></span><br><span class=\"line\">    h.sayHello(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span>(<span class=\"params\">var message: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>): <span class=\"type\">Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HelloImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hello</span>(<span class=\"params\">&quot;hello&quot;</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>) = &#123;</span><br><span class=\"line\">      println(message + <span class=\"string\">&quot;, &quot;</span> + name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">hello, world</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ApplyDemo\"><a href=\"#ApplyDemo\" class=\"headerlink\" title=\"ApplyDemo\"></a>ApplyDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ApplyDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    println(p.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(name: <span class=\"type\">String</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(name)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HelloWorldDemo\"><a href=\"#HelloWorldDemo\" class=\"headerlink\" title=\"HelloWorldDemo\"></a>HelloWorldDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HelloWorldDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello World</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HelloWorld\"><a href=\"#HelloWorld\" class=\"headerlink\" title=\"HelloWorld\"></a>HelloWorld</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello World</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"EnumerationDemo\"><a href=\"#EnumerationDemo\" class=\"headerlink\" title=\"EnumerationDemo\"></a>EnumerationDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">EnumerationDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"type\">Season</span>.<span class=\"type\">SPRING</span>)</span><br><span class=\"line\">    println(<span class=\"type\">Season</span>.values)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (e &lt;- <span class=\"type\">Season</span>.values) println(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Season</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enumeration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">SPRING</span>, <span class=\"type\">SUMMER</span>, <span class=\"type\">AUTUMN</span>, <span class=\"type\">WINTER</span> = <span class=\"type\">Value</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">SPRING</span><br><span class=\"line\">Season.ValueSet(SPRING, SUMMER, AUTUMN, WINTER)</span><br><span class=\"line\">SPRING</span><br><span class=\"line\">SUMMER</span><br><span class=\"line\">AUTUMN</span><br><span class=\"line\">WINTER</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">EnumerationDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"type\">Season</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">    println(<span class=\"type\">Season</span>.withName(<span class=\"string\">&quot;spring&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (e &lt;- <span class=\"type\">Season</span>.values) println(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Season</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enumeration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">SPRING</span> = <span class=\"type\">Value</span>(<span class=\"number\">0</span>, <span class=\"string\">&quot;spring&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">SUMMER</span> = <span class=\"type\">Value</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;summer&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">AUTUMN</span> = <span class=\"type\">Value</span>(<span class=\"number\">2</span>, <span class=\"string\">&quot;autumn&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">WINTER</span> = <span class=\"type\">Value</span>(<span class=\"number\">3</span>, <span class=\"string\">&quot;winter&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">spring</span><br><span class=\"line\">spring</span><br><span class=\"line\">spring</span><br><span class=\"line\">summer</span><br><span class=\"line\">autumn</span><br><span class=\"line\">winter</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Extends\"><a href=\"#Extends\" class=\"headerlink\" title=\"Extends\"></a>Extends</h2><h3 id=\"ExtendsDemo\"><a href=\"#ExtendsDemo\" class=\"headerlink\" title=\"ExtendsDemo\"></a>ExtendsDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ExtendsDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s.getScore)</span><br><span class=\"line\">    println(s.getName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span> </span>= name</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> score = <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getScore</span> </span>= score</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">A</span><br><span class=\"line\">leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OverrideDemo\"><a href=\"#OverrideDemo\" class=\"headerlink\" title=\"OverrideDemo\"></a>OverrideDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">OverrideDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s.getScore)</span><br><span class=\"line\">    println(s.getName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span> </span>= name</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> score = <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getScore</span> </span>= score</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span> </span>= <span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + <span class=\"keyword\">super</span>.getName</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">A</span><br><span class=\"line\">Hi, I&#x27;m leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OverrideFieldDemo\"><a href=\"#OverrideFieldDemo\" class=\"headerlink\" title=\"OverrideFieldDemo\"></a>OverrideFieldDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">OverrideFieldDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s.name)</span><br><span class=\"line\">    println(s.age)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: <span class=\"type\">String</span> = <span class=\"string\">&quot;person&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span></span>: <span class=\"type\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> name: <span class=\"type\">String</span> = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span></span>: <span class=\"type\">Int</span> = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">leo</span><br><span class=\"line\">30</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"InstanceOfDemo\"><a href=\"#InstanceOfDemo\" class=\"headerlink\" title=\"InstanceOfDemo\"></a>InstanceOfDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">InstanceOfDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p: <span class=\"type\">Person</span> = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> s: <span class=\"type\">Student</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    println(s)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.isInstanceOf[<span class=\"type\">Student</span>]) s = p.asInstanceOf[<span class=\"type\">Student</span>]</span><br><span class=\"line\">    println(s)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">null</span><br><span class=\"line\">basic.InstanceOfDemo$Student@11531931</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ClassOfDemo\"><a href=\"#ClassOfDemo\" class=\"headerlink\" title=\"ClassOfDemo\"></a>ClassOfDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ClassOfDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p: <span class=\"type\">Person</span> = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(p.isInstanceOf[<span class=\"type\">Person</span>])</span><br><span class=\"line\">    println(p.getClass == classOf[<span class=\"type\">Person</span>])</span><br><span class=\"line\">    println(p.getClass == classOf[<span class=\"type\">Student</span>])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">true</span><br><span class=\"line\">false</span><br><span class=\"line\">true</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ProtectedDemo\"><a href=\"#ProtectedDemo\" class=\"headerlink\" title=\"ProtectedDemo\"></a>ProtectedDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ProtectedDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s1 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    s1.sayHello</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s2 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    s2.sayHello</span><br><span class=\"line\">    s1.makeFriends(s2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//  protected[this] var hobby: String = &quot;game&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">var</span> hobby: <span class=\"type\">String</span> = <span class=\"string\">&quot;game&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= println(<span class=\"string\">&quot;Hello, &quot;</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(s: <span class=\"type\">Student</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;my hobby is &quot;</span> + hobby + <span class=\"string\">&quot;, your hobby is &quot;</span> + s.hobby)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, leo</span><br><span class=\"line\">Hello, leo</span><br><span class=\"line\">my hobby is game, your hobby is game</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ParentConstructor\"><a href=\"#ParentConstructor\" class=\"headerlink\" title=\"ParentConstructor\"></a>ParentConstructor</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ParentConstructor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s1 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    println(s1.name, s1.age, s1.score)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s2 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"number\">30</span>)</span><br><span class=\"line\">    println(s2.name, s2.age, s2.score)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val age: <span class=\"type\">Int</span></span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">name: <span class=\"type\">String</span>, age: <span class=\"type\">Int</span>, var score: <span class=\"type\">Double</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(name: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>(name, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(age: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>(<span class=\"string\">&quot;leo&quot;</span>, age, <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">(leo,0,0.0)</span><br><span class=\"line\">(leo,30,0.0)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AnonymousInnerClassDemo\"><a href=\"#AnonymousInnerClassDemo\" class=\"headerlink\" title=\"AnonymousInnerClassDemo\"></a>AnonymousInnerClassDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">AnonymousInnerClassDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= <span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    greeting(p)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span>(p: <span class=\"type\">Person</span> &#123;<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>: <span class=\"type\">String</span>&#125;): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(p.sayHello)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">protected val name: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= <span class=\"string\">&quot;Hello, I&#x27;m &quot;</span> + name</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hi, I&#x27;m leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AbstractClassDemo-1\"><a href=\"#AbstractClassDemo-1\" class=\"headerlink\" title=\"AbstractClassDemo\"></a>AbstractClassDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">AbstractClassDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> h = <span class=\"type\">HelloImpl</span></span><br><span class=\"line\">    h.sayHello(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span>(<span class=\"params\">var message: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>): <span class=\"type\">Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HelloImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Hello</span>(<span class=\"params\">&quot;hello&quot;</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>) = &#123;</span><br><span class=\"line\">      println(message + <span class=\"string\">&quot;, &quot;</span> + name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">hello, world</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AbstractFieldDemo\"><a href=\"#AbstractFieldDemo\" class=\"headerlink\" title=\"AbstractFieldDemo\"></a>AbstractFieldDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">AbstractFieldDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: <span class=\"type\">String</span> = <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pattern-Match\"><a href=\"#Pattern-Match\" class=\"headerlink\" title=\"Pattern Match\"></a>Pattern Match</h2><h3 id=\"PatternMatchDemo\"><a href=\"#PatternMatchDemo\" class=\"headerlink\" title=\"PatternMatchDemo\"></a>PatternMatchDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p: <span class=\"type\">Person</span> = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    p <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> per: <span class=\"type\">Person</span> =&gt; println(<span class=\"string\">&quot;it&#x27;s Person&#x27;s object&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> _ =&gt; println(<span class=\"string\">&quot;unknown type&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">it&#x27;s Person&#x27;s object</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">judgeGrade</span></span>(grade: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      grade <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;A&quot;</span> =&gt; println(<span class=\"string\">&quot;Excellent&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;B&quot;</span> =&gt; println(<span class=\"string\">&quot;Good&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;C&quot;</span> =&gt; println(<span class=\"string\">&quot;Just so so&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> _ =&gt; println(<span class=\"string\">&quot;You need work harder&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    judgeGrade(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">    judgeGrade(<span class=\"string\">&quot;D&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Excellent</span><br><span class=\"line\">You need work harder</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">judgeGrade</span></span>(name: <span class=\"type\">String</span>, grade: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      grade <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;A&quot;</span> =&gt; println(name + <span class=\"string\">&quot;, you are excellent&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;B&quot;</span> =&gt; println(name + <span class=\"string\">&quot;, you are good&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;C&quot;</span> =&gt; println(name + <span class=\"string\">&quot;, your are just so so&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> _ <span class=\"keyword\">if</span> name == <span class=\"string\">&quot;leo&quot;</span> =&gt; println(name + <span class=\"string\">&quot;, you are a good boy, come on&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> _ =&gt; println(name + <span class=\"string\">&quot;, you need to work harder&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    judgeGrade(<span class=\"string\">&quot;jack&quot;</span>, <span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">    judgeGrade(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"string\">&quot;D&quot;</span>)</span><br><span class=\"line\">    judgeGrade(<span class=\"string\">&quot;jen&quot;</span>, <span class=\"string\">&quot;D&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">jack, you are excellent</span><br><span class=\"line\">leo, you are a good boy, come on</span><br><span class=\"line\">jen, you need to work harder</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemoIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> java.io._</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">processException</span></span>(e: <span class=\"type\">Exception</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      e <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> e1: <span class=\"type\">IllegalArgumentException</span> =&gt; println(<span class=\"string\">&quot;you have illegal arguments! exception is: &quot;</span> + e1)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> e2: <span class=\"type\">FileNotFoundException</span> =&gt; println(<span class=\"string\">&quot;cannot find the file you need read or write! exceptiotn is: &quot;</span> + e2)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> e3: <span class=\"type\">IOException</span> =&gt; println(<span class=\"string\">&quot;you got an error while you were doing IO operation! exception is: &quot;</span> + e3)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> _: <span class=\"type\">Exception</span> =&gt; println(<span class=\"string\">&quot;cannot know which exception you have!&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    processException(<span class=\"keyword\">new</span> <span class=\"type\">IllegalArgumentException</span>(<span class=\"string\">&quot;illegal argument!&quot;</span>))</span><br><span class=\"line\">    processException(<span class=\"keyword\">new</span> <span class=\"type\">IOException</span>(<span class=\"string\">&quot;io exception!&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">you have illegal arguments! exception is: java.lang.IllegalArgumentException: illegal argument!</span><br><span class=\"line\">you got an error while you were doing IO operation! exception is: java.io.IOException: io exception!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemoIV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\"><span class=\"comment\">//    def greeting(arr: Array[String]): Unit = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//      arr match &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Array(&quot;Leo&quot;) =&gt; println(&quot;Hi, Leo!&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//        case Array(girl1, girl2, girl3) =&gt; println(&quot;Hi, girls, nice to meet you. &quot; + girl1 + &quot; and &quot; + girl2 + &quot; and &quot; + girl3)</span></span><br><span class=\"line\"><span class=\"comment\">//        case Array(&quot;Leo&quot;, _*) =&gt; println(&quot;Hi, Leo, please introduce your friends to me.&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//        case _ =&gt; println(&quot;hey who are you?&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//      &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    greeting(Array(&quot;Leo&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//    greeting(Array(&quot;Jen&quot;, &quot;Marry&quot;, &quot;Penny&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//    greeting(Array(&quot;Leo&quot;, &quot;Jack&quot;))</span></span><br><span class=\"line\"><span class=\"comment\">//    greeting(Array(&quot;Jack&quot;))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span>(list: <span class=\"type\">List</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      list <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;Leo&quot;</span> :: <span class=\"type\">Nil</span> =&gt; println(<span class=\"string\">&quot;Hi, Leo!&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> girl1 :: girl2 :: girl3 :: <span class=\"type\">Nil</span> =&gt; println(<span class=\"string\">&quot;Hi, girls, nice to meet you. &quot;</span> + girl1 + <span class=\"string\">&quot; and &quot;</span> + girl2 + <span class=\"string\">&quot; and &quot;</span> + girl3)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;Leo&quot;</span> :: tail =&gt; println(<span class=\"string\">&quot;Hi, Leo, please introduce your friends to me.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> _ =&gt; println(<span class=\"string\">&quot;hey, who are you!&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    greeting(<span class=\"type\">List</span>(<span class=\"string\">&quot;Leo&quot;</span>))</span><br><span class=\"line\">    greeting(<span class=\"type\">List</span>(<span class=\"string\">&quot;Jen&quot;</span>, <span class=\"string\">&quot;Marry&quot;</span>, <span class=\"string\">&quot;Penny&quot;</span>))</span><br><span class=\"line\">    greeting(<span class=\"type\">List</span>(<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>))</span><br><span class=\"line\">    greeting(<span class=\"type\">List</span>(<span class=\"string\">&quot;Jack&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hi, Leo!</span><br><span class=\"line\">Hi, girls, nice to meet you. Jen and Marry and Penny</span><br><span class=\"line\">Hi, Leo, please introduce your friends to me.</span><br><span class=\"line\">hey, who are you!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemoV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span>(<span class=\"params\">name: <span class=\"type\">String</span>, subject: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">name: <span class=\"type\">String</span>, classroom: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">judgeIdentify</span></span>(p: <span class=\"type\">Person</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      p <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Teacher</span>(name, subject) =&gt; println(<span class=\"string\">&quot;Teacher, name is &quot;</span> + name + <span class=\"string\">&quot;, subject is &quot;</span> + subject)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Student</span>(name, classroom) =&gt; println(<span class=\"string\">&quot;Student, name is &quot;</span> + name + <span class=\"string\">&quot;, classroom is &quot;</span> + classroom)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> _ =&gt; println(<span class=\"string\">&quot;Illegal access, please go out of the school!&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    judgeIdentify(<span class=\"keyword\">new</span> <span class=\"type\">Teacher</span>(<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"string\">&quot;mathematics&quot;</span>))</span><br><span class=\"line\">    judgeIdentify(<span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;Jack&quot;</span>, <span class=\"string\">&quot;class&quot;</span>))</span><br><span class=\"line\">    judgeIdentify(<span class=\"keyword\">new</span> <span class=\"type\">Person</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Teacher, name is Leo, subject is mathematics</span><br><span class=\"line\">Student, name is Jack, classroom is class</span><br><span class=\"line\">Illegal access, please go out of the school!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">PatternMatchDemoVI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> grades = <span class=\"type\">Map</span>(<span class=\"string\">&quot;Leo&quot;</span> -&gt; <span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span> -&gt; <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;Jen&quot;</span> -&gt; <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getGrade</span></span>(name: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> grade = grades.get(name)</span><br><span class=\"line\">      grade <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Some</span>(grade) =&gt; println(<span class=\"string\">&quot;your grade is &quot;</span> + grade)</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">None</span> =&gt; println(<span class=\"string\">&quot;sorry, your grade information is not in the system&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getGrade(<span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">    getGrade(<span class=\"string\">&quot;Marry&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">your grade is A</span><br><span class=\"line\">sorry, your grade information is not in the system</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Trait\"><a href=\"#Trait\" class=\"headerlink\" title=\"Trait\"></a>Trait</h2><h3 id=\"TraitDemo\"><a href=\"#TraitDemo\" class=\"headerlink\" title=\"TraitDemo\"></a>TraitDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    p1.sayHello(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    p2.sayHello(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    p1.makeFriends(p2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">HelloTrait</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">MakeFriendsTrait</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">HelloTrait</span> <span class=\"keyword\">with</span> <span class=\"title\">MakeFriendsTrait</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(otherName: <span class=\"type\">String</span>) = println(<span class=\"string\">&quot;Hello, &quot;</span> + otherName + <span class=\"string\">&quot;, I&#x27;m &quot;</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>) = println(<span class=\"string\">&quot;Hello &quot;</span> + p.name + <span class=\"string\">&quot;, I&#x27;m &quot;</span> + name + <span class=\"string\">&quot;, I want to make friends with you.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, jack, I&#x27;m leo</span><br><span class=\"line\">Hello, leo, I&#x27;m jack</span><br><span class=\"line\">Hello jack, I&#x27;m leo, I want to make friends with you.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    p1.makeFriends(p2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(message: <span class=\"type\">String</span>) = println(message)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + name + <span class=\"string\">&quot;, I&#x27;m glad to make friends with you, &quot;</span> + p.name)</span><br><span class=\"line\">      log(<span class=\"string\">&quot;makeFriends method is invoked with parameter Person[name=&quot;</span> + p.name + <span class=\"string\">&quot;]&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hi, I&#x27;m leo, I&#x27;m glad to make friends with you, jack</span><br><span class=\"line\">makeFriends method is invoked with parameter Person[name=jack]</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    s.sayHello</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> eyeNum: <span class=\"type\">Int</span> = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= println(<span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + name + <span class=\"string\">&quot;, I have &quot;</span> + eyeNum + <span class=\"string\">&quot; eyes.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hi, I&#x27;m leo, I have 2 eyes.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoIV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    p1.makeFriends(p2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>) = println(msg + <span class=\"string\">&quot;, &quot;</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span> = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      sayHello(p.name)</span><br><span class=\"line\">      println(<span class=\"string\">&quot;I&#x27;m &quot;</span> + name + <span class=\"string\">&quot;, I want to make friends with you!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">hello, jack</span><br><span class=\"line\">I&#x27;m leo, I want to make friends with you!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoIX</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s.getClass)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123; println(<span class=\"string\">&quot;Person&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123; println(<span class=\"string\">&quot;Logger&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">MyLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123; println(<span class=\"string\">&quot;MyLogger&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">TimeLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123; println(<span class=\"string\">&quot;TimeLogger&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> <span class=\"keyword\">with</span> <span class=\"title\">MyLogger</span> <span class=\"keyword\">with</span> <span class=\"title\">TimeLogger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;Student&#x27;s constructor!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Person&#x27;s constructor!</span><br><span class=\"line\">Logger&#x27;s constructor!</span><br><span class=\"line\">MyLogger&#x27;s constructor!</span><br><span class=\"line\">TimeLogger&#x27;s constructor!</span><br><span class=\"line\">Student&#x27;s constructor!</span><br><span class=\"line\">class basic.TraitDemoIX$Student</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoIV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    p1.makeFriends(p2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>) = println(msg + <span class=\"string\">&quot;, &quot;</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span> = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      sayHello(p.name)</span><br><span class=\"line\">      println(<span class=\"string\">&quot;I&#x27;m &quot;</span> + name + <span class=\"string\">&quot;, I want to make friends with you!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">hello, jack</span><br><span class=\"line\">I&#x27;m leo, I want to make friends with you!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoIX</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span></span><br><span class=\"line\">    println(s.getClass)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123; println(<span class=\"string\">&quot;Person&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123; println(<span class=\"string\">&quot;Logger&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">MyLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123; println(<span class=\"string\">&quot;MyLogger&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">TimeLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123; println(<span class=\"string\">&quot;TimeLogger&#x27;s constructor!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> <span class=\"keyword\">with</span> <span class=\"title\">MyLogger</span> <span class=\"keyword\">with</span> <span class=\"title\">TimeLogger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">&quot;Student&#x27;s constructor!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Person&#x27;s constructor!</span><br><span class=\"line\">Logger&#x27;s constructor!</span><br><span class=\"line\">MyLogger&#x27;s constructor!</span><br><span class=\"line\">TimeLogger&#x27;s constructor!</span><br><span class=\"line\">Student&#x27;s constructor!</span><br><span class=\"line\">class basic.TraitDemoIX$Student</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    p1.sayHello</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;jack&quot;</span>) <span class=\"keyword\">with</span> <span class=\"type\">MyLogger</span></span><br><span class=\"line\">    p2.sayHello</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logged</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">MyLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logged</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123; println(<span class=\"string\">&quot;log: &quot;</span> + msg) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Logged</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>&#123; println(<span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + name); log(<span class=\"string\">&quot;sayHello is invoked!&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hi, I&#x27;m leo</span><br><span class=\"line\">Hi, I&#x27;m jack</span><br><span class=\"line\">log: sayHello is invoked!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoVI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    p.sayHello</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span></span>(data: <span class=\"type\">String</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">DataValidHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span></span>(data: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;check data: &quot;</span> + data)</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.handle(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">SignatureValidHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span></span>(data: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;check signature: &quot;</span> + data)</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.handle(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">SignatureValidHandler</span> <span class=\"keyword\">with</span> <span class=\"title\">DataValidHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= &#123; println(<span class=\"string\">&quot;Hello, &quot;</span> + name); handle(name) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, leo</span><br><span class=\"line\">check data: leo</span><br><span class=\"line\">check signature: leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoVII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(classOf[<span class=\"type\">Logger</span>])</span><br><span class=\"line\">    println(classOf[<span class=\"type\">MyLogger</span>])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">MyLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">super</span>.log(msg) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">interface basic.TraitDemoVII$Logger</span><br><span class=\"line\">interface basic.TraitDemoVII$MyLogger</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoVIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    println(p1.getClass)</span><br><span class=\"line\">    println(p2.getClass)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Valid</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span></span>: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">valid</span></span>: <span class=\"type\">Boolean</span> = &#123;</span><br><span class=\"line\">      getName == <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Valid</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    println(valid)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span> </span>= name</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">true</span><br><span class=\"line\">false</span><br><span class=\"line\">class basic.TraitDemoVIII$Person</span><br><span class=\"line\">class basic.TraitDemoVIII$Person</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoX</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person1</span></span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1 = <span class=\"keyword\">new</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span> = <span class=\"string\">&quot;init&quot;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">with</span> <span class=\"type\">Person1</span> <span class=\"keyword\">with</span> <span class=\"type\">SayHello</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person2</span> <span class=\"keyword\">extends</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span> = <span class=\"string\">&quot;init&quot;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">with</span> <span class=\"type\">SayHello</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2 = <span class=\"keyword\">new</span> <span class=\"type\">Person2</span></span><br><span class=\"line\">    println(p1.getClass)</span><br><span class=\"line\">    println(p2.getClass)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span></span><br><span class=\"line\">    println(msg.toString)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">init</span><br><span class=\"line\">init</span><br><span class=\"line\">class basic.TraitDemoX$$anon$1</span><br><span class=\"line\">class basic.TraitDemoX$Person2$1</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoXI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Person</span></span><br><span class=\"line\">    println(p.getClass)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    println(msg.toString)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">SayHello</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> msg: <span class=\"type\">String</span> = <span class=\"string\">&quot;init&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">init</span><br><span class=\"line\">class basic.TraitDemoXI$Person</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">TraitDemoXII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    p.sayHello</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printMessage</span></span>(msg: <span class=\"type\">String</span>) = println(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> <span class=\"keyword\">extends</span> <span class=\"title\">MyUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) = printMessage(<span class=\"string\">&quot;log: &quot;</span> + msg)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>: <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      log(<span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + name)</span><br><span class=\"line\">      printMessage(<span class=\"string\">&quot;Hi, I&#x27;m &quot;</span> + name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">log: Hi, I&#x27;m leo</span><br><span class=\"line\">Hi, I&#x27;m leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Functional-Program\"><a href=\"#Functional-Program\" class=\"headerlink\" title=\"Functional Program\"></a>Functional Program</h2><h3 id=\"FunctionalProgramDemo\"><a href=\"#FunctionalProgramDemo\" class=\"headerlink\" title=\"FunctionalProgramDemo\"></a>FunctionalProgramDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionalProgramDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> l1 = <span class=\"type\">List</span>(<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"string\">&quot;Jen&quot;</span>, <span class=\"string\">&quot;Peter&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>).map(<span class=\"string\">&quot;name is &quot;</span> + _)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> l2 = <span class=\"type\">List</span>(<span class=\"string\">&quot;Hello World&quot;</span>, <span class=\"string\">&quot;You Me&quot;</span>).flatMap(_.split(<span class=\"string\">&quot; &quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> l3 = <span class=\"type\">List</span>(<span class=\"string\">&quot;I&quot;</span>, <span class=\"string\">&quot;have&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;beautiful&quot;</span>, <span class=\"string\">&quot;house&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> l4 =  <span class=\"type\">List</span>(<span class=\"string\">&quot;Leo&quot;</span>, <span class=\"string\">&quot;Jen&quot;</span>, <span class=\"string\">&quot;Peter&quot;</span>, <span class=\"string\">&quot;Jack&quot;</span>).zip(<span class=\"type\">List</span>(<span class=\"number\">100</span>, <span class=\"number\">90</span>, <span class=\"number\">75</span>, <span class=\"number\">83</span>))</span><br><span class=\"line\">    println(l1)</span><br><span class=\"line\">    println(l2)</span><br><span class=\"line\">    println(l3)</span><br><span class=\"line\">    println(l4)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">List(name is Leo, name is Jen, name is Peter, name is Jack)</span><br><span class=\"line\">List(Hello, World, You, Me)</span><br><span class=\"line\">List(I, have, a, beautiful, house)</span><br><span class=\"line\">List((Leo,100), (Jen,90), (Peter,75), (Jack,83))</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionalProgramDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> line1 = scala.io.<span class=\"type\">Source</span>.fromFile(<span class=\"string\">&quot;README.md&quot;</span>).mkString</span><br><span class=\"line\">    <span class=\"keyword\">val</span> line2 = scala.io.<span class=\"type\">Source</span>.fromFile(<span class=\"string\">&quot;README.md&quot;</span>).mkString</span><br><span class=\"line\">    <span class=\"keyword\">val</span> lines = <span class=\"type\">List</span>(line1, line2)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> count = lines.flatMap(_.split(<span class=\"string\">&quot;\\n&quot;</span>)).flatMap(_.split(<span class=\"string\">&quot; &quot;</span>)).map((_, <span class=\"number\">1</span>)).map(_._2).reduceLeft(_ + _)</span><br><span class=\"line\">    println(count)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">16</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FunctionAssignDemo\"><a href=\"#FunctionAssignDemo\" class=\"headerlink\" title=\"FunctionAssignDemo\"></a>FunctionAssignDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">FunctionAssignDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sayHelloFunc = sayHello _</span><br><span class=\"line\">    sayHelloFunc(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>) &#123; println(<span class=\"string\">&quot;Hello, &quot;</span> + name) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AnonymousFunctionDemo\"><a href=\"#AnonymousFunctionDemo\" class=\"headerlink\" title=\"AnonymousFunctionDemo\"></a>AnonymousFunctionDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">AnonymousFunctionDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sayHelloFunc = (name: <span class=\"type\">String</span>) =&gt; println(<span class=\"string\">&quot;Hello, &quot;</span> + name)</span><br><span class=\"line\">    sayHelloFunc(<span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HigherOrderFunctionDemo\"><a href=\"#HigherOrderFunctionDemo\" class=\"headerlink\" title=\"HigherOrderFunctionDemo\"></a>HigherOrderFunctionDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HigherOrderFunctionDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sayHelloFunc = (name: <span class=\"type\">String</span>) =&gt; println(<span class=\"string\">&quot;Hello, &quot;</span> + name)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span>(func: (<span class=\"type\">String</span>) =&gt; <span class=\"type\">Unit</span>, name: <span class=\"type\">String</span>) &#123; func(name) &#125;</span><br><span class=\"line\">    greeting(sayHelloFunc, <span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).map((num: <span class=\"type\">Int</span>) =&gt; num * num).mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getGreetingFunc</span></span>(msg: <span class=\"type\">String</span>) = (name: <span class=\"type\">String</span>) =&gt; println(msg + <span class=\"string\">&quot;, &quot;</span> + name)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> greetingFunc = getGreetingFunc(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">    greetingFunc(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">1,4,9,16,25</span><br><span class=\"line\">hello, leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HigherOrderFunctionDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span>(func: (<span class=\"type\">String</span>) =&gt; <span class=\"type\">Unit</span>, name: <span class=\"type\">String</span>) &#123; func(name) &#125;</span><br><span class=\"line\">    greeting((name: <span class=\"type\">String</span>) =&gt; println(<span class=\"string\">&quot;Hello, &quot;</span> + name), <span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">    greeting((name) =&gt; println(<span class=\"string\">&quot;Hello, &quot;</span> + name), <span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\">    greeting(name =&gt; println(<span class=\"string\">&quot;Hello, &quot;</span> + name), <span class=\"string\">&quot;Leo&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">triple</span></span>(func: (<span class=\"type\">Int</span>) =&gt; <span class=\"type\">Int</span>) = &#123; func(<span class=\"number\">3</span>) &#125;</span><br><span class=\"line\">    println(triple(<span class=\"number\">3</span> * _))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">9</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HigherOrderFunctionDemoIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    println(<span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).map(<span class=\"number\">2</span> * _).mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    (<span class=\"number\">1</span> to <span class=\"number\">9</span>).map(<span class=\"string\">&quot;*&quot;</span> * _).foreach(println _)</span><br><span class=\"line\">    println((<span class=\"number\">1</span> to <span class=\"number\">20</span>).filter(_ % <span class=\"number\">2</span> == <span class=\"number\">0</span>).mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">    println((<span class=\"number\">1</span> to <span class=\"number\">5</span>).reduceLeft(_ * _))</span><br><span class=\"line\">    println(<span class=\"type\">Array</span>(<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>).sortWith(_ &lt; _).mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">2,4,6,8,10</span><br><span class=\"line\">*</span><br><span class=\"line\">**</span><br><span class=\"line\">***</span><br><span class=\"line\">****</span><br><span class=\"line\">*****</span><br><span class=\"line\">******</span><br><span class=\"line\">*******</span><br><span class=\"line\">********</span><br><span class=\"line\">*********</span><br><span class=\"line\">2,4,6,8,10,12,14,16,18,20</span><br><span class=\"line\">120</span><br><span class=\"line\">1,2,3,4,5,10</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ClosureDemo\"><a href=\"#ClosureDemo\" class=\"headerlink\" title=\"ClosureDemo\"></a>ClosureDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ClosureDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getGreetingFunc</span></span>(msg: <span class=\"type\">String</span>) = (name: <span class=\"type\">String</span>) =&gt; println(msg + <span class=\"string\">&quot;, &quot;</span> + name)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> greetingFuncHello = getGreetingFunc(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> greetingFuncHi = getGreetingFunc(<span class=\"string\">&quot;hi&quot;</span>)</span><br><span class=\"line\">    greetingFuncHello(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    greetingFuncHi(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">hello, leo</span><br><span class=\"line\">hi, leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SAMConvertDemo\"><a href=\"#SAMConvertDemo\" class=\"headerlink\" title=\"SAMConvertDemo\"></a>SAMConvertDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.event._</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SAMConvertDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  val f = new JFrame(&quot;Hello World&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//  val b = new JButton(&quot;Click Me&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//  b.setBounds(100, 100, 65, 30)</span></span><br><span class=\"line\"><span class=\"comment\">//  b.addActionListener(new ActionListener &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    override def actionPerformed(event: ActionEvent): Unit = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//      println(&quot;Click Me&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//  &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//  f.add(b)</span></span><br><span class=\"line\"><span class=\"comment\">//  f.setSize(300, 300)</span></span><br><span class=\"line\"><span class=\"comment\">//  f.setVisible(true)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">val</span> f = <span class=\"keyword\">new</span> <span class=\"type\">JFrame</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">val</span> b = <span class=\"keyword\">new</span> <span class=\"type\">JButton</span>(<span class=\"string\">&quot;Click Me&quot;</span>)</span><br><span class=\"line\">  b.setBounds(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">65</span>, <span class=\"number\">30</span>)</span><br><span class=\"line\">  <span class=\"keyword\">implicit</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getActionListener</span></span>(actionProcessFunc: (<span class=\"type\">ActionEvent</span>) =&gt; <span class=\"type\">Unit</span>) = <span class=\"keyword\">new</span> <span class=\"type\">ActionListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">actionPerformed</span></span>(event: <span class=\"type\">ActionEvent</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      actionProcessFunc(event)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  b.addActionListener((event: <span class=\"type\">ActionEvent</span>) =&gt; println(<span class=\"string\">&quot;Click Me&quot;</span>))</span><br><span class=\"line\">  f.add(b)</span><br><span class=\"line\">  f.setSize(<span class=\"number\">300</span>, <span class=\"number\">300</span>)</span><br><span class=\"line\">  f.setVisible(<span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Click Me</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CurryingDemo\"><a href=\"#CurryingDemo\" class=\"headerlink\" title=\"CurryingDemo\"></a>CurryingDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CurryingDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum1</span></span>(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>) = a + b</span><br><span class=\"line\">    println(sum1(<span class=\"number\">1</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum2</span></span>(a: <span class=\"type\">Int</span>) = (b: <span class=\"type\">Int</span>) =&gt; a + b</span><br><span class=\"line\">    println(sum2(<span class=\"number\">1</span>)(<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum3</span></span>(a: <span class=\"type\">Int</span>)(b: <span class=\"type\">Int</span>) = a + b</span><br><span class=\"line\">    println(sum3(<span class=\"number\">1</span>)(<span class=\"number\">1</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ReturnDemo\"><a href=\"#ReturnDemo\" class=\"headerlink\" title=\"ReturnDemo\"></a>ReturnDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ReturnDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span>(name: <span class=\"type\">String</span>) = &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span></span>(name: <span class=\"type\">String</span>): <span class=\"type\">String</span> = &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      sayHello(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(greeting(<span class=\"string\">&quot;Leo&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, Leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h2><h3 id=\"ListDemo\"><a href=\"#ListDemo\" class=\"headerlink\" title=\"ListDemo\"></a>ListDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ListDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span></span>(l: <span class=\"type\">List</span>[<span class=\"type\">Int</span>], prefix: <span class=\"type\">String</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (l != <span class=\"type\">Nil</span>) &#123;</span><br><span class=\"line\">        print(prefix + l.head + <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">        decorator(l.tail, prefix)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> l = <span class=\"type\">List</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    decorator(l, <span class=\"string\">&quot;#&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">#1 #2 #3 #4 #5 </span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"LinkedListDemo\"><a href=\"#LinkedListDemo\" class=\"headerlink\" title=\"LinkedListDemo\"></a>LinkedListDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">LinkedListDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\"><span class=\"comment\">//    val l = scala.collection.mutable.LinkedList(1, 2, 3, 4, 5)</span></span><br><span class=\"line\"><span class=\"comment\">//    var current = l</span></span><br><span class=\"line\"><span class=\"comment\">//    while (current != Nil) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//      current.elem = current.elem * 2</span></span><br><span class=\"line\"><span class=\"comment\">//      current = current.next</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    println(l.mkString(&quot;,&quot;))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> l = scala.collection.mutable.<span class=\"type\">LinkedList</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> current = l</span><br><span class=\"line\">    <span class=\"keyword\">var</span> first = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"type\">Nil</span> &amp;&amp; current.next != <span class=\"type\">Nil</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (first) &#123; current.elem = current.elem * <span class=\"number\">2</span>; first = <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">      current = current.next.next</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (current != <span class=\"type\">Nil</span>) current.elem = current.elem * <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(l.mkString(<span class=\"string\">&quot;,&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">2,2,6,4,10,6,14,8,18,10</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SetDemo\"><a href=\"#SetDemo\" class=\"headerlink\" title=\"SetDemo\"></a>SetDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SetDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s1 = <span class=\"keyword\">new</span> scala.collection.mutable.<span class=\"type\">HashSet</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">    s1 += <span class=\"number\">1</span>; s1 += <span class=\"number\">2</span>; s1 += <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> s2 = <span class=\"keyword\">new</span> scala.collection.mutable.<span class=\"type\">LinkedHashSet</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">    s2 += <span class=\"number\">1</span>; s2 += <span class=\"number\">2</span>; s2 += <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> s3 = scala.collection.mutable.<span class=\"type\">SortedSet</span>[<span class=\"type\">String</span>](<span class=\"string\">&quot;banana&quot;</span>, <span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;candy&quot;</span>)</span><br><span class=\"line\">    println(s1)</span><br><span class=\"line\">    println(s2)</span><br><span class=\"line\">    println(s3)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Set(1, 5, 2)</span><br><span class=\"line\">Set(1, 2, 5)</span><br><span class=\"line\">TreeSet(apple, banana, candy)</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Generic\"><a href=\"#Generic\" class=\"headerlink\" title=\"Generic\"></a>Generic</h2><h3 id=\"GenericDemo\"><a href=\"#GenericDemo\" class=\"headerlink\" title=\"GenericDemo\"></a>GenericDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">GenericDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>[<span class=\"type\">T</span>](<span class=\"params\">val localId: <span class=\"type\">T</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getSchoolId</span></span>(hukouId: <span class=\"type\">T</span>) = <span class=\"string\">&quot;S-&quot;</span> + hukouId + <span class=\"string\">&quot;-&quot;</span> + localId</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leo = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>[<span class=\"type\">Int</span>](<span class=\"number\">111</span>)</span><br><span class=\"line\">    println(leo.getSchoolId(<span class=\"number\">100</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getCard</span></span>[<span class=\"type\">T</span>](content: <span class=\"type\">T</span>) = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (content.isInstanceOf[<span class=\"type\">Int</span>]) <span class=\"string\">&quot;card: 001, &quot;</span> + content</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (content.isInstanceOf[<span class=\"type\">String</span>]) <span class=\"string\">&quot;card: this is your card, &quot;</span> + content</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"string\">&quot;card: &quot;</span> + content</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(getCard[<span class=\"type\">String</span>](<span class=\"string\">&quot;hello world&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">S-100-111</span><br><span class=\"line\">card: this is your card, hello world</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BoundsDemo\"><a href=\"#BoundsDemo\" class=\"headerlink\" title=\"BoundsDemo\"></a>BoundsDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BoundsDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= println(<span class=\"string\">&quot;Hello, I&#x27;m &quot;</span> + name)</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">        sayHello</span><br><span class=\"line\">        p.sayHello</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Party</span>[<span class=\"type\">T</span> &lt;: <span class=\"type\">Person</span>](<span class=\"params\">p1: <span class=\"type\">T</span>, p2: <span class=\"type\">T</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span> </span>= p1.makeFriends(p2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s1 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s2 = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Party</span>[<span class=\"type\">Student</span>](s1, s2)</span><br><span class=\"line\">    p.play</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, I&#x27;m leo</span><br><span class=\"line\">Hello, I&#x27;m jack</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BoundsDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Father</span>(<span class=\"params\">name</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getIDCard</span></span>[<span class=\"type\">R</span> &gt;: <span class=\"type\">Child</span>](person: <span class=\"type\">R</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (person.getClass == classOf[<span class=\"type\">Child</span>]) println(<span class=\"string\">&quot;please tell us your parents&#x27; names.&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (person.getClass == classOf[<span class=\"type\">Father</span>]) println(<span class=\"string\">&quot;sign your name for your child&#x27;s id card.&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">else</span> println(<span class=\"string\">&quot;sorry, you are not allowed to get id card.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getIDCard[<span class=\"type\">Child</span>](<span class=\"keyword\">new</span> <span class=\"type\">Child</span>(<span class=\"string\">&quot;leo&quot;</span>))</span><br><span class=\"line\">    getIDCard[<span class=\"type\">Father</span>](<span class=\"keyword\">new</span> <span class=\"type\">Father</span>(<span class=\"string\">&quot;jack&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">please tell us your parents&#x27; names.</span><br><span class=\"line\">sign your name for your child&#x27;s id card.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BoundsDemoIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= println(<span class=\"string\">&quot;Hello, I&#x27;m &quot;</span> + name)</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">makeFriends</span></span>(p: <span class=\"type\">Person</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">        sayHello</span><br><span class=\"line\">        p.sayHello</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) </span>&#123; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span> </span>= println(<span class=\"string\">&quot;Wang Wang, I&#x27;m &quot;</span> + name) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">implicit</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dog2person</span></span>(dog: <span class=\"type\">Object</span>): <span class=\"type\">Person</span> = <span class=\"keyword\">if</span> (dog.isInstanceOf[<span class=\"type\">Dog</span>]) &#123; <span class=\"keyword\">val</span> _dog = dog.asInstanceOf[<span class=\"type\">Dog</span>]; <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(_dog.name ) &#125; <span class=\"keyword\">else</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Party</span>[<span class=\"type\">T</span> &lt;% <span class=\"type\">Person</span>](<span class=\"params\">p1: <span class=\"type\">T</span>, p2: <span class=\"type\">T</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span> </span>= p1.makeFriends(p2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> d = <span class=\"keyword\">new</span> <span class=\"type\">Dog</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p = <span class=\"keyword\">new</span> <span class=\"type\">Party</span>[<span class=\"type\">Person</span>](s, d)</span><br><span class=\"line\">    p.play</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, I&#x27;m leo</span><br><span class=\"line\">Hello, I&#x27;m jack</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BoundsDemoIV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span>[<span class=\"type\">T</span>: <span class=\"type\">Ordering</span>](<span class=\"params\">val number1: <span class=\"type\">T</span>, val number2: <span class=\"type\">T</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max</span></span>(<span class=\"keyword\">implicit</span> order: <span class=\"type\">Ordering</span>[<span class=\"type\">T</span>]) = <span class=\"keyword\">if</span> (order.compare(number1, number2) &gt; <span class=\"number\">0</span>) number1 <span class=\"keyword\">else</span> number2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> c = <span class=\"keyword\">new</span> <span class=\"type\">Calculator</span>[<span class=\"type\">Int</span>](<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">    println(c.max)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">2</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">BoundsDemoV</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meat</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vegetable</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">packageFood</span></span>[<span class=\"type\">T</span>: <span class=\"type\">Manifest</span>](food: <span class=\"type\">T</span>*) = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">val</span> foodPackage = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">T</span>](food.length)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until food.length) foodPackage(i) = food(i)</span><br><span class=\"line\">      foodPackage</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> gongbaojiding = <span class=\"keyword\">new</span> <span class=\"type\">Meat</span>(<span class=\"string\">&quot;gongbaojiding&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> yuxiangrousi = <span class=\"keyword\">new</span> <span class=\"type\">Meat</span>(<span class=\"string\">&quot;yuxiangrousi&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> shousiyangpai = <span class=\"keyword\">new</span> <span class=\"type\">Meat</span>(<span class=\"string\">&quot;shousiyangpai&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> meatPackage = packageFood(gongbaojiding, yuxiangrousi, shousiyangpai)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> qingcai = <span class=\"keyword\">new</span> <span class=\"type\">Vegetable</span>(<span class=\"string\">&quot;qingcai&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> baicai = <span class=\"keyword\">new</span> <span class=\"type\">Vegetable</span>(<span class=\"string\">&quot;baicai&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> huanggua = <span class=\"keyword\">new</span> <span class=\"type\">Vegetable</span>(<span class=\"string\">&quot;huanggua&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> vegetablePackage = packageFood(qingcai, baicai, huanggua)</span><br><span class=\"line\">    println(meatPackage)</span><br><span class=\"line\">    println(vegetablePackage)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">[Lbasic.BoundsDemoV$Meat$1;@e580929</span><br><span class=\"line\">[Lbasic.BoundsDemoV$Vegetable$1;@1cd072a9</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ContravariantDemo\"><a href=\"#ContravariantDemo\" class=\"headerlink\" title=\"ContravariantDemo\"></a>ContravariantDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ContravariantDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Master</span></span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Professional</span> <span class=\"keyword\">extends</span> <span class=\"title\">Master</span></span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Card</span>[-<span class=\"type\">T</span>](<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">enterMeet</span></span>(card: <span class=\"type\">Card</span>[<span class=\"type\">Professional</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;welcom to have this meeting!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    enterMeet(<span class=\"keyword\">new</span> <span class=\"type\">Card</span>[<span class=\"type\">Professional</span>](<span class=\"string\">&quot;leo&quot;</span>))</span><br><span class=\"line\">    enterMeet(<span class=\"keyword\">new</span> <span class=\"type\">Card</span>[<span class=\"type\">Master</span>](<span class=\"string\">&quot;jack&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">welcom to have this meeting!</span><br><span class=\"line\">welcom to have this meeting!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CovariantDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Master</span></span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Professional</span> <span class=\"keyword\">extends</span> <span class=\"title\">Master</span></span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Card</span>[+<span class=\"type\">T</span>](<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">enterMeet</span></span>(card: <span class=\"type\">Card</span>[<span class=\"type\">Master</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      println(<span class=\"string\">&quot;welcom to have this meeting!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    enterMeet(<span class=\"keyword\">new</span> <span class=\"type\">Card</span>[<span class=\"type\">Master</span>](<span class=\"string\">&quot;leo&quot;</span>))</span><br><span class=\"line\">    enterMeet(<span class=\"keyword\">new</span> <span class=\"type\">Card</span>[<span class=\"type\">Professional</span>](<span class=\"string\">&quot;jack&quot;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">welcom to have this meeting!</span><br><span class=\"line\">welcom to have this meeting!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Implicit-Conversion\"><a href=\"#Implicit-Conversion\" class=\"headerlink\" title=\"Implicit Conversion\"></a>Implicit Conversion</h2><h3 id=\"ImplicitConversionDemo\"><a href=\"#ImplicitConversionDemo\" class=\"headerlink\" title=\"ImplicitConversionDemo\"></a>ImplicitConversionDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ImplicitConversionDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpecialPerson</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Older</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">implicit</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">object2SpecialPerson</span></span>(obj: <span class=\"type\">Object</span>): <span class=\"type\">SpecialPerson</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj.getClass == classOf[<span class=\"type\">Student</span>]) &#123; <span class=\"keyword\">val</span> stu = obj.asInstanceOf[<span class=\"type\">Student</span>]; <span class=\"keyword\">new</span> <span class=\"type\">SpecialPerson</span>(stu.name) &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj.getClass == classOf[<span class=\"type\">Older</span>]) &#123; <span class=\"keyword\">val</span> older = obj.asInstanceOf[<span class=\"type\">Older</span>]; <span class=\"keyword\">new</span> <span class=\"type\">SpecialPerson</span>(older.name) &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ticketNumber = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buySpecialTicket</span></span>(p: <span class=\"type\">SpecialPerson</span>) = &#123;</span><br><span class=\"line\">      ticketNumber += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"string\">&quot;T-&quot;</span> + ticketNumber</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    println(buySpecialTicket(s))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> o = <span class=\"keyword\">new</span> <span class=\"type\">Older</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    println(buySpecialTicket(o))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> t = <span class=\"keyword\">new</span> <span class=\"type\">Teacher</span>(<span class=\"string\">&quot;tom&quot;</span>)</span><br><span class=\"line\">    println(buySpecialTicket(t))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">T-1</span><br><span class=\"line\">T-2</span><br><span class=\"line\">T-3</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ImplicitConversionDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Superman</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">emitLaser</span> </span>= println(<span class=\"string\">&quot;emit a laster!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">implicit</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">man2supername</span></span>(man: <span class=\"type\">Man</span>): <span class=\"type\">Superman</span> = <span class=\"keyword\">new</span> <span class=\"type\">Superman</span>(man.name)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leo = <span class=\"keyword\">new</span> <span class=\"type\">Man</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    leo.emitLaser</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">emit a laster!</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ImplicitConversionDemoIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpecialPerson</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Older</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">implicit</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">object2SpecialPerson</span></span>(obj: <span class=\"type\">Object</span>): <span class=\"type\">SpecialPerson</span> = &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj.getClass == classOf[<span class=\"type\">Student</span>]) &#123; <span class=\"keyword\">val</span> stu = obj.asInstanceOf[<span class=\"type\">Student</span>]; <span class=\"keyword\">new</span> <span class=\"type\">SpecialPerson</span>(stu.name) &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj.getClass == classOf[<span class=\"type\">Older</span>]) &#123; <span class=\"keyword\">val</span> older = obj.asInstanceOf[<span class=\"type\">Older</span>]; <span class=\"keyword\">new</span> <span class=\"type\">SpecialPerson</span>(older.name) &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketHouse</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ticketNumber = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buySpecialTicket</span></span>(p: <span class=\"type\">SpecialPerson</span>) = &#123;</span><br><span class=\"line\">        ticketNumber += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"string\">&quot;T-&quot;</span> + ticketNumber</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> th = <span class=\"keyword\">new</span> <span class=\"type\">TicketHouse</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> s = <span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">    println(th.buySpecialTicket(s))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> o = <span class=\"keyword\">new</span> <span class=\"type\">Older</span>(<span class=\"string\">&quot;jack&quot;</span>)</span><br><span class=\"line\">    println(th.buySpecialTicket(o))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> t = <span class=\"keyword\">new</span> <span class=\"type\">Teacher</span>(<span class=\"string\">&quot;tom&quot;</span>)</span><br><span class=\"line\">    println(th.buySpecialTicket(t))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">T-1</span><br><span class=\"line\">T-2</span><br><span class=\"line\">T-3</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ImplicitParameterDemo\"><a href=\"#ImplicitParameterDemo\" class=\"headerlink\" title=\"ImplicitParameterDemo\"></a>ImplicitParameterDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ImplicitParameterDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SignPen</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span></span>(content: <span class=\"type\">String</span>) = println(content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">implicit</span> <span class=\"keyword\">val</span> signPen = <span class=\"keyword\">new</span> <span class=\"type\">SignPen</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">signForExam</span></span>(name: <span class=\"type\">String</span>)(<span class=\"keyword\">implicit</span> signPen: <span class=\"type\">SignPen</span>): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">      signPen.write(name + <span class=\"string\">&quot; come to exam in time.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    signForExam(<span class=\"string\">&quot;leo&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">leo come to exam in time.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Actor\"><a href=\"#Actor\" class=\"headerlink\" title=\"Actor\"></a>Actor</h2><h3 id=\"ActorDemo\"><a href=\"#ActorDemo\" class=\"headerlink\" title=\"ActorDemo\"></a>ActorDemo</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scala.actors.<span class=\"type\">Actor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ActorDemoI</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> helloActor = <span class=\"keyword\">new</span> <span class=\"type\">HelloActor</span></span><br><span class=\"line\">    helloActor.start()</span><br><span class=\"line\">    helloActor ! <span class=\"string\">&quot;leo&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloActor</span> <span class=\"keyword\">extends</span> <span class=\"title\">Actor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">act</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        receive &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> name: <span class=\"type\">String</span> =&gt; println(<span class=\"string\">&quot;Hello, &quot;</span> + name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Hello, leo</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scala.actors.<span class=\"type\">Actor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ActorDemoII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> userManageActor = <span class=\"keyword\">new</span> <span class=\"type\">UserManageActor</span></span><br><span class=\"line\">    userManageActor.start()</span><br><span class=\"line\">    userManageActor ! <span class=\"type\">Login</span>(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"string\">&quot;1234&quot;</span>)</span><br><span class=\"line\">    userManageActor ! <span class=\"type\">Register</span>(<span class=\"string\">&quot;leo&quot;</span>, <span class=\"string\">&quot;1234&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span>(<span class=\"params\">username: <span class=\"type\">String</span>, password: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Register</span>(<span class=\"params\">username: <span class=\"type\">String</span>, password: <span class=\"type\">String</span></span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserManageActor</span> <span class=\"keyword\">extends</span> <span class=\"title\">Actor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">act</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        receive &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"type\">Login</span>(username, password) =&gt; println(<span class=\"string\">&quot;login, username is &quot;</span> + username + <span class=\"string\">&quot;, password is &quot;</span> + password)</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"type\">Register</span>(username, password) =&gt; println(<span class=\"string\">&quot;register, username is &quot;</span> + username + <span class=\"string\">&quot;, password is &quot;</span> + password)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">login, username is leo, password is 1234</span><br><span class=\"line\">register, username is leo, password is 1234</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> basic</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scala.actors.<span class=\"type\">Actor</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ActorDemoIII</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> leoTelephoneActor = <span class=\"keyword\">new</span> <span class=\"type\">LeoTelephoneActor</span></span><br><span class=\"line\">    leoTelephoneActor.start()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> jackTelephoneActor = <span class=\"keyword\">new</span> <span class=\"type\">JackTelephoneActor</span>(leoTelephoneActor)</span><br><span class=\"line\">    jackTelephoneActor.start()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Message</span>(<span class=\"params\">content: <span class=\"type\">String</span>, sender: <span class=\"type\">Actor</span></span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeoTelephoneActor</span> <span class=\"keyword\">extends</span> <span class=\"title\">Actor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">act</span></span>() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        receive &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"type\">Message</span>(content, sender) =&gt; &#123; println(<span class=\"string\">&quot;leo telephone: &quot;</span> + content); sender ! <span class=\"string\">&quot;I&#x27;m leo, please call me after 10 minutes.&quot;</span> &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JackTelephoneActor</span>(<span class=\"params\">val leoTelephoneActor: <span class=\"type\">Actor</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Actor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">act</span></span>() &#123;</span><br><span class=\"line\">      leoTelephoneActor ! <span class=\"type\">Message</span>(<span class=\"string\">&quot;Hello, Leo, I&#x27;m Jack&quot;</span>, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">      receive &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> response: <span class=\"type\">String</span> =&gt; println(<span class=\"string\">&quot;jack telephone: &quot;</span> + response)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">leo telephone: Hello, Leo, I&#x27;m Jack</span><br><span class=\"line\">jack telephone: I&#x27;m leo, please call me after 10 minutes.</span><br><span class=\"line\">*///:~</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Spark1.3.0集群搭建","date":"2019-09-13T09:00:00.000Z","_content":"Spark1.3.0集群搭建\n\n## CentOS 6.5集群搭建\n\n### VirtualBox安装\n\n使用Virtual Box安装包，一步一步安装即可。Oracle_VM_VirtualBox_Extension_Pack-4.1.40-101594.vbox-extpack。之所以选用Virtual Box是因为它比VMWare更加稳定。使用VMWare运行hadoop集群或者spark集群时，有时会出现休眠后重启时，某些进程莫名挂掉的问题。而Virtual Box没有这种情况。之所以选择Virtual Box 4.1版本，是因为更高的版本就不兼容win7了。\n由于用的是Mac，所以自己安装VirturlBox。\n\n[Virtual Box 官网](https://www.virtualbox.org/)\n\n### CentOS 6.5安装\n  \n使用CentOS 6.5镜像即可，CentOS-6.5-i386-minimal.iso。\n创建虚拟机：打开Virtual Box，点击“新建”按钮，点击“下一步”，输入虚拟机名称为spark1，选择操作系统为Linux，选择版本为Red Hat，分配1024MB内存，后面的选项全部用默认，在Virtual Disk File location and size中，一定要自己选择一个目录来存放虚拟机文件，最后点击“create”按钮，开始创建虚拟机。\n设置虚拟机网卡：选择创建好的spark1虚拟机，点击“设置”按钮，在网络一栏中，连接方式中，选择“Bridged Adapter”。\n安装虚拟机中的CentOS 6.5操作系统：选择创建好的虚拟机spark1，点击“开始”按钮，选择安装介质（即本地的CentOS 6.5镜像文件），选择第一项开始安装-Skip-欢迎界面Next-选择默认语言-Baisc Storage Devices-Yes, discard any data-主机名:spark1-选择时区-设置初始密码为hadoop-Replace Existing Linux System-Write changes to disk-CentOS 6.5自己开始安装。\n安装完以后，CentOS会提醒你要重启一下，就是reboot，你就reboot就可以了。\n\n### CentOS 6.5网络配置\n  \n先临时性设置虚拟机ip地址：ifconfig eth0 192.168.1.107，在/etc/hosts文件中配置本地ip（192.168.1.107）到host（spark1）的映射。\n配置windows主机上的hosts文件：C:\\Windows\\System32\\drivers\\etc\\hosts，192.168.1.107 spark1。\n使用SecureCRT从windows上连接虚拟机，自己可以上网下一个SecureCRT的绿色版，网上很多。\n永久性配置CentOS网络。\n```\nvi /etc/sysconfig/network-scripts/ifcfg-eth0\nDEVICE=eth0\nTYPE=Ethernet\nONBOOT=yes\nBOOTPROTO=static\nIPADDR=192.168.1.107\nNETMASK=255.255.255.0\nGATEWAY=192.168.1.1\n```\n\n重启网卡 service network restart。\n即使更换了ip地址，重启网卡，可能还是联不通网。那么可以先将IPADDR、NETMASK、GATEWAY给删除，将BOOTPROTO改成dhcp。然后用service network restart重启网卡。此时linux会自动给分配一个ip地址，用ifconfig查看分配的ip地址。然后再次按照之前说的，配置网卡，将ip改成自动分配的ip地址。最后再重启一次网卡。\n\n由于用的是Mac，所以自己安装SecureCRT，自己安装破解版。\n\n[SecureCRT官网](https://www.vandyke.com/products/securecrt/)\n\n### CentOS 6.5防火墙和DNS配置\n  \n关闭防火墙\n```\nservice iptables stop\nchkconfig iptables off\nvi /etc/selinux/config\nSELINUX=disabled\n```\n自己在win7的控制面板中，关闭windows的防火墙！\n\n配置dns服务器\n```\nvi /etc/resolv.conf\nnameserver 61.139.2.69\nping www.baidu.com\n```\n\n### CentOS 6.5 yum配置\n\n修改repo，使用WinSCP（网上很多，自己下一个），将CentOS6-Base-163.repo上传到CentOS中的/usr/local目录下。\n```\ncd /etc/yum.repos.d/\nrm -rf *\n```\n将自己的repo文件移动到/etc/yum.repos.d/目录中：cp /usr/local/CentOS6-Base-163.repo .，修改repo文件，把所有gpgcheck属性修改为0。\n\n配置yum\n```\nyum clean all\nyum makecache\nyum install telnet\n```\n\n### JDK 1.7安装\n\n将jdk-7u60-linux-i586.rpm通过WinSCP上传到虚拟机中\n安装JDK：rpm -ivh jdk-7u65-linux-i586.rpm\n配置jdk相关的环境变量\n```\nvi .bashrc\nexport JAVA_HOME=/usr/java/latest\nexport PATH=$PATH:$JAVA_HOME/bin\nsource .bashrc\n```\n测试jdk安装是否成功：\n```\njava -version\nrm -f /etc/udev/rules.d/70-persistent-net.rules\n```\n由于用的是Mac，所以自己安装FileZilla，没有安装WinSCP。\n\n### 安装第二台和第三台虚拟机\n\n安装上述步骤，再安装两台一模一样环境的虚拟机，因为后面hadoop和spark都是要搭建集群的。\n集群的最小环境就是三台。因为后面要搭建ZooKeeper、kafka等集群。\n另外两台机器的hostname分别设置为spark2和spark3即可，ip分别为192.168.1.108和192.168.1.109\n在安装的时候，另外两台虚拟机的centos镜像文件必须重新拷贝一份，放在新的目录里，使用各自自己的镜像文件。\n虚拟机的硬盘文件也必须重新选择一个新的目录，以更好的区分。\n安装好之后，记得要在三台机器的/etc/hosts文件中，配置全三台机器的ip地址到hostname的映射，而不能只配置本机，这个很重要！\n在windows的hosts文件中也要配置全三台机器的ip地址到hostname的映射。\n\n### 配置集群ssh免密码登录\n  \n首先在三台机器上配置对本机的ssh免密码登录。生成本机的公钥，过程中不断敲回车即可，ssh-keygen命令默认会将公钥放在/root/.ssh目录下。ssh-keygen -t rsa。将公钥复制为authorized_keys文件，此时使用ssh连接本机就不需要输入密码了。\n```\ncd /root/.ssh\ncp id_rsa.pub authorized_keys\n```\n\n接着配置三台机器互相之间的ssh免密码登录。使用ssh-copy-id -i spark命令将本机的公钥拷贝到指定机器的authorized_keys文件中（方便好用）。\n\n## Hadoop 2.4.1集群搭建\n\n### 安装hadoop包\n\n使用hadoop-2.4.1.tar.gz，使用WinSCP上传到CentOS的/usr/local目录下\n将hadoop包进行解压缩：tar -zxvf hadoop-2.4.1.tar.gz\n对hadoop目录进行重命名：mv hadoop-2.4.1 hadoop\n配置hadoop相关环境变量\n```\nvi .bashrc\nexport HADOOP_HOME=/usr/local/hadoop\nexport PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin\nsource .bashrc\n```\n\n由于用的是Mac，所以自己使用FileZilla，不是WinSCP。\n\n### 修改core-site.xml\n```\n<property>\n  <name>fs.default.name</name>\n  <value>hdfs://spark1:9000</value>\n</property>\n```\n### 修改hdfs-site.xml\n```\n<property>\n  <name>dfs.name.dir</name>\n  <value>/usr/local/data/namenode</value>\n</property>\n<property>\n  <name>dfs.data.dir</name>\n  <value>/usr/local/data/datanode</value>\n</property>\n<property>\n  <name>dfs.tmp.dir</name>\n  <value>/usr/local/data/tmp</value>\n</property>\n<property>\n  <name>dfs.replication</name>\n  <value>3</value>\n</property>\n修改mapred-site.xml\n<property>\n  <name>mapreduce.framework.name</name>\n  <value>yarn</value>\n</property>\n修改yarn-site.xml\n<property>\n  <name>yarn.resourcemanager.hostname</name>\n  <value>spark1</value>\n</property>\n<property>\n  <name>yarn.nodemanager.aux-services</name>\n  <value>mapreduce_shuffle</value>\n</property>\n```\n### 修改slaves文件\n```\nspark1\nspark2\nspark3\n```\n### 在另外两台机器上搭建hadoop\n使用如上配置在另外两台机器上搭建hadoop，可以使用scp命令将spark1上面的hadoop安装包和.bashrc配置文件都拷贝过去。\n```\nscp -r /usr/local/hadoop root@spark2:/usr/local/\nscp -r /usr/local/hadoop root@spark3:/usr/local/\nscp .bashrc root@spark2:~/\nscp .bashrc root@spark3:~/\n```\n要记得对.bashrc文件进行source，以让它生效。\n记得在spark2和spark3的/usr/local目录下创建data目录。\n\n### 启动hdfs集群\n\n格式化namenode：在spark1上执行以下命令，```hdfs namenode -format```\n启动hdfs集群：```start-dfs.sh```\n 验证启动是否成功：jps、访问spark:50070 (关闭CentOS 6.5 防火墙)。spark1：namenode、datanode、secondarynamenode。spark2：datanode。spark3：datanode。\n\n### 启动yarn集群\n启动yarn集群：```start-yarn.sh```\n 验证启动是否成功：jps、访问spark:8088(关闭CentOS 6.5 防火墙)。spark1：resourcemanager、nodemanager。spark2：nodemanager。spark3：nodemanager。\n\n### Hive 0.13搭建\n安装hive包\n将课程提供的apache-hive-0.13.1-bin.tar.gz使用WinSCP上传到spark1的/usr/local目录下。\n解压缩hive安装包：tar -zxvf apache-hive-0.13.1-bin.tar.gz。\n重命名hive目录：mv apache-hive-0.13.1-bin hive。\n配置hive相关的环境变量。\n```\nvi .bashrc\nexport HIVE_HOME=/usr/local/hive\nexport PATH=$HIVE_HOME/bin\nsource .bashrc\n```\n### 安装mysql\n在spark1上安装mysql\n使用yum安装mysql server\n```\nyum install -y mysql-server\nservice mysqld start\nchkconfig mysqld on\n```\n使用yum安装mysql connector\n```\nyum install -y mysql-connector-java\n```\n将mysql connector拷贝到hive的lib包中\n```\ncp /usr/share/java/mysql-connector-java-5.1.17.jar /usr/local/hive/lib\n```\n在mysql上创建hive元数据库，并对hive进行授权\n```\ncreate database if not exists hive_metadata;\ngrant all privileges on hive_metadata.* to 'hive'@'%' identified by 'hive';\ngrant all privileges on hive_metadata.* to 'hive'@'localhost' identified by 'hive';\ngrant all privileges on hive_metadata.* to 'hive'@'spark1' identified by 'hive';\nflush privileges;\nuse hive_metadata;\n```\n### 配置hive-site.xml\n```\nmv hive-default.xml.template hive-site.xml\nvi hive-site.xml\n<property>\n  <name>javax.jdo.option.ConnectionURL</name>\n  <value>jdbc:mysql://spark1:3306/hive_metadata?createDatabaseIfNotExist=true</value>\n</property>\n<property>\n  <name>javax.jdo.option.ConnectionDriverName</name>\n  <value>com.mysql.jdbc.Driver</value>\n</property>\n<property>\n  <name>javax.jdo.option.ConnectionUserName</name>\n  <value>hive</value>\n</property>\n<property>\n  <name>javax.jdo.option.ConnectionPassword</name>\n  <value>hive</value>\n</property>\n<property>\n  <name>hive.metastore.warehouse.dir</name>\n  <value>/user/hive/warehouse</value>\n</property>\n```\n### 配置hive-env.sh和hive-config.sh\n```\nmv hive-env.sh.template hive-env.sh\nvi /usr/local/hive/bin/hive-config.sh\nexport JAVA_HOME=/usr/java/latest\nexport HIVE_HOME=/usr/local/hive\nexport HADOOP_HOME=/usr/local/hadoop\n```\n### 验证hive是否安装成功\n\n直接输入hive命令，可以进入hive命令行\n\n## ZooKeeper 3.4.5集群搭建\n\n### 安装ZooKeeper包\n将zookeeper-3.4.5.tar.gz使用WinSCP拷贝到spark1的/usr/local目录下。\n对zookeeper-3.4.5.tar.gz进行解压缩：tar -zxvf zookeeper-3.4.5.tar.gz。\n对zookeeper目录进行重命名：mv zookeeper-3.4.5 zk。\n配置zookeeper相关的环境变量。\n```\nvi .bashrc\nexport ZOOKEEPER_HOME=/usr/local/zk\nexport PATH=$ZOOKEEPER_HOME/bin\nsource .bashrc\n```\n### 配置zoo.cfg\n```\ncd zk/conf\nmv zoo_sample.cfg zoo.cfg\nvi zoo.cfg\ndataDir=/usr/local/zk/data\nserver.0=spark1:2888:3888\t\nserver.1=spark2:2888:3888\nserver.2=spark3:2888:3888\n```\n### 设置zk节点标识\n```\ncd zk\nmkdir data\ncd data\nvi myid\n0\n```\n### 搭建zk集群\n在另外两个节点上按照上述步骤配置ZooKeeper，使用scp将zk和.bashrc拷贝到spark2和spark3上即可。\n```\nscp -r /usr/local/zk root@spark2:/usr/local/\nscp -r /usr/local/zk root@spark3:/usr/local/\nscp ~/.bashrc root@spark2:~/\nscp ~/.bashrc root@spark3:~/\nsource ~/.bashrc\n```\n唯一的区别是spark2和spark3的标识号分别设置为1和2。\n\n### 启动ZooKeeper集群\n分别在三台机器上执行：zkServer.sh start。\n检查ZooKeeper状态：zkServer.sh status。\n\n## kafka_2.9.2-0.8.1集群搭建\n\n### 安装scala 2.11.4\n  \n将课程提供的scala-2.11.4.tgz使用WinSCP拷贝到spark1的/usr/local目录下。\n对scala-2.11.4.tgz进行解压缩：tar -zxvf scala-2.11.4.tgz。\n对scala目录进行重命名：mv scala-2.11.4 scala。\n\n### 配置scala相关的环境变量。\n```\nvi .bashrc\nexport SCALA_HOME=/usr/local/scala\nexport PATH=$SCALA_HOME/bin\nsource .bashrc\n```\n查看scala是否安装成功：scala -version\n按照上述步骤在spark2和spark3机器上都安装好scala。使用scp将scala和.bashrc拷贝到spark2和spark3上即可。\n```\nscp -r /usr/local/scala root@spark2:/usr/local/\nscp -r /usr/local/scala root@spark3:/usr/local/\nscp ~/.bashrc root@spark2:~/\nscp ~/.bashrc root@spark3:~/\nsource ~/.bashrc\n```\n### 安装Kafka包\n将课程提供的kafka_2.9.2-0.8.1.tgz使用WinSCP拷贝到spark1的/usr/local目录下。\n对kafka_2.9.2-0.8.1.tgz进行解压缩：tar -zxvf kafka_2.9.2-0.8.1.tgz。\n对kafka目录进行改名：mv kafka_2.9.2-0.8.1 kafka。\n\n### 配置kafka。\n```\nvi /usr/local/kafka/config/server.properties\n```\nbroker.id：依次增长的整数，0、1、2、3、4，集群中Broker的唯一id\nzookeeper.connect=192.168.1.107:2181,192.168.1.108:2181,192.168.1.109:2181\n安装slf4j。\n将课程提供的slf4j-1.7.6.zip上传到/usr/local目录下。unzip slf4j-1.7.6.zip。\n把slf4j中的slf4j-nop-1.7.6.jar复制到kafka的libs目录下面。\n\n### 搭建kafka集群\n按照上述步骤在spark2和spark3分别安装kafka。用scp把kafka拷贝到spark2和spark3行即可。\n```\nscp -r /usr/local/kafka root@spark2:/usr/local/\nscp -r /usr/local/kafka root@spark3:/usr/local/\n```\n唯一区别的，就是server.properties中的broker.id，要设置为1和2。\n\n### 启动kafka集群\n在三台机器上分别执行以下命令：nohup bin/kafka-server-start.sh config/server.properties &。\n\n解决kafka Unrecognized VM option ‘UseCompressedOops’问题。\n```\nvi bin/kafka-run-class.sh \nif [ -z \"$KAFKA_JVM_PERFORMANCE_OPTS\" ]; then\n  KAFKA_JVM_PERFORMANCE_OPTS=\"-server  -XX:+UseCompressedOops -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true\"\nfi\n```\n去掉-XX:+UseCompressedOops即可\n使用jps检查启动是否成功。\n\n### 测试kafka集群\n使用基本命令检查kafka是否搭建成功。\n```\nbin/kafka-topics.sh --zookeeper spark1:2181,spark2:2181,spark3:2181 --topic Test --replication-factor 1 --partitions 1 --create\n\nbin/kafka-console-producer.sh --broker-list spark1:9092,spark2:9092,spark3:9092 --topic Test\n\nbin/kafka-console-consumer.sh --zookeeper spark1:2181,spark2:2181,spark3:2181 --topic Test --from-beginning\n```\n\n## Spark 1.3.0集群搭建\n\n## 安装spark包\n将spark-1.3.0-bin-hadoop2.4.tgz使用WinSCP上传到/usr/local目录下。\n解压缩spark包：tar zxvf spark-1.3.0-bin-hadoop2.4.tgz。\n更改spark目录名：mv spark-1.3.0-bin-hadoop2.4 spark。\n设置spark环境变量。\n```\nvi .bashrc\nexport SPARK_HOME=/usr/local/spark\nexport PATH=$SPARK_HOME/bin\nexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib\nsource .bashrc\n```\n### 修改spark-env.sh文件\n```\ncd /usr/local/spark/conf\ncp spark-env.sh.template spark-env.sh\nvi spark-env.sh\nexport JAVA_HOME=/usr/java/latest\nexport SCALA_HOME=/usr/local/scala\nexport SPARK_MASTER_IP=192.168.1.107\nexport SPARK_WORKER_MEMORY=1g\nexport HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop\n```\n### 修改slaves文件\n```\ncp slaves.template slaves\nvi slaves\nspark2\nspark3\n```\n### 安装spark集群\n在另外两个节点进行一模一样的配置，使用scp将spark和.bashrc拷贝到spark2和spark3即可。\n```\nscp -r /usr/local/spark root@spark2:/usr/local/\nscp -r /usr/local/spark root@spark3:/usr/local/\nscp ~/.bashrc root@spark2:~/\nscp ~/.bashrc root@spark3:~/\nsource ~/.bashrc\n```\n### 启动spark集群\n在spark目录下的sbin目录\n执行，/start-all.sh\n使用jsp和8080端口可以检查集群是否启动成功\n进入spark-shell查看是否正常\n\n## WordCount\n\n### Java开发wordcount程序\n\n### 安装eclipse\n[eclipse download](https://www.eclipse.org/downloads/)\n\n### 配置maven\n\n打开eclipse->新建Maven Project->maven-archetype-quickstart->groupId:cn.spark->artifactId:spark-study-java->package:cn.spark.study->替换pom.xml-quick fix(第一次要等待很长时间)->Buid Baph->Configure Build Path->Libaries->JRE System Libarary->Edit->Workspace default JRE。\n```\n//: pom.xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>cn.spark</groupId>\n  <artifactId>spark-study-java</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <packaging>jar</packaging>\n\n  <name>spark-study-java</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n\t  <groupId>org.apache.spark</groupId>\n\t  <artifactId>spark-core_2.10</artifactId>\n\t  <version>1.3.0</version>\n\t</dependency>\n\t<dependency>\n\t  <groupId>org.apache.spark</groupId>\n\t  <artifactId>spark-sql_2.10</artifactId>\n\t  <version>1.3.0</version>\n\t  </dependency>\n\t<dependency>\n\t  <groupId>org.apache.spark</groupId>\n\t  <artifactId>spark-hive_2.10</artifactId>\n\t  <version>1.3.0</version>\n\t</dependency>\n\t<dependency>\n\t  <groupId>org.apache.spark</groupId>\n\t  <artifactId>spark-streaming_2.10</artifactId>\n\t  <version>1.3.0</version>\n\t</dependency>\n\t<dependency>\n\t  <groupId>org.apache.hadoop</groupId>\n\t  <artifactId>hadoop-client</artifactId>\n\t  <version>2.4.1</version>\n\t</dependency>\n\t<dependency>\n\t  <groupId>org.apache.spark</groupId>\n\t  <artifactId>spark-streaming-kafka_2.10</artifactId>\n\t  <version>1.3.0</version>\n\t</dependency>\n  </dependencies>\n  \n  <build>\n    <sourceDirectory>src/main/java</sourceDirectory>\n    <testSourceDirectory>src/main/test</testSourceDirectory>\n\t\n    <plugins>\n      <plugin>\n        <artifactId>maven-assembly-plugin</artifactId>\n        <configuration>\n          <descriptorRefs>\n            <descriptorRef>jar-with-dependencies</descriptorRef>\n          </descriptorRefs>\n          <archive>\n            <manifest>\n              <mainClass></mainClass>\n            </manifest>\n          </archive>\n        </configuration>\n        <executions>\n          <execution>\n            <id>make-assembly</id>\n            <phase>package</phase>\n            <goals>\n              <goal>single</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>exec-maven-plugin</artifactId>\n        <version>1.2.1</version>\n        <executions>\n          <execution>\n            <goals>\n              <goal>exec</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <executable>java</executable>\n          <includeProjectDependencies>true</includeProjectDependencies>\n          <includePluginDependencies>false</includePluginDependencies>\n          <classpathScope>compile</classpathScope>\n          <mainClass>cn.spark.study.App</mainClass>\n        </configuration>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <source>1.6</source>\n          <target>1.6</target>\n        </configuration>\n      </plugin>\n\n    </plugins>\n  </build>\n</project>\n```\n\n### 新建spark.txt，新建包cn.spark.study.core，新建WordCountLocal.java\n```\n//: spark.txt\nSpark is new technology that sits on top of Hadoop Distributed File System (HDFS) that is characterized as ¡°a fast and general engine for large-scale data processing.¡± Spark has three key features that make it the most interesting up and coming technology to rock the big data world since Apache Hadoop in 2005.\n\n1. For iterative analysis like logistic regression, Random Forests, or other advanced algorithms, Spark has demonstrated 100X increase in speed that scales to hundreds of millions of rows.\n\n2. Spark has native support for the latest and greatest programming languages Java, Scala, and of course Python.\n\n3. Spark has generality or platform compatibility in both directions meaning it integrates nicely with SQL engines (Shark), Machine Learning (MLlib), and streaming (Spark Streaming) without requiring new software installed on the cluster using Hadoop¡¯s new YARN cluster manager.\n\nAt Alpine, we have made it dead simple to get started with Spark by including the technology in our latest build out of the box. We require no additional software or hardware to leverage our extensive list of operators for data transformation, exploration, and building advanced analytic models. We leverage Hadoop Yarn (Hadoop NextGen) to launch Spark job without any pre-installation of Spark or modification of cluster configuration. This empowers our customers to have seamless integration of our Spark implementation and their Hadoop stack. For example, we have analyzed 50 Million rows of account data in 50 seconds on a 20 node cluster recently at last month GigaOM conference.\n\nAs a Spark certified company, Alpine Data Labs will be at the Summit. We¡¯d love to see you there!\n\nWant to meet with us?  Click here to set up an appointment at your convenience. Or just send a tweet to our Product & Marketing Director Joel Horwitz @JSHorwitz.\n```\n\n```\n//: WordCountLocal.java\npackage cn.spark.study.core;\n\nimport java.util.Arrays;\n\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.api.java.JavaPairRDD;\nimport org.apache.spark.api.java.JavaRDD;\nimport org.apache.spark.api.java.JavaSparkContext;\nimport org.apache.spark.api.java.function.FlatMapFunction;\nimport org.apache.spark.api.java.function.Function2;\nimport org.apache.spark.api.java.function.PairFunction;\nimport org.apache.spark.api.java.function.VoidFunction;\n\nimport scala.Tuple2;\n\n/**\n * 使用java开发本地测试wordcount程序\n * @author xdx\n *\n */\npublic class WordCountLocal {\n\tpublic static void main(String[] args) {\n\t\t// 第一步：创建SparkConf对象，设置Spark应用的配置信息\n\t\t// 使用setMaster()可以设置Spark应用程序要连接的Spark集群的master节点的url\n\t\t// 但是如果设置为local则代表，在本地运行\n\t\tSparkConf conf = new SparkConf()\n\t\t\t\t.setAppName(\"WordCountLocal\")\n\t\t\t\t.setMaster(\"local\");\n\t\t\n\t\t// 第二步：创建JavaSparkContext对象\n\t\t// 在Spark中，SparkContext是Spark所有功能的一个入口，你无论是用java、scala，甚至是python编写\n\t\t\t// 都必须要有一个SparkContext，它的主要作用，包括初始化Spark应用程序所需的一些核心组件，包括\n\t\t\t// 调度器（DAGSchedule、TaskScheduler），还会去到Spark Master节点上进行注册，等等\n\t\t// 一句话，SparkContext，是Spark应用中，可以说是最最重要的一个对象\n\t\t// 但是呢，在Spark中，编写不同类型的Spark应用程序，使用的SparkContext是不同的，如果使用scala，\n\t\t\t// 使用的就是原生的SparkContext对象\n\t\t\t// 但是如果使用Java，那么就是JavaSparkContext对象\n\t\t\t// 如果是开发Spark SQL程序，那么就是SQLContext、HiveContext\n\t\t\t// 如果是开发Spark Streaming程序，那么就是它独有的SparkContext\n\t\t\t// 以此类推\n\t\tJavaSparkContext sc = new JavaSparkContext(conf);\n\t\t\n\t\t// 第三步：要针对输入源（hdfs文件、本地文件，等等），创建一个初始的RDD\n\t\t// 输入源中的数据会打散，分配到RDD的每个partition中，从而形成一个初始的分布式的数据集\n\t\t// 我们这里呢，因为是本地测试，所以呢，就是针对本地文件\n\t\t// SparkContext中，用于根据文件类型的输入源创建RDD的方法，叫做textFile()方法\n\t\t// 在Java中，创建的普通RDD，都叫做JavaRDD\n\t\t// 在这里呢，RDD中，有元素这种概念，如果是hdfs或者本地文件呢，创建的RDD，每一个元素就相当于\n\t\t// 是文件里的一行\n\t\tJavaRDD<String> lines = sc.textFile(\"spark.txt\");\n\t\t\n\t\t// 第四步：对初始RDD进行transformation操作，也就是一些计算操作\n\t\t// 通常操作会通过创建function，并配合RDD的map、flatMap等算子来执行\n\t\t// function，通常，如果比较简单，则创建指定Function的匿名内部类\n\t\t// 但是如果function比较复杂，则会单独创建一个类，作为实现这个function接口的类\n\t\t\n\t\t// 先将每一行拆分成单个的单词\n\t\t// FlatMapFunction，有两个泛型参数，分别代表了输入和输出类型\n\t\t// 我们这里呢，输入肯定是String，因为是一行一行的文本，输出，其实也是String，因为是每一行的文本\n\t\t// 这里先简要介绍flatMap算子的作用，其实就是，将RDD的一个元素，给拆分成一个或多个元素\n\t\tJavaRDD<String> words = lines.flatMap(new FlatMapFunction<String, String>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Iterable<String> call(String line) throws Exception {\n\t\t\t\treturn Arrays.asList(line.split(\" \"));\n\t\t\t}\n\t\t});\n\t\t\n\t\t// 接着，需要将每一个单词，映射为(单词, 1)的这种格式\n\t\t\t// 因为只有这样，后面才能根据单词作为key，来进行每个单词的出现次数的累加\n\t\t// mapToPair，其实就是将每个元素，映射为一个(v1,v2)这样的Tuple2类型的元素\n\t\t\t// 如果大家还记得scala里面讲的tuple，那么没错，这里的tuple2就是scala类型，包含了两个值\n\t\t// mapToPair这个算子，要求的是与PairFunction配合使用，第一个泛型参数代表了输入类型\n\t\t\t// 第二个和第三个泛型参数，代表的输出的Tuple2的第一个值和第二个值的类型\n\t\t// JavaPairRDD的两个泛型参数，分别代表了tuple元素的第一个值和第二个值的类型\n\t\tJavaPairRDD<String, Integer> pairs = words.mapToPair(new PairFunction<String, String, Integer>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Tuple2<String, Integer> call(String word) throws Exception {\n\t\t\t\treturn new Tuple2<String, Integer>(word, 1);\n\t\t\t}\n\t\t});\n\t\t\n\t\t// 接着，需要以单词作为key，统计每个单词出现的次数\n\t\t// 这里要使用reduceByKey这个算子，对每个key对应的value，都进行reduce操作\n\t\t// 比如JavaPairRDD中有几个元素，分别为(hello, 1) (hello, 1) (hello, 1) (world, 1)\n\t\t// reduce操作，相当于是把第一个值和第二个值进行计算，然后再将结果与第三个值进行计算\n\t\t// 比如这里的hello，那么就相当于是，首先是1 + 1 = 2，然后再将2 + 1 = 3\n\t\t// 最后返回的JavaPairRDD中的元素，也是tuple，但是第一个值就是每个key，第二个值就是key的value\n\t\t// reduce之后的结果，相当于就是每个单词出现的次数\n\t\tJavaPairRDD<String, Integer> wordCounts = pairs.reduceByKey(new Function2<Integer, Integer, Integer>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Integer call(Integer v1, Integer v2) throws Exception {\n\t\t\t\treturn v1 + v2;\n\t\t\t}\n\t\t});\n\t\t\n\t\t// 到这里为止，我们通过几个Spark算子操作，已经统计出了单词的次数\n\t\t// 但是，之前我们使用的flatMap、mapToPair、reduceByKey这种操作，都叫做transformation操作\n\t\t// 一个Spark应用中，光是有transformation操作，是不行的，是不会执行的，必须要有一种叫做action\n\t\t// 接着，最后，可以使用一种叫做action操作的，比如说，foreach，来触发程序的执行\n\t\twordCounts.foreach(new VoidFunction<Tuple2<String, Integer>>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void call(Tuple2<String, Integer> wordCount) throws Exception {\n\t\t\t\tSystem.out.println(wordCount._1 + \" appeared \" + wordCount._2 + \" times.\");\n\t\t\t}\n\t\t});\n\t\t\n\t\tsc.close();\n\t}\n}\n/* Output:\nHadoop appeared 1 times.\nprocessing. appeared 1 times.\nSpark appeared 6 times.\nit appeared 2 times.\nparallel appeared 1 times.\nits appeared 1 times.\noperators appeared 1 times.\nYARN, appeared 1 times.\nengine. appeared 1 times.\nRuns appeared 1 times.\nstandalone appeared 1 times.\noptimizer, appeared 1 times.\nshells. appeared 1 times.\ncomplex appeared 1 times.\nstate-of-the-art appeared 1 times.\nlearning, appeared 1 times.\nUse appeared 1 times.\napplications appeared 1 times.\nover appeared 1 times.\nstreaming, appeared 1 times.\neasy appeared 1 times.\nfor appeared 3 times.\nfaster. appeared 1 times.\nmake appeared 1 times.\nengine appeared 1 times.\nthese appeared 1 times.\nperformance appeared 1 times.\nthe appeared 3 times.\napplication. appeared 1 times.\nSQL. appeared 1 times.\nDataFrames, appeared 1 times.\nMesos, appeared 2 times.\nR, appeared 2 times.\ncan appeared 4 times.\nHDFS, appeared 1 times.\nbuild appeared 1 times.\nCassandra, appeared 1 times.\nachieves appeared 1 times.\nApache appeared 6 times.\nincluding appeared 1 times.\nlarge-scale appeared 1 times.\nKubernetes, appeared 1 times.\nsources. appeared 2 times.\nanalytics. appeared 1 times.\nlibraries appeared 2 times.\nCombine appeared 1 times.\nquery appeared 1 times.\nbatch appeared 1 times.\nIt appeared 1 times.\nscheduler, appeared 1 times.\nboth appeared 1 times.\nstreaming appeared 1 times.\nAccess appeared 1 times.\nmachine appeared 1 times.\nEverywhere appeared 1 times.\nGenerality appeared 1 times.\nstack appeared 1 times.\nAnd appeared 1 times.\nhigh appeared 1 times.\nSpeed appeared 1 times.\nis appeared 1 times.\n80 appeared 1 times.\nrun appeared 1 times.\nseamlessly appeared 1 times.\nKubernetes. appeared 1 times.\nSpark™ appeared 1 times.\nruns appeared 1 times.\nsame appeared 1 times.\nYou appeared 2 times.\non appeared 5 times.\ninteractively appeared 1 times.\nEase appeared 1 times.\ndata appeared 4 times.\napps. appeared 1 times.\noffers appeared 1 times.\nin appeared 4 times.\nusing appeared 2 times.\nDAG appeared 1 times.\nAlluxio, appeared 1 times.\ndiverse appeared 1 times.\n100x appeared 1 times.\nexecution appeared 1 times.\nhundreds appeared 1 times.\nPython, appeared 2 times.\nfrom appeared 1 times.\nother appeared 1 times.\nstandalone, appeared 1 times.\nuse appeared 1 times.\nphysical appeared 1 times.\nworkloads appeared 1 times.\nRun appeared 1 times.\nmode, appeared 1 times.\nEC2, appeared 1 times.\nyou appeared 1 times.\nthat appeared 1 times.\nor appeared 2 times.\na appeared 5 times.\ndata, appeared 1 times.\nhigh-level appeared 1 times.\nJava, appeared 1 times.\nSQL appeared 2 times.\nHive, appeared 1 times.\nHadoop, appeared 1 times.\nto appeared 1 times.\n appeared 9 times.\nanalytics appeared 1 times.\nGraphX, appeared 1 times.\nWrite appeared 1 times.\nof appeared 3 times.\ncluster appeared 1 times.\naccess appeared 1 times.\nMLlib appeared 1 times.\nquickly appeared 1 times.\nScala, appeared 2 times.\nHBase, appeared 1 times.\nand appeared 8 times.\nunified appeared 1 times.\nSQL, appeared 1 times.\ncombine appeared 1 times.\nStreaming. appeared 1 times.\npowers appeared 1 times.\ncloud. appeared 1 times.\n*///:~\n```\n### spark-submit提交到spark集群进行执行\n\n编写WordCountCluster.java\n```\n//: WordCountCluster.java\npackage cn.spark.study.core;\n\nimport java.util.Arrays;\n\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.api.java.JavaPairRDD;\nimport org.apache.spark.api.java.JavaRDD;\nimport org.apache.spark.api.java.JavaSparkContext;\nimport org.apache.spark.api.java.function.FlatMapFunction;\nimport org.apache.spark.api.java.function.Function2;\nimport org.apache.spark.api.java.function.PairFunction;\nimport org.apache.spark.api.java.function.VoidFunction;\n\nimport scala.Tuple2;\n\n/**\n * 将java开发的wordcount程序部署到spark集群上运行\n * @author xdx\n *\n */\npublic class WordCountCluster {\n\tpublic static void main(String[] args) {\n\t\t// 如果要在spark集群上运行，需要修改的，只有两个地方\n\t\t// 第一，将SparkConf的setMaster()方法给删掉，默认它自己会去连接\n\t\t// 第二，我们针对的不是本地文件了，修改为hadoop hdfs上的真正的存储大数据的文件\n\t\t\n\t\t// 实际执行步骤：\n\t\t// 1、将spark.txt文件上传到hdfs上去\n\t\t// 2、使用我们最早在pom.xml里配置的maven插件，对spark工程进行打包\n\t\t// 3、将打包后的spark工程jar包，上传到机器上执行\n\t\t// 4、编写spark-submit脚本\n\t\t// 5、执行spark-submit脚本，提交spark应用到集群执行\n\t\t\n\t\tSparkConf conf = new SparkConf()\n\t\t\t\t.setAppName(\"WordCountCluster\");\n\t\t\n\t\tJavaSparkContext sc = new JavaSparkContext(conf);\n\t\t\n\t\tJavaRDD<String> lines = sc.textFile(\"hdfs://spark1:9000/spark.txt\");\n\t\t\n\t\tJavaRDD<String> words = lines.flatMap(new FlatMapFunction<String, String>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Iterable<String> call(String line) throws Exception {\n\t\t\t\treturn Arrays.asList(line.split(\" \"));\n\t\t\t}\n\t\t});\n\t\t\n\t\tJavaPairRDD<String, Integer> pairs = words.mapToPair(new PairFunction<String, String, Integer>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Tuple2<String, Integer> call(String word) throws Exception {\n\t\t\t\treturn new Tuple2<String, Integer>(word, 1);\n\t\t\t}\n\t\t});\n\t\t\n\t\tJavaPairRDD<String, Integer> wordCounts = pairs.reduceByKey(new Function2<Integer, Integer, Integer>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override \n\t\t\tpublic Integer call(Integer v1, Integer v2) throws Exception {\n\t\t\t\treturn v1 + v2;\n\t\t\t}\n\t\t});\n\t\t\n\t\twordCounts.foreach(new VoidFunction<Tuple2<String, Integer>>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void call(Tuple2<String, Integer> wordCount) throws Exception {\n\t\t\t\tSystem.out.println(wordCount._1 + \" appeared \" + wordCount._2 + \" times.\");\n\t\t\t}\n\t\t});\n\t\t\n\t\tsc.close();\n\t}\n}\n/* Output:\n*///:~\n```\n\n将spark.txt上传到spark1，将spark.txt上传到hdfs\n将spark-study-java打包，Run As->Run Configurations->Maven Build->New->spark-study-java->Run\n将/spark-study-java/target/spark-study-java-0.0.1-SNAPSHOT-jar-with-dependencies.jar上传到spark\n编写wordcount.sh，使用spark-submit进行执行\n\n```\n//: wordcount.sh\n/usr/local/spark/bin/spark-submit \\\n--class cn.spark.sparktest.core.WordCountCluster \\\n--num-executors 3 \\\n--driver-memory 100m \\\n--executor-memory 100m \\\n--executor-cores 3 \\\n/root/Workspace/SparkProjects/wordcount/SparkTest-0.0.1-SNAPSHOT-jar-with-dependencies.jar \\\n```\n\n### Scala开发wordcount程序\nscala ide for eclipse download\n在Java Build Path中，添加spark依赖包(spark-assembly-1.3.0-hadoop2.4.0.jar)，如果与scala ide for eclipse原生的scala版本发生冲突，则移除原生的scala，重新配置scala compiler\n```\n//: WordCount.scala\npackage cn.spark.study.core\n\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\n\n/**\n * @author xdx\n */\nobject WordCount {\n  def main(args: Array[String]) {\n    val conf = new SparkConf()\n      .setAppName(\"WordCount\")\n      .setMaster(\"local\")\n    val sc = new SparkContext(conf)\n    val lines = sc.textFile(\"spark.txt\", 1)\n    val words = lines.flatMap { line => line.split(\" \") }\n    val pairs = words.map { word => (word, 1) }\n    val wordCounts = pairs.reduceByKey { _ + _ }\n    wordCounts.foreach(wordCount => println(wordCount._1 + \" appeared \" + wordCount._2 + \" times.\"))\n  }\n}\n/* Output:\n(MLlib), appeared 1 times.\nFor appeared 2 times.\nProduct appeared 1 times.\nit appeared 3 times.\noperators appeared 1 times.\nsits appeared 1 times.\nHadoop��s appeared 1 times.\nhave appeared 3 times.\ntweet appeared 1 times.\nstack. appeared 1 times.\nmodification appeared 1 times.\nconference. appeared 1 times.\nwe appeared 2 times.\nrequiring appeared 1 times.\nThis appeared 1 times.\nsimple appeared 1 times.\nmanager. appeared 1 times.\nsoftware appeared 2 times.\nany appeared 1 times.\nmake appeared 1 times.\nimplementation appeared 1 times.\nseconds appeared 1 times.\n& appeared 1 times.\nout appeared 1 times.\nData appeared 1 times.\nengine appeared 1 times.\ndirections appeared 1 times.\nmonth appeared 1 times.\nthe appeared 7 times.\ntechnology appeared 3 times.\n2. appeared 1 times.\nAlpine, appeared 1 times.\nWe��d appeared 1 times.\nbox. appeared 1 times.\n100X appeared 1 times.\nmost appeared 1 times.\nbuild appeared 1 times.\nlove appeared 1 times.\nbe appeared 1 times.\n��a appeared 1 times.\nApache appeared 1 times.\nAt appeared 1 times.\nAlpine appeared 1 times.\nour appeared 5 times.\nincluding appeared 1 times.\nas appeared 1 times.\nus? appeared 1 times.\ndead appeared 1 times.\niterative appeared 1 times.\nleverage appeared 2 times.\nWant appeared 1 times.\nFile appeared 1 times.\nprogramming appeared 1 times.\naccount appeared 1 times.\nrecently appeared 1 times.\nengines appeared 1 times.\nis appeared 2 times.\nHorwitz appeared 1 times.\non appeared 3 times.\nfeatures appeared 1 times.\npre-installation appeared 1 times.\nspeed appeared 1 times.\nat appeared 3 times.\nusing appeared 1 times.\nconvenience. appeared 1 times.\ntop appeared 1 times.\nintegrates appeared 1 times.\nmeaning appeared 1 times.\ncustomers appeared 1 times.\nnew appeared 3 times.\nWe appeared 2 times.\nPython. appeared 1 times.\nRandom appeared 1 times.\nlaunch appeared 1 times.\nprocessing.�� appeared 1 times.\nset appeared 1 times.\nhas appeared 4 times.\nNextGen) appeared 1 times.\nworld appeared 1 times.\nLearning appeared 1 times.\nseamless appeared 1 times.\nDirector appeared 1 times.\ngenerality appeared 1 times.\nor appeared 4 times.\nYarn appeared 1 times.\nJava, appeared 1 times.\nappointment appeared 1 times.\nAs appeared 1 times.\nYARN appeared 1 times.\nMachine appeared 1 times.\ncompany, appeared 1 times.\ninstalled appeared 1 times.\n50 appeared 2 times.\nsee appeared 1 times.\nof appeared 10 times.\ncluster appeared 4 times.\nthree appeared 1 times.\nanalytic appeared 1 times.\nOr appeared 1 times.\nForests, appeared 1 times.\nrows appeared 1 times.\nmillions appeared 1 times.\nrows. appeared 1 times.\nHadoop appeared 4 times.\ncharacterized appeared 1 times.\nSpark appeared 10 times.\nintegration appeared 1 times.\njob appeared 1 times.\nnative appeared 1 times.\ngreatest appeared 1 times.\ngeneral appeared 1 times.\nMillion appeared 1 times.\nextensive appeared 1 times.\nhere appeared 1 times.\nbig appeared 1 times.\nJoel appeared 1 times.\n1. appeared 1 times.\nsend appeared 1 times.\n(HDFS) appeared 1 times.\n3. appeared 1 times.\nwithout appeared 2 times.\nfor appeared 3 times.\nmodels. appeared 1 times.\nrequire appeared 1 times.\njust appeared 1 times.\n@JSHorwitz. appeared 1 times.\nLabs appeared 1 times.\nlatest appeared 2 times.\nregression, appeared 1 times.\nnode appeared 1 times.\ncoming appeared 1 times.\nyour appeared 1 times.\nup appeared 2 times.\nanalysis appeared 1 times.\n20 appeared 1 times.\nadvanced appeared 2 times.\nDistributed appeared 1 times.\nno appeared 1 times.\nlarge-scale appeared 1 times.\nsince appeared 1 times.\nstarted appeared 1 times.\nempowers appeared 1 times.\ntransformation, appeared 1 times.\nby appeared 1 times.\nlike appeared 1 times.\ncompatibility appeared 1 times.\n2005. appeared 1 times.\nboth appeared 1 times.\nan appeared 1 times.\nstreaming appeared 1 times.\n(Shark), appeared 1 times.\nanalyzed appeared 1 times.\nStreaming) appeared 1 times.\nmade appeared 1 times.\nnicely appeared 1 times.\nconfiguration. appeared 1 times.\nwith appeared 3 times.\nalgorithms, appeared 1 times.\nmeet appeared 1 times.\ndata appeared 4 times.\ninteresting appeared 1 times.\nin appeared 5 times.\nlogistic appeared 1 times.\nGigaOM appeared 1 times.\nSummit. appeared 1 times.\nincrease appeared 1 times.\nhundreds appeared 1 times.\nsupport appeared 1 times.\nscales appeared 1 times.\nClick appeared 1 times.\nbuilding appeared 1 times.\nother appeared 1 times.\ncourse appeared 1 times.\nexploration, appeared 1 times.\nrock appeared 1 times.\nkey appeared 1 times.\nyou appeared 1 times.\nhardware appeared 1 times.\nthat appeared 4 times.\na appeared 3 times.\nfast appeared 1 times.\ntheir appeared 1 times.\nexample, appeared 1 times.\nlast appeared 1 times.\nSQL appeared 1 times.\ndemonstrated appeared 1 times.\nwill appeared 1 times.\nto appeared 10 times.\nget appeared 1 times.\nplatform appeared 1 times.\n appeared 7 times.\nlanguages appeared 1 times.\nlist appeared 1 times.\nthere! appeared 1 times.\n(Spark appeared 1 times.\nScala, appeared 1 times.\nand appeared 7 times.\nMarketing appeared 1 times.\n(Hadoop appeared 1 times.\ncertified appeared 1 times.\nadditional appeared 1 times.\nSystem appeared 1 times.\n*///:~\n```","source":"_posts/Spark1.3.0集群搭建.md","raw":"---\ntitle: Spark1.3.0集群搭建\ndate: 2019-09-13 17:00:00\ntags: Spark\ncategories: Spark\n---\nSpark1.3.0集群搭建\n\n## CentOS 6.5集群搭建\n\n### VirtualBox安装\n\n使用Virtual Box安装包，一步一步安装即可。Oracle_VM_VirtualBox_Extension_Pack-4.1.40-101594.vbox-extpack。之所以选用Virtual Box是因为它比VMWare更加稳定。使用VMWare运行hadoop集群或者spark集群时，有时会出现休眠后重启时，某些进程莫名挂掉的问题。而Virtual Box没有这种情况。之所以选择Virtual Box 4.1版本，是因为更高的版本就不兼容win7了。\n由于用的是Mac，所以自己安装VirturlBox。\n\n[Virtual Box 官网](https://www.virtualbox.org/)\n\n### CentOS 6.5安装\n  \n使用CentOS 6.5镜像即可，CentOS-6.5-i386-minimal.iso。\n创建虚拟机：打开Virtual Box，点击“新建”按钮，点击“下一步”，输入虚拟机名称为spark1，选择操作系统为Linux，选择版本为Red Hat，分配1024MB内存，后面的选项全部用默认，在Virtual Disk File location and size中，一定要自己选择一个目录来存放虚拟机文件，最后点击“create”按钮，开始创建虚拟机。\n设置虚拟机网卡：选择创建好的spark1虚拟机，点击“设置”按钮，在网络一栏中，连接方式中，选择“Bridged Adapter”。\n安装虚拟机中的CentOS 6.5操作系统：选择创建好的虚拟机spark1，点击“开始”按钮，选择安装介质（即本地的CentOS 6.5镜像文件），选择第一项开始安装-Skip-欢迎界面Next-选择默认语言-Baisc Storage Devices-Yes, discard any data-主机名:spark1-选择时区-设置初始密码为hadoop-Replace Existing Linux System-Write changes to disk-CentOS 6.5自己开始安装。\n安装完以后，CentOS会提醒你要重启一下，就是reboot，你就reboot就可以了。\n\n### CentOS 6.5网络配置\n  \n先临时性设置虚拟机ip地址：ifconfig eth0 192.168.1.107，在/etc/hosts文件中配置本地ip（192.168.1.107）到host（spark1）的映射。\n配置windows主机上的hosts文件：C:\\Windows\\System32\\drivers\\etc\\hosts，192.168.1.107 spark1。\n使用SecureCRT从windows上连接虚拟机，自己可以上网下一个SecureCRT的绿色版，网上很多。\n永久性配置CentOS网络。\n```\nvi /etc/sysconfig/network-scripts/ifcfg-eth0\nDEVICE=eth0\nTYPE=Ethernet\nONBOOT=yes\nBOOTPROTO=static\nIPADDR=192.168.1.107\nNETMASK=255.255.255.0\nGATEWAY=192.168.1.1\n```\n\n重启网卡 service network restart。\n即使更换了ip地址，重启网卡，可能还是联不通网。那么可以先将IPADDR、NETMASK、GATEWAY给删除，将BOOTPROTO改成dhcp。然后用service network restart重启网卡。此时linux会自动给分配一个ip地址，用ifconfig查看分配的ip地址。然后再次按照之前说的，配置网卡，将ip改成自动分配的ip地址。最后再重启一次网卡。\n\n由于用的是Mac，所以自己安装SecureCRT，自己安装破解版。\n\n[SecureCRT官网](https://www.vandyke.com/products/securecrt/)\n\n### CentOS 6.5防火墙和DNS配置\n  \n关闭防火墙\n```\nservice iptables stop\nchkconfig iptables off\nvi /etc/selinux/config\nSELINUX=disabled\n```\n自己在win7的控制面板中，关闭windows的防火墙！\n\n配置dns服务器\n```\nvi /etc/resolv.conf\nnameserver 61.139.2.69\nping www.baidu.com\n```\n\n### CentOS 6.5 yum配置\n\n修改repo，使用WinSCP（网上很多，自己下一个），将CentOS6-Base-163.repo上传到CentOS中的/usr/local目录下。\n```\ncd /etc/yum.repos.d/\nrm -rf *\n```\n将自己的repo文件移动到/etc/yum.repos.d/目录中：cp /usr/local/CentOS6-Base-163.repo .，修改repo文件，把所有gpgcheck属性修改为0。\n\n配置yum\n```\nyum clean all\nyum makecache\nyum install telnet\n```\n\n### JDK 1.7安装\n\n将jdk-7u60-linux-i586.rpm通过WinSCP上传到虚拟机中\n安装JDK：rpm -ivh jdk-7u65-linux-i586.rpm\n配置jdk相关的环境变量\n```\nvi .bashrc\nexport JAVA_HOME=/usr/java/latest\nexport PATH=$PATH:$JAVA_HOME/bin\nsource .bashrc\n```\n测试jdk安装是否成功：\n```\njava -version\nrm -f /etc/udev/rules.d/70-persistent-net.rules\n```\n由于用的是Mac，所以自己安装FileZilla，没有安装WinSCP。\n\n### 安装第二台和第三台虚拟机\n\n安装上述步骤，再安装两台一模一样环境的虚拟机，因为后面hadoop和spark都是要搭建集群的。\n集群的最小环境就是三台。因为后面要搭建ZooKeeper、kafka等集群。\n另外两台机器的hostname分别设置为spark2和spark3即可，ip分别为192.168.1.108和192.168.1.109\n在安装的时候，另外两台虚拟机的centos镜像文件必须重新拷贝一份，放在新的目录里，使用各自自己的镜像文件。\n虚拟机的硬盘文件也必须重新选择一个新的目录，以更好的区分。\n安装好之后，记得要在三台机器的/etc/hosts文件中，配置全三台机器的ip地址到hostname的映射，而不能只配置本机，这个很重要！\n在windows的hosts文件中也要配置全三台机器的ip地址到hostname的映射。\n\n### 配置集群ssh免密码登录\n  \n首先在三台机器上配置对本机的ssh免密码登录。生成本机的公钥，过程中不断敲回车即可，ssh-keygen命令默认会将公钥放在/root/.ssh目录下。ssh-keygen -t rsa。将公钥复制为authorized_keys文件，此时使用ssh连接本机就不需要输入密码了。\n```\ncd /root/.ssh\ncp id_rsa.pub authorized_keys\n```\n\n接着配置三台机器互相之间的ssh免密码登录。使用ssh-copy-id -i spark命令将本机的公钥拷贝到指定机器的authorized_keys文件中（方便好用）。\n\n## Hadoop 2.4.1集群搭建\n\n### 安装hadoop包\n\n使用hadoop-2.4.1.tar.gz，使用WinSCP上传到CentOS的/usr/local目录下\n将hadoop包进行解压缩：tar -zxvf hadoop-2.4.1.tar.gz\n对hadoop目录进行重命名：mv hadoop-2.4.1 hadoop\n配置hadoop相关环境变量\n```\nvi .bashrc\nexport HADOOP_HOME=/usr/local/hadoop\nexport PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin\nsource .bashrc\n```\n\n由于用的是Mac，所以自己使用FileZilla，不是WinSCP。\n\n### 修改core-site.xml\n```\n<property>\n  <name>fs.default.name</name>\n  <value>hdfs://spark1:9000</value>\n</property>\n```\n### 修改hdfs-site.xml\n```\n<property>\n  <name>dfs.name.dir</name>\n  <value>/usr/local/data/namenode</value>\n</property>\n<property>\n  <name>dfs.data.dir</name>\n  <value>/usr/local/data/datanode</value>\n</property>\n<property>\n  <name>dfs.tmp.dir</name>\n  <value>/usr/local/data/tmp</value>\n</property>\n<property>\n  <name>dfs.replication</name>\n  <value>3</value>\n</property>\n修改mapred-site.xml\n<property>\n  <name>mapreduce.framework.name</name>\n  <value>yarn</value>\n</property>\n修改yarn-site.xml\n<property>\n  <name>yarn.resourcemanager.hostname</name>\n  <value>spark1</value>\n</property>\n<property>\n  <name>yarn.nodemanager.aux-services</name>\n  <value>mapreduce_shuffle</value>\n</property>\n```\n### 修改slaves文件\n```\nspark1\nspark2\nspark3\n```\n### 在另外两台机器上搭建hadoop\n使用如上配置在另外两台机器上搭建hadoop，可以使用scp命令将spark1上面的hadoop安装包和.bashrc配置文件都拷贝过去。\n```\nscp -r /usr/local/hadoop root@spark2:/usr/local/\nscp -r /usr/local/hadoop root@spark3:/usr/local/\nscp .bashrc root@spark2:~/\nscp .bashrc root@spark3:~/\n```\n要记得对.bashrc文件进行source，以让它生效。\n记得在spark2和spark3的/usr/local目录下创建data目录。\n\n### 启动hdfs集群\n\n格式化namenode：在spark1上执行以下命令，```hdfs namenode -format```\n启动hdfs集群：```start-dfs.sh```\n 验证启动是否成功：jps、访问spark:50070 (关闭CentOS 6.5 防火墙)。spark1：namenode、datanode、secondarynamenode。spark2：datanode。spark3：datanode。\n\n### 启动yarn集群\n启动yarn集群：```start-yarn.sh```\n 验证启动是否成功：jps、访问spark:8088(关闭CentOS 6.5 防火墙)。spark1：resourcemanager、nodemanager。spark2：nodemanager。spark3：nodemanager。\n\n### Hive 0.13搭建\n安装hive包\n将课程提供的apache-hive-0.13.1-bin.tar.gz使用WinSCP上传到spark1的/usr/local目录下。\n解压缩hive安装包：tar -zxvf apache-hive-0.13.1-bin.tar.gz。\n重命名hive目录：mv apache-hive-0.13.1-bin hive。\n配置hive相关的环境变量。\n```\nvi .bashrc\nexport HIVE_HOME=/usr/local/hive\nexport PATH=$HIVE_HOME/bin\nsource .bashrc\n```\n### 安装mysql\n在spark1上安装mysql\n使用yum安装mysql server\n```\nyum install -y mysql-server\nservice mysqld start\nchkconfig mysqld on\n```\n使用yum安装mysql connector\n```\nyum install -y mysql-connector-java\n```\n将mysql connector拷贝到hive的lib包中\n```\ncp /usr/share/java/mysql-connector-java-5.1.17.jar /usr/local/hive/lib\n```\n在mysql上创建hive元数据库，并对hive进行授权\n```\ncreate database if not exists hive_metadata;\ngrant all privileges on hive_metadata.* to 'hive'@'%' identified by 'hive';\ngrant all privileges on hive_metadata.* to 'hive'@'localhost' identified by 'hive';\ngrant all privileges on hive_metadata.* to 'hive'@'spark1' identified by 'hive';\nflush privileges;\nuse hive_metadata;\n```\n### 配置hive-site.xml\n```\nmv hive-default.xml.template hive-site.xml\nvi hive-site.xml\n<property>\n  <name>javax.jdo.option.ConnectionURL</name>\n  <value>jdbc:mysql://spark1:3306/hive_metadata?createDatabaseIfNotExist=true</value>\n</property>\n<property>\n  <name>javax.jdo.option.ConnectionDriverName</name>\n  <value>com.mysql.jdbc.Driver</value>\n</property>\n<property>\n  <name>javax.jdo.option.ConnectionUserName</name>\n  <value>hive</value>\n</property>\n<property>\n  <name>javax.jdo.option.ConnectionPassword</name>\n  <value>hive</value>\n</property>\n<property>\n  <name>hive.metastore.warehouse.dir</name>\n  <value>/user/hive/warehouse</value>\n</property>\n```\n### 配置hive-env.sh和hive-config.sh\n```\nmv hive-env.sh.template hive-env.sh\nvi /usr/local/hive/bin/hive-config.sh\nexport JAVA_HOME=/usr/java/latest\nexport HIVE_HOME=/usr/local/hive\nexport HADOOP_HOME=/usr/local/hadoop\n```\n### 验证hive是否安装成功\n\n直接输入hive命令，可以进入hive命令行\n\n## ZooKeeper 3.4.5集群搭建\n\n### 安装ZooKeeper包\n将zookeeper-3.4.5.tar.gz使用WinSCP拷贝到spark1的/usr/local目录下。\n对zookeeper-3.4.5.tar.gz进行解压缩：tar -zxvf zookeeper-3.4.5.tar.gz。\n对zookeeper目录进行重命名：mv zookeeper-3.4.5 zk。\n配置zookeeper相关的环境变量。\n```\nvi .bashrc\nexport ZOOKEEPER_HOME=/usr/local/zk\nexport PATH=$ZOOKEEPER_HOME/bin\nsource .bashrc\n```\n### 配置zoo.cfg\n```\ncd zk/conf\nmv zoo_sample.cfg zoo.cfg\nvi zoo.cfg\ndataDir=/usr/local/zk/data\nserver.0=spark1:2888:3888\t\nserver.1=spark2:2888:3888\nserver.2=spark3:2888:3888\n```\n### 设置zk节点标识\n```\ncd zk\nmkdir data\ncd data\nvi myid\n0\n```\n### 搭建zk集群\n在另外两个节点上按照上述步骤配置ZooKeeper，使用scp将zk和.bashrc拷贝到spark2和spark3上即可。\n```\nscp -r /usr/local/zk root@spark2:/usr/local/\nscp -r /usr/local/zk root@spark3:/usr/local/\nscp ~/.bashrc root@spark2:~/\nscp ~/.bashrc root@spark3:~/\nsource ~/.bashrc\n```\n唯一的区别是spark2和spark3的标识号分别设置为1和2。\n\n### 启动ZooKeeper集群\n分别在三台机器上执行：zkServer.sh start。\n检查ZooKeeper状态：zkServer.sh status。\n\n## kafka_2.9.2-0.8.1集群搭建\n\n### 安装scala 2.11.4\n  \n将课程提供的scala-2.11.4.tgz使用WinSCP拷贝到spark1的/usr/local目录下。\n对scala-2.11.4.tgz进行解压缩：tar -zxvf scala-2.11.4.tgz。\n对scala目录进行重命名：mv scala-2.11.4 scala。\n\n### 配置scala相关的环境变量。\n```\nvi .bashrc\nexport SCALA_HOME=/usr/local/scala\nexport PATH=$SCALA_HOME/bin\nsource .bashrc\n```\n查看scala是否安装成功：scala -version\n按照上述步骤在spark2和spark3机器上都安装好scala。使用scp将scala和.bashrc拷贝到spark2和spark3上即可。\n```\nscp -r /usr/local/scala root@spark2:/usr/local/\nscp -r /usr/local/scala root@spark3:/usr/local/\nscp ~/.bashrc root@spark2:~/\nscp ~/.bashrc root@spark3:~/\nsource ~/.bashrc\n```\n### 安装Kafka包\n将课程提供的kafka_2.9.2-0.8.1.tgz使用WinSCP拷贝到spark1的/usr/local目录下。\n对kafka_2.9.2-0.8.1.tgz进行解压缩：tar -zxvf kafka_2.9.2-0.8.1.tgz。\n对kafka目录进行改名：mv kafka_2.9.2-0.8.1 kafka。\n\n### 配置kafka。\n```\nvi /usr/local/kafka/config/server.properties\n```\nbroker.id：依次增长的整数，0、1、2、3、4，集群中Broker的唯一id\nzookeeper.connect=192.168.1.107:2181,192.168.1.108:2181,192.168.1.109:2181\n安装slf4j。\n将课程提供的slf4j-1.7.6.zip上传到/usr/local目录下。unzip slf4j-1.7.6.zip。\n把slf4j中的slf4j-nop-1.7.6.jar复制到kafka的libs目录下面。\n\n### 搭建kafka集群\n按照上述步骤在spark2和spark3分别安装kafka。用scp把kafka拷贝到spark2和spark3行即可。\n```\nscp -r /usr/local/kafka root@spark2:/usr/local/\nscp -r /usr/local/kafka root@spark3:/usr/local/\n```\n唯一区别的，就是server.properties中的broker.id，要设置为1和2。\n\n### 启动kafka集群\n在三台机器上分别执行以下命令：nohup bin/kafka-server-start.sh config/server.properties &。\n\n解决kafka Unrecognized VM option ‘UseCompressedOops’问题。\n```\nvi bin/kafka-run-class.sh \nif [ -z \"$KAFKA_JVM_PERFORMANCE_OPTS\" ]; then\n  KAFKA_JVM_PERFORMANCE_OPTS=\"-server  -XX:+UseCompressedOops -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true\"\nfi\n```\n去掉-XX:+UseCompressedOops即可\n使用jps检查启动是否成功。\n\n### 测试kafka集群\n使用基本命令检查kafka是否搭建成功。\n```\nbin/kafka-topics.sh --zookeeper spark1:2181,spark2:2181,spark3:2181 --topic Test --replication-factor 1 --partitions 1 --create\n\nbin/kafka-console-producer.sh --broker-list spark1:9092,spark2:9092,spark3:9092 --topic Test\n\nbin/kafka-console-consumer.sh --zookeeper spark1:2181,spark2:2181,spark3:2181 --topic Test --from-beginning\n```\n\n## Spark 1.3.0集群搭建\n\n## 安装spark包\n将spark-1.3.0-bin-hadoop2.4.tgz使用WinSCP上传到/usr/local目录下。\n解压缩spark包：tar zxvf spark-1.3.0-bin-hadoop2.4.tgz。\n更改spark目录名：mv spark-1.3.0-bin-hadoop2.4 spark。\n设置spark环境变量。\n```\nvi .bashrc\nexport SPARK_HOME=/usr/local/spark\nexport PATH=$SPARK_HOME/bin\nexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib\nsource .bashrc\n```\n### 修改spark-env.sh文件\n```\ncd /usr/local/spark/conf\ncp spark-env.sh.template spark-env.sh\nvi spark-env.sh\nexport JAVA_HOME=/usr/java/latest\nexport SCALA_HOME=/usr/local/scala\nexport SPARK_MASTER_IP=192.168.1.107\nexport SPARK_WORKER_MEMORY=1g\nexport HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop\n```\n### 修改slaves文件\n```\ncp slaves.template slaves\nvi slaves\nspark2\nspark3\n```\n### 安装spark集群\n在另外两个节点进行一模一样的配置，使用scp将spark和.bashrc拷贝到spark2和spark3即可。\n```\nscp -r /usr/local/spark root@spark2:/usr/local/\nscp -r /usr/local/spark root@spark3:/usr/local/\nscp ~/.bashrc root@spark2:~/\nscp ~/.bashrc root@spark3:~/\nsource ~/.bashrc\n```\n### 启动spark集群\n在spark目录下的sbin目录\n执行，/start-all.sh\n使用jsp和8080端口可以检查集群是否启动成功\n进入spark-shell查看是否正常\n\n## WordCount\n\n### Java开发wordcount程序\n\n### 安装eclipse\n[eclipse download](https://www.eclipse.org/downloads/)\n\n### 配置maven\n\n打开eclipse->新建Maven Project->maven-archetype-quickstart->groupId:cn.spark->artifactId:spark-study-java->package:cn.spark.study->替换pom.xml-quick fix(第一次要等待很长时间)->Buid Baph->Configure Build Path->Libaries->JRE System Libarary->Edit->Workspace default JRE。\n```\n//: pom.xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>cn.spark</groupId>\n  <artifactId>spark-study-java</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <packaging>jar</packaging>\n\n  <name>spark-study-java</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n\t  <groupId>org.apache.spark</groupId>\n\t  <artifactId>spark-core_2.10</artifactId>\n\t  <version>1.3.0</version>\n\t</dependency>\n\t<dependency>\n\t  <groupId>org.apache.spark</groupId>\n\t  <artifactId>spark-sql_2.10</artifactId>\n\t  <version>1.3.0</version>\n\t  </dependency>\n\t<dependency>\n\t  <groupId>org.apache.spark</groupId>\n\t  <artifactId>spark-hive_2.10</artifactId>\n\t  <version>1.3.0</version>\n\t</dependency>\n\t<dependency>\n\t  <groupId>org.apache.spark</groupId>\n\t  <artifactId>spark-streaming_2.10</artifactId>\n\t  <version>1.3.0</version>\n\t</dependency>\n\t<dependency>\n\t  <groupId>org.apache.hadoop</groupId>\n\t  <artifactId>hadoop-client</artifactId>\n\t  <version>2.4.1</version>\n\t</dependency>\n\t<dependency>\n\t  <groupId>org.apache.spark</groupId>\n\t  <artifactId>spark-streaming-kafka_2.10</artifactId>\n\t  <version>1.3.0</version>\n\t</dependency>\n  </dependencies>\n  \n  <build>\n    <sourceDirectory>src/main/java</sourceDirectory>\n    <testSourceDirectory>src/main/test</testSourceDirectory>\n\t\n    <plugins>\n      <plugin>\n        <artifactId>maven-assembly-plugin</artifactId>\n        <configuration>\n          <descriptorRefs>\n            <descriptorRef>jar-with-dependencies</descriptorRef>\n          </descriptorRefs>\n          <archive>\n            <manifest>\n              <mainClass></mainClass>\n            </manifest>\n          </archive>\n        </configuration>\n        <executions>\n          <execution>\n            <id>make-assembly</id>\n            <phase>package</phase>\n            <goals>\n              <goal>single</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>exec-maven-plugin</artifactId>\n        <version>1.2.1</version>\n        <executions>\n          <execution>\n            <goals>\n              <goal>exec</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <executable>java</executable>\n          <includeProjectDependencies>true</includeProjectDependencies>\n          <includePluginDependencies>false</includePluginDependencies>\n          <classpathScope>compile</classpathScope>\n          <mainClass>cn.spark.study.App</mainClass>\n        </configuration>\n      </plugin>\n\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <source>1.6</source>\n          <target>1.6</target>\n        </configuration>\n      </plugin>\n\n    </plugins>\n  </build>\n</project>\n```\n\n### 新建spark.txt，新建包cn.spark.study.core，新建WordCountLocal.java\n```\n//: spark.txt\nSpark is new technology that sits on top of Hadoop Distributed File System (HDFS) that is characterized as ¡°a fast and general engine for large-scale data processing.¡± Spark has three key features that make it the most interesting up and coming technology to rock the big data world since Apache Hadoop in 2005.\n\n1. For iterative analysis like logistic regression, Random Forests, or other advanced algorithms, Spark has demonstrated 100X increase in speed that scales to hundreds of millions of rows.\n\n2. Spark has native support for the latest and greatest programming languages Java, Scala, and of course Python.\n\n3. Spark has generality or platform compatibility in both directions meaning it integrates nicely with SQL engines (Shark), Machine Learning (MLlib), and streaming (Spark Streaming) without requiring new software installed on the cluster using Hadoop¡¯s new YARN cluster manager.\n\nAt Alpine, we have made it dead simple to get started with Spark by including the technology in our latest build out of the box. We require no additional software or hardware to leverage our extensive list of operators for data transformation, exploration, and building advanced analytic models. We leverage Hadoop Yarn (Hadoop NextGen) to launch Spark job without any pre-installation of Spark or modification of cluster configuration. This empowers our customers to have seamless integration of our Spark implementation and their Hadoop stack. For example, we have analyzed 50 Million rows of account data in 50 seconds on a 20 node cluster recently at last month GigaOM conference.\n\nAs a Spark certified company, Alpine Data Labs will be at the Summit. We¡¯d love to see you there!\n\nWant to meet with us?  Click here to set up an appointment at your convenience. Or just send a tweet to our Product & Marketing Director Joel Horwitz @JSHorwitz.\n```\n\n```\n//: WordCountLocal.java\npackage cn.spark.study.core;\n\nimport java.util.Arrays;\n\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.api.java.JavaPairRDD;\nimport org.apache.spark.api.java.JavaRDD;\nimport org.apache.spark.api.java.JavaSparkContext;\nimport org.apache.spark.api.java.function.FlatMapFunction;\nimport org.apache.spark.api.java.function.Function2;\nimport org.apache.spark.api.java.function.PairFunction;\nimport org.apache.spark.api.java.function.VoidFunction;\n\nimport scala.Tuple2;\n\n/**\n * 使用java开发本地测试wordcount程序\n * @author xdx\n *\n */\npublic class WordCountLocal {\n\tpublic static void main(String[] args) {\n\t\t// 第一步：创建SparkConf对象，设置Spark应用的配置信息\n\t\t// 使用setMaster()可以设置Spark应用程序要连接的Spark集群的master节点的url\n\t\t// 但是如果设置为local则代表，在本地运行\n\t\tSparkConf conf = new SparkConf()\n\t\t\t\t.setAppName(\"WordCountLocal\")\n\t\t\t\t.setMaster(\"local\");\n\t\t\n\t\t// 第二步：创建JavaSparkContext对象\n\t\t// 在Spark中，SparkContext是Spark所有功能的一个入口，你无论是用java、scala，甚至是python编写\n\t\t\t// 都必须要有一个SparkContext，它的主要作用，包括初始化Spark应用程序所需的一些核心组件，包括\n\t\t\t// 调度器（DAGSchedule、TaskScheduler），还会去到Spark Master节点上进行注册，等等\n\t\t// 一句话，SparkContext，是Spark应用中，可以说是最最重要的一个对象\n\t\t// 但是呢，在Spark中，编写不同类型的Spark应用程序，使用的SparkContext是不同的，如果使用scala，\n\t\t\t// 使用的就是原生的SparkContext对象\n\t\t\t// 但是如果使用Java，那么就是JavaSparkContext对象\n\t\t\t// 如果是开发Spark SQL程序，那么就是SQLContext、HiveContext\n\t\t\t// 如果是开发Spark Streaming程序，那么就是它独有的SparkContext\n\t\t\t// 以此类推\n\t\tJavaSparkContext sc = new JavaSparkContext(conf);\n\t\t\n\t\t// 第三步：要针对输入源（hdfs文件、本地文件，等等），创建一个初始的RDD\n\t\t// 输入源中的数据会打散，分配到RDD的每个partition中，从而形成一个初始的分布式的数据集\n\t\t// 我们这里呢，因为是本地测试，所以呢，就是针对本地文件\n\t\t// SparkContext中，用于根据文件类型的输入源创建RDD的方法，叫做textFile()方法\n\t\t// 在Java中，创建的普通RDD，都叫做JavaRDD\n\t\t// 在这里呢，RDD中，有元素这种概念，如果是hdfs或者本地文件呢，创建的RDD，每一个元素就相当于\n\t\t// 是文件里的一行\n\t\tJavaRDD<String> lines = sc.textFile(\"spark.txt\");\n\t\t\n\t\t// 第四步：对初始RDD进行transformation操作，也就是一些计算操作\n\t\t// 通常操作会通过创建function，并配合RDD的map、flatMap等算子来执行\n\t\t// function，通常，如果比较简单，则创建指定Function的匿名内部类\n\t\t// 但是如果function比较复杂，则会单独创建一个类，作为实现这个function接口的类\n\t\t\n\t\t// 先将每一行拆分成单个的单词\n\t\t// FlatMapFunction，有两个泛型参数，分别代表了输入和输出类型\n\t\t// 我们这里呢，输入肯定是String，因为是一行一行的文本，输出，其实也是String，因为是每一行的文本\n\t\t// 这里先简要介绍flatMap算子的作用，其实就是，将RDD的一个元素，给拆分成一个或多个元素\n\t\tJavaRDD<String> words = lines.flatMap(new FlatMapFunction<String, String>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Iterable<String> call(String line) throws Exception {\n\t\t\t\treturn Arrays.asList(line.split(\" \"));\n\t\t\t}\n\t\t});\n\t\t\n\t\t// 接着，需要将每一个单词，映射为(单词, 1)的这种格式\n\t\t\t// 因为只有这样，后面才能根据单词作为key，来进行每个单词的出现次数的累加\n\t\t// mapToPair，其实就是将每个元素，映射为一个(v1,v2)这样的Tuple2类型的元素\n\t\t\t// 如果大家还记得scala里面讲的tuple，那么没错，这里的tuple2就是scala类型，包含了两个值\n\t\t// mapToPair这个算子，要求的是与PairFunction配合使用，第一个泛型参数代表了输入类型\n\t\t\t// 第二个和第三个泛型参数，代表的输出的Tuple2的第一个值和第二个值的类型\n\t\t// JavaPairRDD的两个泛型参数，分别代表了tuple元素的第一个值和第二个值的类型\n\t\tJavaPairRDD<String, Integer> pairs = words.mapToPair(new PairFunction<String, String, Integer>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Tuple2<String, Integer> call(String word) throws Exception {\n\t\t\t\treturn new Tuple2<String, Integer>(word, 1);\n\t\t\t}\n\t\t});\n\t\t\n\t\t// 接着，需要以单词作为key，统计每个单词出现的次数\n\t\t// 这里要使用reduceByKey这个算子，对每个key对应的value，都进行reduce操作\n\t\t// 比如JavaPairRDD中有几个元素，分别为(hello, 1) (hello, 1) (hello, 1) (world, 1)\n\t\t// reduce操作，相当于是把第一个值和第二个值进行计算，然后再将结果与第三个值进行计算\n\t\t// 比如这里的hello，那么就相当于是，首先是1 + 1 = 2，然后再将2 + 1 = 3\n\t\t// 最后返回的JavaPairRDD中的元素，也是tuple，但是第一个值就是每个key，第二个值就是key的value\n\t\t// reduce之后的结果，相当于就是每个单词出现的次数\n\t\tJavaPairRDD<String, Integer> wordCounts = pairs.reduceByKey(new Function2<Integer, Integer, Integer>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Integer call(Integer v1, Integer v2) throws Exception {\n\t\t\t\treturn v1 + v2;\n\t\t\t}\n\t\t});\n\t\t\n\t\t// 到这里为止，我们通过几个Spark算子操作，已经统计出了单词的次数\n\t\t// 但是，之前我们使用的flatMap、mapToPair、reduceByKey这种操作，都叫做transformation操作\n\t\t// 一个Spark应用中，光是有transformation操作，是不行的，是不会执行的，必须要有一种叫做action\n\t\t// 接着，最后，可以使用一种叫做action操作的，比如说，foreach，来触发程序的执行\n\t\twordCounts.foreach(new VoidFunction<Tuple2<String, Integer>>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void call(Tuple2<String, Integer> wordCount) throws Exception {\n\t\t\t\tSystem.out.println(wordCount._1 + \" appeared \" + wordCount._2 + \" times.\");\n\t\t\t}\n\t\t});\n\t\t\n\t\tsc.close();\n\t}\n}\n/* Output:\nHadoop appeared 1 times.\nprocessing. appeared 1 times.\nSpark appeared 6 times.\nit appeared 2 times.\nparallel appeared 1 times.\nits appeared 1 times.\noperators appeared 1 times.\nYARN, appeared 1 times.\nengine. appeared 1 times.\nRuns appeared 1 times.\nstandalone appeared 1 times.\noptimizer, appeared 1 times.\nshells. appeared 1 times.\ncomplex appeared 1 times.\nstate-of-the-art appeared 1 times.\nlearning, appeared 1 times.\nUse appeared 1 times.\napplications appeared 1 times.\nover appeared 1 times.\nstreaming, appeared 1 times.\neasy appeared 1 times.\nfor appeared 3 times.\nfaster. appeared 1 times.\nmake appeared 1 times.\nengine appeared 1 times.\nthese appeared 1 times.\nperformance appeared 1 times.\nthe appeared 3 times.\napplication. appeared 1 times.\nSQL. appeared 1 times.\nDataFrames, appeared 1 times.\nMesos, appeared 2 times.\nR, appeared 2 times.\ncan appeared 4 times.\nHDFS, appeared 1 times.\nbuild appeared 1 times.\nCassandra, appeared 1 times.\nachieves appeared 1 times.\nApache appeared 6 times.\nincluding appeared 1 times.\nlarge-scale appeared 1 times.\nKubernetes, appeared 1 times.\nsources. appeared 2 times.\nanalytics. appeared 1 times.\nlibraries appeared 2 times.\nCombine appeared 1 times.\nquery appeared 1 times.\nbatch appeared 1 times.\nIt appeared 1 times.\nscheduler, appeared 1 times.\nboth appeared 1 times.\nstreaming appeared 1 times.\nAccess appeared 1 times.\nmachine appeared 1 times.\nEverywhere appeared 1 times.\nGenerality appeared 1 times.\nstack appeared 1 times.\nAnd appeared 1 times.\nhigh appeared 1 times.\nSpeed appeared 1 times.\nis appeared 1 times.\n80 appeared 1 times.\nrun appeared 1 times.\nseamlessly appeared 1 times.\nKubernetes. appeared 1 times.\nSpark™ appeared 1 times.\nruns appeared 1 times.\nsame appeared 1 times.\nYou appeared 2 times.\non appeared 5 times.\ninteractively appeared 1 times.\nEase appeared 1 times.\ndata appeared 4 times.\napps. appeared 1 times.\noffers appeared 1 times.\nin appeared 4 times.\nusing appeared 2 times.\nDAG appeared 1 times.\nAlluxio, appeared 1 times.\ndiverse appeared 1 times.\n100x appeared 1 times.\nexecution appeared 1 times.\nhundreds appeared 1 times.\nPython, appeared 2 times.\nfrom appeared 1 times.\nother appeared 1 times.\nstandalone, appeared 1 times.\nuse appeared 1 times.\nphysical appeared 1 times.\nworkloads appeared 1 times.\nRun appeared 1 times.\nmode, appeared 1 times.\nEC2, appeared 1 times.\nyou appeared 1 times.\nthat appeared 1 times.\nor appeared 2 times.\na appeared 5 times.\ndata, appeared 1 times.\nhigh-level appeared 1 times.\nJava, appeared 1 times.\nSQL appeared 2 times.\nHive, appeared 1 times.\nHadoop, appeared 1 times.\nto appeared 1 times.\n appeared 9 times.\nanalytics appeared 1 times.\nGraphX, appeared 1 times.\nWrite appeared 1 times.\nof appeared 3 times.\ncluster appeared 1 times.\naccess appeared 1 times.\nMLlib appeared 1 times.\nquickly appeared 1 times.\nScala, appeared 2 times.\nHBase, appeared 1 times.\nand appeared 8 times.\nunified appeared 1 times.\nSQL, appeared 1 times.\ncombine appeared 1 times.\nStreaming. appeared 1 times.\npowers appeared 1 times.\ncloud. appeared 1 times.\n*///:~\n```\n### spark-submit提交到spark集群进行执行\n\n编写WordCountCluster.java\n```\n//: WordCountCluster.java\npackage cn.spark.study.core;\n\nimport java.util.Arrays;\n\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.api.java.JavaPairRDD;\nimport org.apache.spark.api.java.JavaRDD;\nimport org.apache.spark.api.java.JavaSparkContext;\nimport org.apache.spark.api.java.function.FlatMapFunction;\nimport org.apache.spark.api.java.function.Function2;\nimport org.apache.spark.api.java.function.PairFunction;\nimport org.apache.spark.api.java.function.VoidFunction;\n\nimport scala.Tuple2;\n\n/**\n * 将java开发的wordcount程序部署到spark集群上运行\n * @author xdx\n *\n */\npublic class WordCountCluster {\n\tpublic static void main(String[] args) {\n\t\t// 如果要在spark集群上运行，需要修改的，只有两个地方\n\t\t// 第一，将SparkConf的setMaster()方法给删掉，默认它自己会去连接\n\t\t// 第二，我们针对的不是本地文件了，修改为hadoop hdfs上的真正的存储大数据的文件\n\t\t\n\t\t// 实际执行步骤：\n\t\t// 1、将spark.txt文件上传到hdfs上去\n\t\t// 2、使用我们最早在pom.xml里配置的maven插件，对spark工程进行打包\n\t\t// 3、将打包后的spark工程jar包，上传到机器上执行\n\t\t// 4、编写spark-submit脚本\n\t\t// 5、执行spark-submit脚本，提交spark应用到集群执行\n\t\t\n\t\tSparkConf conf = new SparkConf()\n\t\t\t\t.setAppName(\"WordCountCluster\");\n\t\t\n\t\tJavaSparkContext sc = new JavaSparkContext(conf);\n\t\t\n\t\tJavaRDD<String> lines = sc.textFile(\"hdfs://spark1:9000/spark.txt\");\n\t\t\n\t\tJavaRDD<String> words = lines.flatMap(new FlatMapFunction<String, String>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Iterable<String> call(String line) throws Exception {\n\t\t\t\treturn Arrays.asList(line.split(\" \"));\n\t\t\t}\n\t\t});\n\t\t\n\t\tJavaPairRDD<String, Integer> pairs = words.mapToPair(new PairFunction<String, String, Integer>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Tuple2<String, Integer> call(String word) throws Exception {\n\t\t\t\treturn new Tuple2<String, Integer>(word, 1);\n\t\t\t}\n\t\t});\n\t\t\n\t\tJavaPairRDD<String, Integer> wordCounts = pairs.reduceByKey(new Function2<Integer, Integer, Integer>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override \n\t\t\tpublic Integer call(Integer v1, Integer v2) throws Exception {\n\t\t\t\treturn v1 + v2;\n\t\t\t}\n\t\t});\n\t\t\n\t\twordCounts.foreach(new VoidFunction<Tuple2<String, Integer>>() {\n\t\t\tprivate static final long serialVersionID = 1L;\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void call(Tuple2<String, Integer> wordCount) throws Exception {\n\t\t\t\tSystem.out.println(wordCount._1 + \" appeared \" + wordCount._2 + \" times.\");\n\t\t\t}\n\t\t});\n\t\t\n\t\tsc.close();\n\t}\n}\n/* Output:\n*///:~\n```\n\n将spark.txt上传到spark1，将spark.txt上传到hdfs\n将spark-study-java打包，Run As->Run Configurations->Maven Build->New->spark-study-java->Run\n将/spark-study-java/target/spark-study-java-0.0.1-SNAPSHOT-jar-with-dependencies.jar上传到spark\n编写wordcount.sh，使用spark-submit进行执行\n\n```\n//: wordcount.sh\n/usr/local/spark/bin/spark-submit \\\n--class cn.spark.sparktest.core.WordCountCluster \\\n--num-executors 3 \\\n--driver-memory 100m \\\n--executor-memory 100m \\\n--executor-cores 3 \\\n/root/Workspace/SparkProjects/wordcount/SparkTest-0.0.1-SNAPSHOT-jar-with-dependencies.jar \\\n```\n\n### Scala开发wordcount程序\nscala ide for eclipse download\n在Java Build Path中，添加spark依赖包(spark-assembly-1.3.0-hadoop2.4.0.jar)，如果与scala ide for eclipse原生的scala版本发生冲突，则移除原生的scala，重新配置scala compiler\n```\n//: WordCount.scala\npackage cn.spark.study.core\n\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\n\n/**\n * @author xdx\n */\nobject WordCount {\n  def main(args: Array[String]) {\n    val conf = new SparkConf()\n      .setAppName(\"WordCount\")\n      .setMaster(\"local\")\n    val sc = new SparkContext(conf)\n    val lines = sc.textFile(\"spark.txt\", 1)\n    val words = lines.flatMap { line => line.split(\" \") }\n    val pairs = words.map { word => (word, 1) }\n    val wordCounts = pairs.reduceByKey { _ + _ }\n    wordCounts.foreach(wordCount => println(wordCount._1 + \" appeared \" + wordCount._2 + \" times.\"))\n  }\n}\n/* Output:\n(MLlib), appeared 1 times.\nFor appeared 2 times.\nProduct appeared 1 times.\nit appeared 3 times.\noperators appeared 1 times.\nsits appeared 1 times.\nHadoop��s appeared 1 times.\nhave appeared 3 times.\ntweet appeared 1 times.\nstack. appeared 1 times.\nmodification appeared 1 times.\nconference. appeared 1 times.\nwe appeared 2 times.\nrequiring appeared 1 times.\nThis appeared 1 times.\nsimple appeared 1 times.\nmanager. appeared 1 times.\nsoftware appeared 2 times.\nany appeared 1 times.\nmake appeared 1 times.\nimplementation appeared 1 times.\nseconds appeared 1 times.\n& appeared 1 times.\nout appeared 1 times.\nData appeared 1 times.\nengine appeared 1 times.\ndirections appeared 1 times.\nmonth appeared 1 times.\nthe appeared 7 times.\ntechnology appeared 3 times.\n2. appeared 1 times.\nAlpine, appeared 1 times.\nWe��d appeared 1 times.\nbox. appeared 1 times.\n100X appeared 1 times.\nmost appeared 1 times.\nbuild appeared 1 times.\nlove appeared 1 times.\nbe appeared 1 times.\n��a appeared 1 times.\nApache appeared 1 times.\nAt appeared 1 times.\nAlpine appeared 1 times.\nour appeared 5 times.\nincluding appeared 1 times.\nas appeared 1 times.\nus? appeared 1 times.\ndead appeared 1 times.\niterative appeared 1 times.\nleverage appeared 2 times.\nWant appeared 1 times.\nFile appeared 1 times.\nprogramming appeared 1 times.\naccount appeared 1 times.\nrecently appeared 1 times.\nengines appeared 1 times.\nis appeared 2 times.\nHorwitz appeared 1 times.\non appeared 3 times.\nfeatures appeared 1 times.\npre-installation appeared 1 times.\nspeed appeared 1 times.\nat appeared 3 times.\nusing appeared 1 times.\nconvenience. appeared 1 times.\ntop appeared 1 times.\nintegrates appeared 1 times.\nmeaning appeared 1 times.\ncustomers appeared 1 times.\nnew appeared 3 times.\nWe appeared 2 times.\nPython. appeared 1 times.\nRandom appeared 1 times.\nlaunch appeared 1 times.\nprocessing.�� appeared 1 times.\nset appeared 1 times.\nhas appeared 4 times.\nNextGen) appeared 1 times.\nworld appeared 1 times.\nLearning appeared 1 times.\nseamless appeared 1 times.\nDirector appeared 1 times.\ngenerality appeared 1 times.\nor appeared 4 times.\nYarn appeared 1 times.\nJava, appeared 1 times.\nappointment appeared 1 times.\nAs appeared 1 times.\nYARN appeared 1 times.\nMachine appeared 1 times.\ncompany, appeared 1 times.\ninstalled appeared 1 times.\n50 appeared 2 times.\nsee appeared 1 times.\nof appeared 10 times.\ncluster appeared 4 times.\nthree appeared 1 times.\nanalytic appeared 1 times.\nOr appeared 1 times.\nForests, appeared 1 times.\nrows appeared 1 times.\nmillions appeared 1 times.\nrows. appeared 1 times.\nHadoop appeared 4 times.\ncharacterized appeared 1 times.\nSpark appeared 10 times.\nintegration appeared 1 times.\njob appeared 1 times.\nnative appeared 1 times.\ngreatest appeared 1 times.\ngeneral appeared 1 times.\nMillion appeared 1 times.\nextensive appeared 1 times.\nhere appeared 1 times.\nbig appeared 1 times.\nJoel appeared 1 times.\n1. appeared 1 times.\nsend appeared 1 times.\n(HDFS) appeared 1 times.\n3. appeared 1 times.\nwithout appeared 2 times.\nfor appeared 3 times.\nmodels. appeared 1 times.\nrequire appeared 1 times.\njust appeared 1 times.\n@JSHorwitz. appeared 1 times.\nLabs appeared 1 times.\nlatest appeared 2 times.\nregression, appeared 1 times.\nnode appeared 1 times.\ncoming appeared 1 times.\nyour appeared 1 times.\nup appeared 2 times.\nanalysis appeared 1 times.\n20 appeared 1 times.\nadvanced appeared 2 times.\nDistributed appeared 1 times.\nno appeared 1 times.\nlarge-scale appeared 1 times.\nsince appeared 1 times.\nstarted appeared 1 times.\nempowers appeared 1 times.\ntransformation, appeared 1 times.\nby appeared 1 times.\nlike appeared 1 times.\ncompatibility appeared 1 times.\n2005. appeared 1 times.\nboth appeared 1 times.\nan appeared 1 times.\nstreaming appeared 1 times.\n(Shark), appeared 1 times.\nanalyzed appeared 1 times.\nStreaming) appeared 1 times.\nmade appeared 1 times.\nnicely appeared 1 times.\nconfiguration. appeared 1 times.\nwith appeared 3 times.\nalgorithms, appeared 1 times.\nmeet appeared 1 times.\ndata appeared 4 times.\ninteresting appeared 1 times.\nin appeared 5 times.\nlogistic appeared 1 times.\nGigaOM appeared 1 times.\nSummit. appeared 1 times.\nincrease appeared 1 times.\nhundreds appeared 1 times.\nsupport appeared 1 times.\nscales appeared 1 times.\nClick appeared 1 times.\nbuilding appeared 1 times.\nother appeared 1 times.\ncourse appeared 1 times.\nexploration, appeared 1 times.\nrock appeared 1 times.\nkey appeared 1 times.\nyou appeared 1 times.\nhardware appeared 1 times.\nthat appeared 4 times.\na appeared 3 times.\nfast appeared 1 times.\ntheir appeared 1 times.\nexample, appeared 1 times.\nlast appeared 1 times.\nSQL appeared 1 times.\ndemonstrated appeared 1 times.\nwill appeared 1 times.\nto appeared 10 times.\nget appeared 1 times.\nplatform appeared 1 times.\n appeared 7 times.\nlanguages appeared 1 times.\nlist appeared 1 times.\nthere! appeared 1 times.\n(Spark appeared 1 times.\nScala, appeared 1 times.\nand appeared 7 times.\nMarketing appeared 1 times.\n(Hadoop appeared 1 times.\ncertified appeared 1 times.\nadditional appeared 1 times.\nSystem appeared 1 times.\n*///:~\n```","slug":"Spark1.3.0集群搭建","published":1,"updated":"2023-09-13T07:12:57.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln2n3nw9000dyuzq2sf495dy","content":"<p>Spark1.3.0集群搭建</p>\n<h2 id=\"CentOS-6-5集群搭建\"><a href=\"#CentOS-6-5集群搭建\" class=\"headerlink\" title=\"CentOS 6.5集群搭建\"></a>CentOS 6.5集群搭建</h2><h3 id=\"VirtualBox安装\"><a href=\"#VirtualBox安装\" class=\"headerlink\" title=\"VirtualBox安装\"></a>VirtualBox安装</h3><p>使用Virtual Box安装包，一步一步安装即可。Oracle_VM_VirtualBox_Extension_Pack-4.1.40-101594.vbox-extpack。之所以选用Virtual Box是因为它比VMWare更加稳定。使用VMWare运行hadoop集群或者spark集群时，有时会出现休眠后重启时，某些进程莫名挂掉的问题。而Virtual Box没有这种情况。之所以选择Virtual Box 4.1版本，是因为更高的版本就不兼容win7了。<br>由于用的是Mac，所以自己安装VirturlBox。</p>\n<p><a href=\"https://www.virtualbox.org/\">Virtual Box 官网</a></p>\n<h3 id=\"CentOS-6-5安装\"><a href=\"#CentOS-6-5安装\" class=\"headerlink\" title=\"CentOS 6.5安装\"></a>CentOS 6.5安装</h3><p>使用CentOS 6.5镜像即可，CentOS-6.5-i386-minimal.iso。<br>创建虚拟机：打开Virtual Box，点击“新建”按钮，点击“下一步”，输入虚拟机名称为spark1，选择操作系统为Linux，选择版本为Red Hat，分配1024MB内存，后面的选项全部用默认，在Virtual Disk File location and size中，一定要自己选择一个目录来存放虚拟机文件，最后点击“create”按钮，开始创建虚拟机。<br>设置虚拟机网卡：选择创建好的spark1虚拟机，点击“设置”按钮，在网络一栏中，连接方式中，选择“Bridged Adapter”。<br>安装虚拟机中的CentOS 6.5操作系统：选择创建好的虚拟机spark1，点击“开始”按钮，选择安装介质（即本地的CentOS 6.5镜像文件），选择第一项开始安装-Skip-欢迎界面Next-选择默认语言-Baisc Storage Devices-Yes, discard any data-主机名:spark1-选择时区-设置初始密码为hadoop-Replace Existing Linux System-Write changes to disk-CentOS 6.5自己开始安装。<br>安装完以后，CentOS会提醒你要重启一下，就是reboot，你就reboot就可以了。</p>\n<h3 id=\"CentOS-6-5网络配置\"><a href=\"#CentOS-6-5网络配置\" class=\"headerlink\" title=\"CentOS 6.5网络配置\"></a>CentOS 6.5网络配置</h3><p>先临时性设置虚拟机ip地址：ifconfig eth0 192.168.1.107，在&#x2F;etc&#x2F;hosts文件中配置本地ip（192.168.1.107）到host（spark1）的映射。<br>配置windows主机上的hosts文件：C:\\Windows\\System32\\drivers\\etc\\hosts，192.168.1.107 spark1。<br>使用SecureCRT从windows上连接虚拟机，自己可以上网下一个SecureCRT的绿色版，网上很多。<br>永久性配置CentOS网络。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class=\"line\">DEVICE=eth0</span><br><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">IPADDR=192.168.1.107</span><br><span class=\"line\">NETMASK=255.255.255.0</span><br><span class=\"line\">GATEWAY=192.168.1.1</span><br></pre></td></tr></table></figure>\n\n<p>重启网卡 service network restart。<br>即使更换了ip地址，重启网卡，可能还是联不通网。那么可以先将IPADDR、NETMASK、GATEWAY给删除，将BOOTPROTO改成dhcp。然后用service network restart重启网卡。此时linux会自动给分配一个ip地址，用ifconfig查看分配的ip地址。然后再次按照之前说的，配置网卡，将ip改成自动分配的ip地址。最后再重启一次网卡。</p>\n<p>由于用的是Mac，所以自己安装SecureCRT，自己安装破解版。</p>\n<p><a href=\"https://www.vandyke.com/products/securecrt/\">SecureCRT官网</a></p>\n<h3 id=\"CentOS-6-5防火墙和DNS配置\"><a href=\"#CentOS-6-5防火墙和DNS配置\" class=\"headerlink\" title=\"CentOS 6.5防火墙和DNS配置\"></a>CentOS 6.5防火墙和DNS配置</h3><p>关闭防火墙</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop</span><br><span class=\"line\">chkconfig iptables off</span><br><span class=\"line\">vi /etc/selinux/config</span><br><span class=\"line\">SELINUX=disabled</span><br></pre></td></tr></table></figure>\n<p>自己在win7的控制面板中，关闭windows的防火墙！</p>\n<p>配置dns服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/resolv.conf</span><br><span class=\"line\">nameserver 61.139.2.69</span><br><span class=\"line\">ping www.baidu.com</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CentOS-6-5-yum配置\"><a href=\"#CentOS-6-5-yum配置\" class=\"headerlink\" title=\"CentOS 6.5 yum配置\"></a>CentOS 6.5 yum配置</h3><p>修改repo，使用WinSCP（网上很多，自己下一个），将CentOS6-Base-163.repo上传到CentOS中的&#x2F;usr&#x2F;local目录下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/yum.repos.d/</span><br><span class=\"line\">rm -rf *</span><br></pre></td></tr></table></figure>\n<p>将自己的repo文件移动到&#x2F;etc&#x2F;yum.repos.d&#x2F;目录中：cp &#x2F;usr&#x2F;local&#x2F;CentOS6-Base-163.repo .，修改repo文件，把所有gpgcheck属性修改为0。</p>\n<p>配置yum</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br><span class=\"line\">yum install telnet</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JDK-1-7安装\"><a href=\"#JDK-1-7安装\" class=\"headerlink\" title=\"JDK 1.7安装\"></a>JDK 1.7安装</h3><p>将jdk-7u60-linux-i586.rpm通过WinSCP上传到虚拟机中<br>安装JDK：rpm -ivh jdk-7u65-linux-i586.rpm<br>配置jdk相关的环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .bashrc</span><br><span class=\"line\">export JAVA_HOME=/usr/java/latest</span><br><span class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n<p>测试jdk安装是否成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br><span class=\"line\">rm -f /etc/udev/rules.d/70-persistent-net.rules</span><br></pre></td></tr></table></figure>\n<p>由于用的是Mac，所以自己安装FileZilla，没有安装WinSCP。</p>\n<h3 id=\"安装第二台和第三台虚拟机\"><a href=\"#安装第二台和第三台虚拟机\" class=\"headerlink\" title=\"安装第二台和第三台虚拟机\"></a>安装第二台和第三台虚拟机</h3><p>安装上述步骤，再安装两台一模一样环境的虚拟机，因为后面hadoop和spark都是要搭建集群的。<br>集群的最小环境就是三台。因为后面要搭建ZooKeeper、kafka等集群。<br>另外两台机器的hostname分别设置为spark2和spark3即可，ip分别为192.168.1.108和192.168.1.109<br>在安装的时候，另外两台虚拟机的centos镜像文件必须重新拷贝一份，放在新的目录里，使用各自自己的镜像文件。<br>虚拟机的硬盘文件也必须重新选择一个新的目录，以更好的区分。<br>安装好之后，记得要在三台机器的&#x2F;etc&#x2F;hosts文件中，配置全三台机器的ip地址到hostname的映射，而不能只配置本机，这个很重要！<br>在windows的hosts文件中也要配置全三台机器的ip地址到hostname的映射。</p>\n<h3 id=\"配置集群ssh免密码登录\"><a href=\"#配置集群ssh免密码登录\" class=\"headerlink\" title=\"配置集群ssh免密码登录\"></a>配置集群ssh免密码登录</h3><p>首先在三台机器上配置对本机的ssh免密码登录。生成本机的公钥，过程中不断敲回车即可，ssh-keygen命令默认会将公钥放在&#x2F;root&#x2F;.ssh目录下。ssh-keygen -t rsa。将公钥复制为authorized_keys文件，此时使用ssh连接本机就不需要输入密码了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/.ssh</span><br><span class=\"line\">cp id_rsa.pub authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>接着配置三台机器互相之间的ssh免密码登录。使用ssh-copy-id -i spark命令将本机的公钥拷贝到指定机器的authorized_keys文件中（方便好用）。</p>\n<h2 id=\"Hadoop-2-4-1集群搭建\"><a href=\"#Hadoop-2-4-1集群搭建\" class=\"headerlink\" title=\"Hadoop 2.4.1集群搭建\"></a>Hadoop 2.4.1集群搭建</h2><h3 id=\"安装hadoop包\"><a href=\"#安装hadoop包\" class=\"headerlink\" title=\"安装hadoop包\"></a>安装hadoop包</h3><p>使用hadoop-2.4.1.tar.gz，使用WinSCP上传到CentOS的&#x2F;usr&#x2F;local目录下<br>将hadoop包进行解压缩：tar -zxvf hadoop-2.4.1.tar.gz<br>对hadoop目录进行重命名：mv hadoop-2.4.1 hadoop<br>配置hadoop相关环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .bashrc</span><br><span class=\"line\">export HADOOP_HOME=/usr/local/hadoop</span><br><span class=\"line\">export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n\n<p>由于用的是Mac，所以自己使用FileZilla，不是WinSCP。</p>\n<h3 id=\"修改core-site-xml\"><a href=\"#修改core-site-xml\" class=\"headerlink\" title=\"修改core-site.xml\"></a>修改core-site.xml</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;hdfs://spark1:9000&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改hdfs-site-xml\"><a href=\"#修改hdfs-site-xml\" class=\"headerlink\" title=\"修改hdfs-site.xml\"></a>修改hdfs-site.xml</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;dfs.name.dir&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;/usr/local/data/namenode&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;dfs.data.dir&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;/usr/local/data/datanode&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;dfs.tmp.dir&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;/usr/local/data/tmp&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;3&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">修改mapred-site.xml</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;yarn&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">修改yarn-site.xml</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;spark1&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改slaves文件\"><a href=\"#修改slaves文件\" class=\"headerlink\" title=\"修改slaves文件\"></a>修改slaves文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spark1</span><br><span class=\"line\">spark2</span><br><span class=\"line\">spark3</span><br></pre></td></tr></table></figure>\n<h3 id=\"在另外两台机器上搭建hadoop\"><a href=\"#在另外两台机器上搭建hadoop\" class=\"headerlink\" title=\"在另外两台机器上搭建hadoop\"></a>在另外两台机器上搭建hadoop</h3><p>使用如上配置在另外两台机器上搭建hadoop，可以使用scp命令将spark1上面的hadoop安装包和.bashrc配置文件都拷贝过去。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /usr/local/hadoop root@spark2:/usr/local/</span><br><span class=\"line\">scp -r /usr/local/hadoop root@spark3:/usr/local/</span><br><span class=\"line\">scp .bashrc root@spark2:~/</span><br><span class=\"line\">scp .bashrc root@spark3:~/</span><br></pre></td></tr></table></figure>\n<p>要记得对.bashrc文件进行source，以让它生效。<br>记得在spark2和spark3的&#x2F;usr&#x2F;local目录下创建data目录。</p>\n<h3 id=\"启动hdfs集群\"><a href=\"#启动hdfs集群\" class=\"headerlink\" title=\"启动hdfs集群\"></a>启动hdfs集群</h3><p>格式化namenode：在spark1上执行以下命令，<code>hdfs namenode -format</code><br>启动hdfs集群：<code>start-dfs.sh</code><br> 验证启动是否成功：jps、访问spark:50070 (关闭CentOS 6.5 防火墙)。spark1：namenode、datanode、secondarynamenode。spark2：datanode。spark3：datanode。</p>\n<h3 id=\"启动yarn集群\"><a href=\"#启动yarn集群\" class=\"headerlink\" title=\"启动yarn集群\"></a>启动yarn集群</h3><p>启动yarn集群：<code>start-yarn.sh</code><br> 验证启动是否成功：jps、访问spark:8088(关闭CentOS 6.5 防火墙)。spark1：resourcemanager、nodemanager。spark2：nodemanager。spark3：nodemanager。</p>\n<h3 id=\"Hive-0-13搭建\"><a href=\"#Hive-0-13搭建\" class=\"headerlink\" title=\"Hive 0.13搭建\"></a>Hive 0.13搭建</h3><p>安装hive包<br>将课程提供的apache-hive-0.13.1-bin.tar.gz使用WinSCP上传到spark1的&#x2F;usr&#x2F;local目录下。<br>解压缩hive安装包：tar -zxvf apache-hive-0.13.1-bin.tar.gz。<br>重命名hive目录：mv apache-hive-0.13.1-bin hive。<br>配置hive相关的环境变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .bashrc</span><br><span class=\"line\">export HIVE_HOME=/usr/local/hive</span><br><span class=\"line\">export PATH=$HIVE_HOME/bin</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h3><p>在spark1上安装mysql<br>使用yum安装mysql server</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y mysql-server</span><br><span class=\"line\">service mysqld start</span><br><span class=\"line\">chkconfig mysqld on</span><br></pre></td></tr></table></figure>\n<p>使用yum安装mysql connector</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y mysql-connector-java</span><br></pre></td></tr></table></figure>\n<p>将mysql connector拷贝到hive的lib包中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/share/java/mysql-connector-java-5.1.17.jar /usr/local/hive/lib</span><br></pre></td></tr></table></figure>\n<p>在mysql上创建hive元数据库，并对hive进行授权</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database if not exists hive_metadata;</span><br><span class=\"line\">grant all privileges on hive_metadata.* to &#x27;hive&#x27;@&#x27;%&#x27; identified by &#x27;hive&#x27;;</span><br><span class=\"line\">grant all privileges on hive_metadata.* to &#x27;hive&#x27;@&#x27;localhost&#x27; identified by &#x27;hive&#x27;;</span><br><span class=\"line\">grant all privileges on hive_metadata.* to &#x27;hive&#x27;@&#x27;spark1&#x27; identified by &#x27;hive&#x27;;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">use hive_metadata;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置hive-site-xml\"><a href=\"#配置hive-site-xml\" class=\"headerlink\" title=\"配置hive-site.xml\"></a>配置hive-site.xml</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv hive-default.xml.template hive-site.xml</span><br><span class=\"line\">vi hive-site.xml</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;jdbc:mysql://spark1:3306/hive_metadata?createDatabaseIfNotExist=true&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;hive&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;hive&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;/user/hive/warehouse&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置hive-env-sh和hive-config-sh\"><a href=\"#配置hive-env-sh和hive-config-sh\" class=\"headerlink\" title=\"配置hive-env.sh和hive-config.sh\"></a>配置hive-env.sh和hive-config.sh</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv hive-env.sh.template hive-env.sh</span><br><span class=\"line\">vi /usr/local/hive/bin/hive-config.sh</span><br><span class=\"line\">export JAVA_HOME=/usr/java/latest</span><br><span class=\"line\">export HIVE_HOME=/usr/local/hive</span><br><span class=\"line\">export HADOOP_HOME=/usr/local/hadoop</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证hive是否安装成功\"><a href=\"#验证hive是否安装成功\" class=\"headerlink\" title=\"验证hive是否安装成功\"></a>验证hive是否安装成功</h3><p>直接输入hive命令，可以进入hive命令行</p>\n<h2 id=\"ZooKeeper-3-4-5集群搭建\"><a href=\"#ZooKeeper-3-4-5集群搭建\" class=\"headerlink\" title=\"ZooKeeper 3.4.5集群搭建\"></a>ZooKeeper 3.4.5集群搭建</h2><h3 id=\"安装ZooKeeper包\"><a href=\"#安装ZooKeeper包\" class=\"headerlink\" title=\"安装ZooKeeper包\"></a>安装ZooKeeper包</h3><p>将zookeeper-3.4.5.tar.gz使用WinSCP拷贝到spark1的&#x2F;usr&#x2F;local目录下。<br>对zookeeper-3.4.5.tar.gz进行解压缩：tar -zxvf zookeeper-3.4.5.tar.gz。<br>对zookeeper目录进行重命名：mv zookeeper-3.4.5 zk。<br>配置zookeeper相关的环境变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .bashrc</span><br><span class=\"line\">export ZOOKEEPER_HOME=/usr/local/zk</span><br><span class=\"line\">export PATH=$ZOOKEEPER_HOME/bin</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置zoo-cfg\"><a href=\"#配置zoo-cfg\" class=\"headerlink\" title=\"配置zoo.cfg\"></a>配置zoo.cfg</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd zk/conf</span><br><span class=\"line\">mv zoo_sample.cfg zoo.cfg</span><br><span class=\"line\">vi zoo.cfg</span><br><span class=\"line\">dataDir=/usr/local/zk/data</span><br><span class=\"line\">server.0=spark1:2888:3888\t</span><br><span class=\"line\">server.1=spark2:2888:3888</span><br><span class=\"line\">server.2=spark3:2888:3888</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置zk节点标识\"><a href=\"#设置zk节点标识\" class=\"headerlink\" title=\"设置zk节点标识\"></a>设置zk节点标识</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd zk</span><br><span class=\"line\">mkdir data</span><br><span class=\"line\">cd data</span><br><span class=\"line\">vi myid</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<h3 id=\"搭建zk集群\"><a href=\"#搭建zk集群\" class=\"headerlink\" title=\"搭建zk集群\"></a>搭建zk集群</h3><p>在另外两个节点上按照上述步骤配置ZooKeeper，使用scp将zk和.bashrc拷贝到spark2和spark3上即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /usr/local/zk root@spark2:/usr/local/</span><br><span class=\"line\">scp -r /usr/local/zk root@spark3:/usr/local/</span><br><span class=\"line\">scp ~/.bashrc root@spark2:~/</span><br><span class=\"line\">scp ~/.bashrc root@spark3:~/</span><br><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>唯一的区别是spark2和spark3的标识号分别设置为1和2。</p>\n<h3 id=\"启动ZooKeeper集群\"><a href=\"#启动ZooKeeper集群\" class=\"headerlink\" title=\"启动ZooKeeper集群\"></a>启动ZooKeeper集群</h3><p>分别在三台机器上执行：zkServer.sh start。<br>检查ZooKeeper状态：zkServer.sh status。</p>\n<h2 id=\"kafka-2-9-2-0-8-1集群搭建\"><a href=\"#kafka-2-9-2-0-8-1集群搭建\" class=\"headerlink\" title=\"kafka_2.9.2-0.8.1集群搭建\"></a>kafka_2.9.2-0.8.1集群搭建</h2><h3 id=\"安装scala-2-11-4\"><a href=\"#安装scala-2-11-4\" class=\"headerlink\" title=\"安装scala 2.11.4\"></a>安装scala 2.11.4</h3><p>将课程提供的scala-2.11.4.tgz使用WinSCP拷贝到spark1的&#x2F;usr&#x2F;local目录下。<br>对scala-2.11.4.tgz进行解压缩：tar -zxvf scala-2.11.4.tgz。<br>对scala目录进行重命名：mv scala-2.11.4 scala。</p>\n<h3 id=\"配置scala相关的环境变量。\"><a href=\"#配置scala相关的环境变量。\" class=\"headerlink\" title=\"配置scala相关的环境变量。\"></a>配置scala相关的环境变量。</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .bashrc</span><br><span class=\"line\">export SCALA_HOME=/usr/local/scala</span><br><span class=\"line\">export PATH=$SCALA_HOME/bin</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n<p>查看scala是否安装成功：scala -version<br>按照上述步骤在spark2和spark3机器上都安装好scala。使用scp将scala和.bashrc拷贝到spark2和spark3上即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /usr/local/scala root@spark2:/usr/local/</span><br><span class=\"line\">scp -r /usr/local/scala root@spark3:/usr/local/</span><br><span class=\"line\">scp ~/.bashrc root@spark2:~/</span><br><span class=\"line\">scp ~/.bashrc root@spark3:~/</span><br><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Kafka包\"><a href=\"#安装Kafka包\" class=\"headerlink\" title=\"安装Kafka包\"></a>安装Kafka包</h3><p>将课程提供的kafka_2.9.2-0.8.1.tgz使用WinSCP拷贝到spark1的&#x2F;usr&#x2F;local目录下。<br>对kafka_2.9.2-0.8.1.tgz进行解压缩：tar -zxvf kafka_2.9.2-0.8.1.tgz。<br>对kafka目录进行改名：mv kafka_2.9.2-0.8.1 kafka。</p>\n<h3 id=\"配置kafka。\"><a href=\"#配置kafka。\" class=\"headerlink\" title=\"配置kafka。\"></a>配置kafka。</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/local/kafka/config/server.properties</span><br></pre></td></tr></table></figure>\n<p>broker.id：依次增长的整数，0、1、2、3、4，集群中Broker的唯一id<br>zookeeper.connect&#x3D;192.168.1.107:2181,192.168.1.108:2181,192.168.1.109:2181<br>安装slf4j。<br>将课程提供的slf4j-1.7.6.zip上传到&#x2F;usr&#x2F;local目录下。unzip slf4j-1.7.6.zip。<br>把slf4j中的slf4j-nop-1.7.6.jar复制到kafka的libs目录下面。</p>\n<h3 id=\"搭建kafka集群\"><a href=\"#搭建kafka集群\" class=\"headerlink\" title=\"搭建kafka集群\"></a>搭建kafka集群</h3><p>按照上述步骤在spark2和spark3分别安装kafka。用scp把kafka拷贝到spark2和spark3行即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /usr/local/kafka root@spark2:/usr/local/</span><br><span class=\"line\">scp -r /usr/local/kafka root@spark3:/usr/local/</span><br></pre></td></tr></table></figure>\n<p>唯一区别的，就是server.properties中的broker.id，要设置为1和2。</p>\n<h3 id=\"启动kafka集群\"><a href=\"#启动kafka集群\" class=\"headerlink\" title=\"启动kafka集群\"></a>启动kafka集群</h3><p>在三台机器上分别执行以下命令：nohup bin&#x2F;kafka-server-start.sh config&#x2F;server.properties &amp;。</p>\n<p>解决kafka Unrecognized VM option ‘UseCompressedOops’问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi bin/kafka-run-class.sh </span><br><span class=\"line\">if [ -z &quot;$KAFKA_JVM_PERFORMANCE_OPTS&quot; ]; then</span><br><span class=\"line\">  KAFKA_JVM_PERFORMANCE_OPTS=&quot;-server  -XX:+UseCompressedOops -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>去掉-XX:+UseCompressedOops即可<br>使用jps检查启动是否成功。</p>\n<h3 id=\"测试kafka集群\"><a href=\"#测试kafka集群\" class=\"headerlink\" title=\"测试kafka集群\"></a>测试kafka集群</h3><p>使用基本命令检查kafka是否搭建成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --zookeeper spark1:2181,spark2:2181,spark3:2181 --topic Test --replication-factor 1 --partitions 1 --create</span><br><span class=\"line\"></span><br><span class=\"line\">bin/kafka-console-producer.sh --broker-list spark1:9092,spark2:9092,spark3:9092 --topic Test</span><br><span class=\"line\"></span><br><span class=\"line\">bin/kafka-console-consumer.sh --zookeeper spark1:2181,spark2:2181,spark3:2181 --topic Test --from-beginning</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Spark-1-3-0集群搭建\"><a href=\"#Spark-1-3-0集群搭建\" class=\"headerlink\" title=\"Spark 1.3.0集群搭建\"></a>Spark 1.3.0集群搭建</h2><h2 id=\"安装spark包\"><a href=\"#安装spark包\" class=\"headerlink\" title=\"安装spark包\"></a>安装spark包</h2><p>将spark-1.3.0-bin-hadoop2.4.tgz使用WinSCP上传到&#x2F;usr&#x2F;local目录下。<br>解压缩spark包：tar zxvf spark-1.3.0-bin-hadoop2.4.tgz。<br>更改spark目录名：mv spark-1.3.0-bin-hadoop2.4 spark。<br>设置spark环境变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .bashrc</span><br><span class=\"line\">export SPARK_HOME=/usr/local/spark</span><br><span class=\"line\">export PATH=$SPARK_HOME/bin</span><br><span class=\"line\">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改spark-env-sh文件\"><a href=\"#修改spark-env-sh文件\" class=\"headerlink\" title=\"修改spark-env.sh文件\"></a>修改spark-env.sh文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/spark/conf</span><br><span class=\"line\">cp spark-env.sh.template spark-env.sh</span><br><span class=\"line\">vi spark-env.sh</span><br><span class=\"line\">export JAVA_HOME=/usr/java/latest</span><br><span class=\"line\">export SCALA_HOME=/usr/local/scala</span><br><span class=\"line\">export SPARK_MASTER_IP=192.168.1.107</span><br><span class=\"line\">export SPARK_WORKER_MEMORY=1g</span><br><span class=\"line\">export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改slaves文件-1\"><a href=\"#修改slaves文件-1\" class=\"headerlink\" title=\"修改slaves文件\"></a>修改slaves文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp slaves.template slaves</span><br><span class=\"line\">vi slaves</span><br><span class=\"line\">spark2</span><br><span class=\"line\">spark3</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装spark集群\"><a href=\"#安装spark集群\" class=\"headerlink\" title=\"安装spark集群\"></a>安装spark集群</h3><p>在另外两个节点进行一模一样的配置，使用scp将spark和.bashrc拷贝到spark2和spark3即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /usr/local/spark root@spark2:/usr/local/</span><br><span class=\"line\">scp -r /usr/local/spark root@spark3:/usr/local/</span><br><span class=\"line\">scp ~/.bashrc root@spark2:~/</span><br><span class=\"line\">scp ~/.bashrc root@spark3:~/</span><br><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动spark集群\"><a href=\"#启动spark集群\" class=\"headerlink\" title=\"启动spark集群\"></a>启动spark集群</h3><p>在spark目录下的sbin目录<br>执行，&#x2F;start-all.sh<br>使用jsp和8080端口可以检查集群是否启动成功<br>进入spark-shell查看是否正常</p>\n<h2 id=\"WordCount\"><a href=\"#WordCount\" class=\"headerlink\" title=\"WordCount\"></a>WordCount</h2><h3 id=\"Java开发wordcount程序\"><a href=\"#Java开发wordcount程序\" class=\"headerlink\" title=\"Java开发wordcount程序\"></a>Java开发wordcount程序</h3><h3 id=\"安装eclipse\"><a href=\"#安装eclipse\" class=\"headerlink\" title=\"安装eclipse\"></a>安装eclipse</h3><p><a href=\"https://www.eclipse.org/downloads/\">eclipse download</a></p>\n<h3 id=\"配置maven\"><a href=\"#配置maven\" class=\"headerlink\" title=\"配置maven\"></a>配置maven</h3><p>打开eclipse-&gt;新建Maven Project-&gt;maven-archetype-quickstart-&gt;groupId:cn.spark-&gt;artifactId:spark-study-java-&gt;package:cn.spark.study-&gt;替换pom.xml-quick fix(第一次要等待很长时间)-&gt;Buid Baph-&gt;Configure Build Path-&gt;Libaries-&gt;JRE System Libarary-&gt;Edit-&gt;Workspace default JRE。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: pom.xml</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;groupId&gt;cn.spark&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spark-study-java&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">  &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;name&gt;spark-study-java&lt;/name&gt;</span><br><span class=\"line\">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;properties&gt;</span><br><span class=\"line\">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">  &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;spark-core_2.10&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;spark-sql_2.10&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class=\"line\">\t  &lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;spark-hive_2.10&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;spark-streaming_2.10&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;2.4.1&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;spark-streaming-kafka_2.10&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">  &lt;/dependencies&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;build&gt;</span><br><span class=\"line\">    &lt;sourceDirectory&gt;src/main/java&lt;/sourceDirectory&gt;</span><br><span class=\"line\">    &lt;testSourceDirectory&gt;src/main/test&lt;/testSourceDirectory&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;configuration&gt;</span><br><span class=\"line\">          &lt;descriptorRefs&gt;</span><br><span class=\"line\">            &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;</span><br><span class=\"line\">          &lt;/descriptorRefs&gt;</span><br><span class=\"line\">          &lt;archive&gt;</span><br><span class=\"line\">            &lt;manifest&gt;</span><br><span class=\"line\">              &lt;mainClass&gt;&lt;/mainClass&gt;</span><br><span class=\"line\">            &lt;/manifest&gt;</span><br><span class=\"line\">          &lt;/archive&gt;</span><br><span class=\"line\">        &lt;/configuration&gt;</span><br><span class=\"line\">        &lt;executions&gt;</span><br><span class=\"line\">          &lt;execution&gt;</span><br><span class=\"line\">            &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class=\"line\">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">              &lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">          &lt;/execution&gt;</span><br><span class=\"line\">        &lt;/executions&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.2.1&lt;/version&gt;</span><br><span class=\"line\">        &lt;executions&gt;</span><br><span class=\"line\">          &lt;execution&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">              &lt;goal&gt;exec&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">          &lt;/execution&gt;</span><br><span class=\"line\">        &lt;/executions&gt;</span><br><span class=\"line\">        &lt;configuration&gt;</span><br><span class=\"line\">          &lt;executable&gt;java&lt;/executable&gt;</span><br><span class=\"line\">          &lt;includeProjectDependencies&gt;true&lt;/includeProjectDependencies&gt;</span><br><span class=\"line\">          &lt;includePluginDependencies&gt;false&lt;/includePluginDependencies&gt;</span><br><span class=\"line\">          &lt;classpathScope&gt;compile&lt;/classpathScope&gt;</span><br><span class=\"line\">          &lt;mainClass&gt;cn.spark.study.App&lt;/mainClass&gt;</span><br><span class=\"line\">        &lt;/configuration&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;configuration&gt;</span><br><span class=\"line\">          &lt;source&gt;1.6&lt;/source&gt;</span><br><span class=\"line\">          &lt;target&gt;1.6&lt;/target&gt;</span><br><span class=\"line\">        &lt;/configuration&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">  &lt;/build&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建spark-txt，新建包cn-spark-study-core，新建WordCountLocal-java\"><a href=\"#新建spark-txt，新建包cn-spark-study-core，新建WordCountLocal-java\" class=\"headerlink\" title=\"新建spark.txt，新建包cn.spark.study.core，新建WordCountLocal.java\"></a>新建spark.txt，新建包cn.spark.study.core，新建WordCountLocal.java</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: spark.txt</span><br><span class=\"line\">Spark is new technology that sits on top of Hadoop Distributed File System (HDFS) that is characterized as ¡°a fast and general engine for large-scale data processing.¡± Spark has three key features that make it the most interesting up and coming technology to rock the big data world since Apache Hadoop in 2005.</span><br><span class=\"line\"></span><br><span class=\"line\">1. For iterative analysis like logistic regression, Random Forests, or other advanced algorithms, Spark has demonstrated 100X increase in speed that scales to hundreds of millions of rows.</span><br><span class=\"line\"></span><br><span class=\"line\">2. Spark has native support for the latest and greatest programming languages Java, Scala, and of course Python.</span><br><span class=\"line\"></span><br><span class=\"line\">3. Spark has generality or platform compatibility in both directions meaning it integrates nicely with SQL engines (Shark), Machine Learning (MLlib), and streaming (Spark Streaming) without requiring new software installed on the cluster using Hadoop¡¯s new YARN cluster manager.</span><br><span class=\"line\"></span><br><span class=\"line\">At Alpine, we have made it dead simple to get started with Spark by including the technology in our latest build out of the box. We require no additional software or hardware to leverage our extensive list of operators for data transformation, exploration, and building advanced analytic models. We leverage Hadoop Yarn (Hadoop NextGen) to launch Spark job without any pre-installation of Spark or modification of cluster configuration. This empowers our customers to have seamless integration of our Spark implementation and their Hadoop stack. For example, we have analyzed 50 Million rows of account data in 50 seconds on a 20 node cluster recently at last month GigaOM conference.</span><br><span class=\"line\"></span><br><span class=\"line\">As a Spark certified company, Alpine Data Labs will be at the Summit. We¡¯d love to see you there!</span><br><span class=\"line\"></span><br><span class=\"line\">Want to meet with us?  Click here to set up an appointment at your convenience. Or just send a tweet to our Product &amp; Marketing Director Joel Horwitz @JSHorwitz.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: WordCountLocal.java</span><br><span class=\"line\">package cn.spark.study.core;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.spark.SparkConf;</span><br><span class=\"line\">import org.apache.spark.api.java.JavaPairRDD;</span><br><span class=\"line\">import org.apache.spark.api.java.JavaRDD;</span><br><span class=\"line\">import org.apache.spark.api.java.JavaSparkContext;</span><br><span class=\"line\">import org.apache.spark.api.java.function.FlatMapFunction;</span><br><span class=\"line\">import org.apache.spark.api.java.function.Function2;</span><br><span class=\"line\">import org.apache.spark.api.java.function.PairFunction;</span><br><span class=\"line\">import org.apache.spark.api.java.function.VoidFunction;</span><br><span class=\"line\"></span><br><span class=\"line\">import scala.Tuple2;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 使用java开发本地测试wordcount程序</span><br><span class=\"line\"> * @author xdx</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class WordCountLocal &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t// 第一步：创建SparkConf对象，设置Spark应用的配置信息</span><br><span class=\"line\">\t\t// 使用setMaster()可以设置Spark应用程序要连接的Spark集群的master节点的url</span><br><span class=\"line\">\t\t// 但是如果设置为local则代表，在本地运行</span><br><span class=\"line\">\t\tSparkConf conf = new SparkConf()</span><br><span class=\"line\">\t\t\t\t.setAppName(&quot;WordCountLocal&quot;)</span><br><span class=\"line\">\t\t\t\t.setMaster(&quot;local&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 第二步：创建JavaSparkContext对象</span><br><span class=\"line\">\t\t// 在Spark中，SparkContext是Spark所有功能的一个入口，你无论是用java、scala，甚至是python编写</span><br><span class=\"line\">\t\t\t// 都必须要有一个SparkContext，它的主要作用，包括初始化Spark应用程序所需的一些核心组件，包括</span><br><span class=\"line\">\t\t\t// 调度器（DAGSchedule、TaskScheduler），还会去到Spark Master节点上进行注册，等等</span><br><span class=\"line\">\t\t// 一句话，SparkContext，是Spark应用中，可以说是最最重要的一个对象</span><br><span class=\"line\">\t\t// 但是呢，在Spark中，编写不同类型的Spark应用程序，使用的SparkContext是不同的，如果使用scala，</span><br><span class=\"line\">\t\t\t// 使用的就是原生的SparkContext对象</span><br><span class=\"line\">\t\t\t// 但是如果使用Java，那么就是JavaSparkContext对象</span><br><span class=\"line\">\t\t\t// 如果是开发Spark SQL程序，那么就是SQLContext、HiveContext</span><br><span class=\"line\">\t\t\t// 如果是开发Spark Streaming程序，那么就是它独有的SparkContext</span><br><span class=\"line\">\t\t\t// 以此类推</span><br><span class=\"line\">\t\tJavaSparkContext sc = new JavaSparkContext(conf);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 第三步：要针对输入源（hdfs文件、本地文件，等等），创建一个初始的RDD</span><br><span class=\"line\">\t\t// 输入源中的数据会打散，分配到RDD的每个partition中，从而形成一个初始的分布式的数据集</span><br><span class=\"line\">\t\t// 我们这里呢，因为是本地测试，所以呢，就是针对本地文件</span><br><span class=\"line\">\t\t// SparkContext中，用于根据文件类型的输入源创建RDD的方法，叫做textFile()方法</span><br><span class=\"line\">\t\t// 在Java中，创建的普通RDD，都叫做JavaRDD</span><br><span class=\"line\">\t\t// 在这里呢，RDD中，有元素这种概念，如果是hdfs或者本地文件呢，创建的RDD，每一个元素就相当于</span><br><span class=\"line\">\t\t// 是文件里的一行</span><br><span class=\"line\">\t\tJavaRDD&lt;String&gt; lines = sc.textFile(&quot;spark.txt&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 第四步：对初始RDD进行transformation操作，也就是一些计算操作</span><br><span class=\"line\">\t\t// 通常操作会通过创建function，并配合RDD的map、flatMap等算子来执行</span><br><span class=\"line\">\t\t// function，通常，如果比较简单，则创建指定Function的匿名内部类</span><br><span class=\"line\">\t\t// 但是如果function比较复杂，则会单独创建一个类，作为实现这个function接口的类</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 先将每一行拆分成单个的单词</span><br><span class=\"line\">\t\t// FlatMapFunction，有两个泛型参数，分别代表了输入和输出类型</span><br><span class=\"line\">\t\t// 我们这里呢，输入肯定是String，因为是一行一行的文本，输出，其实也是String，因为是每一行的文本</span><br><span class=\"line\">\t\t// 这里先简要介绍flatMap算子的作用，其实就是，将RDD的一个元素，给拆分成一个或多个元素</span><br><span class=\"line\">\t\tJavaRDD&lt;String&gt; words = lines.flatMap(new FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Iterable&lt;String&gt; call(String line) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn Arrays.asList(line.split(&quot; &quot;));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 接着，需要将每一个单词，映射为(单词, 1)的这种格式</span><br><span class=\"line\">\t\t\t// 因为只有这样，后面才能根据单词作为key，来进行每个单词的出现次数的累加</span><br><span class=\"line\">\t\t// mapToPair，其实就是将每个元素，映射为一个(v1,v2)这样的Tuple2类型的元素</span><br><span class=\"line\">\t\t\t// 如果大家还记得scala里面讲的tuple，那么没错，这里的tuple2就是scala类型，包含了两个值</span><br><span class=\"line\">\t\t// mapToPair这个算子，要求的是与PairFunction配合使用，第一个泛型参数代表了输入类型</span><br><span class=\"line\">\t\t\t// 第二个和第三个泛型参数，代表的输出的Tuple2的第一个值和第二个值的类型</span><br><span class=\"line\">\t\t// JavaPairRDD的两个泛型参数，分别代表了tuple元素的第一个值和第二个值的类型</span><br><span class=\"line\">\t\tJavaPairRDD&lt;String, Integer&gt; pairs = words.mapToPair(new PairFunction&lt;String, String, Integer&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Tuple2&lt;String, Integer&gt; call(String word) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn new Tuple2&lt;String, Integer&gt;(word, 1);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 接着，需要以单词作为key，统计每个单词出现的次数</span><br><span class=\"line\">\t\t// 这里要使用reduceByKey这个算子，对每个key对应的value，都进行reduce操作</span><br><span class=\"line\">\t\t// 比如JavaPairRDD中有几个元素，分别为(hello, 1) (hello, 1) (hello, 1) (world, 1)</span><br><span class=\"line\">\t\t// reduce操作，相当于是把第一个值和第二个值进行计算，然后再将结果与第三个值进行计算</span><br><span class=\"line\">\t\t// 比如这里的hello，那么就相当于是，首先是1 + 1 = 2，然后再将2 + 1 = 3</span><br><span class=\"line\">\t\t// 最后返回的JavaPairRDD中的元素，也是tuple，但是第一个值就是每个key，第二个值就是key的value</span><br><span class=\"line\">\t\t// reduce之后的结果，相当于就是每个单词出现的次数</span><br><span class=\"line\">\t\tJavaPairRDD&lt;String, Integer&gt; wordCounts = pairs.reduceByKey(new Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Integer call(Integer v1, Integer v2) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn v1 + v2;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 到这里为止，我们通过几个Spark算子操作，已经统计出了单词的次数</span><br><span class=\"line\">\t\t// 但是，之前我们使用的flatMap、mapToPair、reduceByKey这种操作，都叫做transformation操作</span><br><span class=\"line\">\t\t// 一个Spark应用中，光是有transformation操作，是不行的，是不会执行的，必须要有一种叫做action</span><br><span class=\"line\">\t\t// 接着，最后，可以使用一种叫做action操作的，比如说，foreach，来触发程序的执行</span><br><span class=\"line\">\t\twordCounts.foreach(new VoidFunction&lt;Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void call(Tuple2&lt;String, Integer&gt; wordCount) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(wordCount._1 + &quot; appeared &quot; + wordCount._2 + &quot; times.&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tsc.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Hadoop appeared 1 times.</span><br><span class=\"line\">processing. appeared 1 times.</span><br><span class=\"line\">Spark appeared 6 times.</span><br><span class=\"line\">it appeared 2 times.</span><br><span class=\"line\">parallel appeared 1 times.</span><br><span class=\"line\">its appeared 1 times.</span><br><span class=\"line\">operators appeared 1 times.</span><br><span class=\"line\">YARN, appeared 1 times.</span><br><span class=\"line\">engine. appeared 1 times.</span><br><span class=\"line\">Runs appeared 1 times.</span><br><span class=\"line\">standalone appeared 1 times.</span><br><span class=\"line\">optimizer, appeared 1 times.</span><br><span class=\"line\">shells. appeared 1 times.</span><br><span class=\"line\">complex appeared 1 times.</span><br><span class=\"line\">state-of-the-art appeared 1 times.</span><br><span class=\"line\">learning, appeared 1 times.</span><br><span class=\"line\">Use appeared 1 times.</span><br><span class=\"line\">applications appeared 1 times.</span><br><span class=\"line\">over appeared 1 times.</span><br><span class=\"line\">streaming, appeared 1 times.</span><br><span class=\"line\">easy appeared 1 times.</span><br><span class=\"line\">for appeared 3 times.</span><br><span class=\"line\">faster. appeared 1 times.</span><br><span class=\"line\">make appeared 1 times.</span><br><span class=\"line\">engine appeared 1 times.</span><br><span class=\"line\">these appeared 1 times.</span><br><span class=\"line\">performance appeared 1 times.</span><br><span class=\"line\">the appeared 3 times.</span><br><span class=\"line\">application. appeared 1 times.</span><br><span class=\"line\">SQL. appeared 1 times.</span><br><span class=\"line\">DataFrames, appeared 1 times.</span><br><span class=\"line\">Mesos, appeared 2 times.</span><br><span class=\"line\">R, appeared 2 times.</span><br><span class=\"line\">can appeared 4 times.</span><br><span class=\"line\">HDFS, appeared 1 times.</span><br><span class=\"line\">build appeared 1 times.</span><br><span class=\"line\">Cassandra, appeared 1 times.</span><br><span class=\"line\">achieves appeared 1 times.</span><br><span class=\"line\">Apache appeared 6 times.</span><br><span class=\"line\">including appeared 1 times.</span><br><span class=\"line\">large-scale appeared 1 times.</span><br><span class=\"line\">Kubernetes, appeared 1 times.</span><br><span class=\"line\">sources. appeared 2 times.</span><br><span class=\"line\">analytics. appeared 1 times.</span><br><span class=\"line\">libraries appeared 2 times.</span><br><span class=\"line\">Combine appeared 1 times.</span><br><span class=\"line\">query appeared 1 times.</span><br><span class=\"line\">batch appeared 1 times.</span><br><span class=\"line\">It appeared 1 times.</span><br><span class=\"line\">scheduler, appeared 1 times.</span><br><span class=\"line\">both appeared 1 times.</span><br><span class=\"line\">streaming appeared 1 times.</span><br><span class=\"line\">Access appeared 1 times.</span><br><span class=\"line\">machine appeared 1 times.</span><br><span class=\"line\">Everywhere appeared 1 times.</span><br><span class=\"line\">Generality appeared 1 times.</span><br><span class=\"line\">stack appeared 1 times.</span><br><span class=\"line\">And appeared 1 times.</span><br><span class=\"line\">high appeared 1 times.</span><br><span class=\"line\">Speed appeared 1 times.</span><br><span class=\"line\">is appeared 1 times.</span><br><span class=\"line\">80 appeared 1 times.</span><br><span class=\"line\">run appeared 1 times.</span><br><span class=\"line\">seamlessly appeared 1 times.</span><br><span class=\"line\">Kubernetes. appeared 1 times.</span><br><span class=\"line\">Spark™ appeared 1 times.</span><br><span class=\"line\">runs appeared 1 times.</span><br><span class=\"line\">same appeared 1 times.</span><br><span class=\"line\">You appeared 2 times.</span><br><span class=\"line\">on appeared 5 times.</span><br><span class=\"line\">interactively appeared 1 times.</span><br><span class=\"line\">Ease appeared 1 times.</span><br><span class=\"line\">data appeared 4 times.</span><br><span class=\"line\">apps. appeared 1 times.</span><br><span class=\"line\">offers appeared 1 times.</span><br><span class=\"line\">in appeared 4 times.</span><br><span class=\"line\">using appeared 2 times.</span><br><span class=\"line\">DAG appeared 1 times.</span><br><span class=\"line\">Alluxio, appeared 1 times.</span><br><span class=\"line\">diverse appeared 1 times.</span><br><span class=\"line\">100x appeared 1 times.</span><br><span class=\"line\">execution appeared 1 times.</span><br><span class=\"line\">hundreds appeared 1 times.</span><br><span class=\"line\">Python, appeared 2 times.</span><br><span class=\"line\">from appeared 1 times.</span><br><span class=\"line\">other appeared 1 times.</span><br><span class=\"line\">standalone, appeared 1 times.</span><br><span class=\"line\">use appeared 1 times.</span><br><span class=\"line\">physical appeared 1 times.</span><br><span class=\"line\">workloads appeared 1 times.</span><br><span class=\"line\">Run appeared 1 times.</span><br><span class=\"line\">mode, appeared 1 times.</span><br><span class=\"line\">EC2, appeared 1 times.</span><br><span class=\"line\">you appeared 1 times.</span><br><span class=\"line\">that appeared 1 times.</span><br><span class=\"line\">or appeared 2 times.</span><br><span class=\"line\">a appeared 5 times.</span><br><span class=\"line\">data, appeared 1 times.</span><br><span class=\"line\">high-level appeared 1 times.</span><br><span class=\"line\">Java, appeared 1 times.</span><br><span class=\"line\">SQL appeared 2 times.</span><br><span class=\"line\">Hive, appeared 1 times.</span><br><span class=\"line\">Hadoop, appeared 1 times.</span><br><span class=\"line\">to appeared 1 times.</span><br><span class=\"line\"> appeared 9 times.</span><br><span class=\"line\">analytics appeared 1 times.</span><br><span class=\"line\">GraphX, appeared 1 times.</span><br><span class=\"line\">Write appeared 1 times.</span><br><span class=\"line\">of appeared 3 times.</span><br><span class=\"line\">cluster appeared 1 times.</span><br><span class=\"line\">access appeared 1 times.</span><br><span class=\"line\">MLlib appeared 1 times.</span><br><span class=\"line\">quickly appeared 1 times.</span><br><span class=\"line\">Scala, appeared 2 times.</span><br><span class=\"line\">HBase, appeared 1 times.</span><br><span class=\"line\">and appeared 8 times.</span><br><span class=\"line\">unified appeared 1 times.</span><br><span class=\"line\">SQL, appeared 1 times.</span><br><span class=\"line\">combine appeared 1 times.</span><br><span class=\"line\">Streaming. appeared 1 times.</span><br><span class=\"line\">powers appeared 1 times.</span><br><span class=\"line\">cloud. appeared 1 times.</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n<h3 id=\"spark-submit提交到spark集群进行执行\"><a href=\"#spark-submit提交到spark集群进行执行\" class=\"headerlink\" title=\"spark-submit提交到spark集群进行执行\"></a>spark-submit提交到spark集群进行执行</h3><p>编写WordCountCluster.java</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: WordCountCluster.java</span><br><span class=\"line\">package cn.spark.study.core;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.spark.SparkConf;</span><br><span class=\"line\">import org.apache.spark.api.java.JavaPairRDD;</span><br><span class=\"line\">import org.apache.spark.api.java.JavaRDD;</span><br><span class=\"line\">import org.apache.spark.api.java.JavaSparkContext;</span><br><span class=\"line\">import org.apache.spark.api.java.function.FlatMapFunction;</span><br><span class=\"line\">import org.apache.spark.api.java.function.Function2;</span><br><span class=\"line\">import org.apache.spark.api.java.function.PairFunction;</span><br><span class=\"line\">import org.apache.spark.api.java.function.VoidFunction;</span><br><span class=\"line\"></span><br><span class=\"line\">import scala.Tuple2;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 将java开发的wordcount程序部署到spark集群上运行</span><br><span class=\"line\"> * @author xdx</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class WordCountCluster &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t// 如果要在spark集群上运行，需要修改的，只有两个地方</span><br><span class=\"line\">\t\t// 第一，将SparkConf的setMaster()方法给删掉，默认它自己会去连接</span><br><span class=\"line\">\t\t// 第二，我们针对的不是本地文件了，修改为hadoop hdfs上的真正的存储大数据的文件</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 实际执行步骤：</span><br><span class=\"line\">\t\t// 1、将spark.txt文件上传到hdfs上去</span><br><span class=\"line\">\t\t// 2、使用我们最早在pom.xml里配置的maven插件，对spark工程进行打包</span><br><span class=\"line\">\t\t// 3、将打包后的spark工程jar包，上传到机器上执行</span><br><span class=\"line\">\t\t// 4、编写spark-submit脚本</span><br><span class=\"line\">\t\t// 5、执行spark-submit脚本，提交spark应用到集群执行</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSparkConf conf = new SparkConf()</span><br><span class=\"line\">\t\t\t\t.setAppName(&quot;WordCountCluster&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJavaSparkContext sc = new JavaSparkContext(conf);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJavaRDD&lt;String&gt; lines = sc.textFile(&quot;hdfs://spark1:9000/spark.txt&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJavaRDD&lt;String&gt; words = lines.flatMap(new FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Iterable&lt;String&gt; call(String line) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn Arrays.asList(line.split(&quot; &quot;));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJavaPairRDD&lt;String, Integer&gt; pairs = words.mapToPair(new PairFunction&lt;String, String, Integer&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Tuple2&lt;String, Integer&gt; call(String word) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn new Tuple2&lt;String, Integer&gt;(word, 1);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJavaPairRDD&lt;String, Integer&gt; wordCounts = pairs.reduceByKey(new Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override </span><br><span class=\"line\">\t\t\tpublic Integer call(Integer v1, Integer v2) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn v1 + v2;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\twordCounts.foreach(new VoidFunction&lt;Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void call(Tuple2&lt;String, Integer&gt; wordCount) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(wordCount._1 + &quot; appeared &quot; + wordCount._2 + &quot; times.&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tsc.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<p>将spark.txt上传到spark1，将spark.txt上传到hdfs<br>将spark-study-java打包，Run As-&gt;Run Configurations-&gt;Maven Build-&gt;New-&gt;spark-study-java-&gt;Run<br>将&#x2F;spark-study-java&#x2F;target&#x2F;spark-study-java-0.0.1-SNAPSHOT-jar-with-dependencies.jar上传到spark<br>编写wordcount.sh，使用spark-submit进行执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: wordcount.sh</span><br><span class=\"line\">/usr/local/spark/bin/spark-submit \\</span><br><span class=\"line\">--class cn.spark.sparktest.core.WordCountCluster \\</span><br><span class=\"line\">--num-executors 3 \\</span><br><span class=\"line\">--driver-memory 100m \\</span><br><span class=\"line\">--executor-memory 100m \\</span><br><span class=\"line\">--executor-cores 3 \\</span><br><span class=\"line\">/root/Workspace/SparkProjects/wordcount/SparkTest-0.0.1-SNAPSHOT-jar-with-dependencies.jar \\</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Scala开发wordcount程序\"><a href=\"#Scala开发wordcount程序\" class=\"headerlink\" title=\"Scala开发wordcount程序\"></a>Scala开发wordcount程序</h3><p>scala ide for eclipse download<br>在Java Build Path中，添加spark依赖包(spark-assembly-1.3.0-hadoop2.4.0.jar)，如果与scala ide for eclipse原生的scala版本发生冲突，则移除原生的scala，重新配置scala compiler</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: WordCount.scala</span><br><span class=\"line\">package cn.spark.study.core</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.spark.SparkConf</span><br><span class=\"line\">import org.apache.spark.SparkContext</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author xdx</span><br><span class=\"line\"> */</span><br><span class=\"line\">object WordCount &#123;</span><br><span class=\"line\">  def main(args: Array[String]) &#123;</span><br><span class=\"line\">    val conf = new SparkConf()</span><br><span class=\"line\">      .setAppName(&quot;WordCount&quot;)</span><br><span class=\"line\">      .setMaster(&quot;local&quot;)</span><br><span class=\"line\">    val sc = new SparkContext(conf)</span><br><span class=\"line\">    val lines = sc.textFile(&quot;spark.txt&quot;, 1)</span><br><span class=\"line\">    val words = lines.flatMap &#123; line =&gt; line.split(&quot; &quot;) &#125;</span><br><span class=\"line\">    val pairs = words.map &#123; word =&gt; (word, 1) &#125;</span><br><span class=\"line\">    val wordCounts = pairs.reduceByKey &#123; _ + _ &#125;</span><br><span class=\"line\">    wordCounts.foreach(wordCount =&gt; println(wordCount._1 + &quot; appeared &quot; + wordCount._2 + &quot; times.&quot;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">(MLlib), appeared 1 times.</span><br><span class=\"line\">For appeared 2 times.</span><br><span class=\"line\">Product appeared 1 times.</span><br><span class=\"line\">it appeared 3 times.</span><br><span class=\"line\">operators appeared 1 times.</span><br><span class=\"line\">sits appeared 1 times.</span><br><span class=\"line\">Hadoop��s appeared 1 times.</span><br><span class=\"line\">have appeared 3 times.</span><br><span class=\"line\">tweet appeared 1 times.</span><br><span class=\"line\">stack. appeared 1 times.</span><br><span class=\"line\">modification appeared 1 times.</span><br><span class=\"line\">conference. appeared 1 times.</span><br><span class=\"line\">we appeared 2 times.</span><br><span class=\"line\">requiring appeared 1 times.</span><br><span class=\"line\">This appeared 1 times.</span><br><span class=\"line\">simple appeared 1 times.</span><br><span class=\"line\">manager. appeared 1 times.</span><br><span class=\"line\">software appeared 2 times.</span><br><span class=\"line\">any appeared 1 times.</span><br><span class=\"line\">make appeared 1 times.</span><br><span class=\"line\">implementation appeared 1 times.</span><br><span class=\"line\">seconds appeared 1 times.</span><br><span class=\"line\">&amp; appeared 1 times.</span><br><span class=\"line\">out appeared 1 times.</span><br><span class=\"line\">Data appeared 1 times.</span><br><span class=\"line\">engine appeared 1 times.</span><br><span class=\"line\">directions appeared 1 times.</span><br><span class=\"line\">month appeared 1 times.</span><br><span class=\"line\">the appeared 7 times.</span><br><span class=\"line\">technology appeared 3 times.</span><br><span class=\"line\">2. appeared 1 times.</span><br><span class=\"line\">Alpine, appeared 1 times.</span><br><span class=\"line\">We��d appeared 1 times.</span><br><span class=\"line\">box. appeared 1 times.</span><br><span class=\"line\">100X appeared 1 times.</span><br><span class=\"line\">most appeared 1 times.</span><br><span class=\"line\">build appeared 1 times.</span><br><span class=\"line\">love appeared 1 times.</span><br><span class=\"line\">be appeared 1 times.</span><br><span class=\"line\">��a appeared 1 times.</span><br><span class=\"line\">Apache appeared 1 times.</span><br><span class=\"line\">At appeared 1 times.</span><br><span class=\"line\">Alpine appeared 1 times.</span><br><span class=\"line\">our appeared 5 times.</span><br><span class=\"line\">including appeared 1 times.</span><br><span class=\"line\">as appeared 1 times.</span><br><span class=\"line\">us? appeared 1 times.</span><br><span class=\"line\">dead appeared 1 times.</span><br><span class=\"line\">iterative appeared 1 times.</span><br><span class=\"line\">leverage appeared 2 times.</span><br><span class=\"line\">Want appeared 1 times.</span><br><span class=\"line\">File appeared 1 times.</span><br><span class=\"line\">programming appeared 1 times.</span><br><span class=\"line\">account appeared 1 times.</span><br><span class=\"line\">recently appeared 1 times.</span><br><span class=\"line\">engines appeared 1 times.</span><br><span class=\"line\">is appeared 2 times.</span><br><span class=\"line\">Horwitz appeared 1 times.</span><br><span class=\"line\">on appeared 3 times.</span><br><span class=\"line\">features appeared 1 times.</span><br><span class=\"line\">pre-installation appeared 1 times.</span><br><span class=\"line\">speed appeared 1 times.</span><br><span class=\"line\">at appeared 3 times.</span><br><span class=\"line\">using appeared 1 times.</span><br><span class=\"line\">convenience. appeared 1 times.</span><br><span class=\"line\">top appeared 1 times.</span><br><span class=\"line\">integrates appeared 1 times.</span><br><span class=\"line\">meaning appeared 1 times.</span><br><span class=\"line\">customers appeared 1 times.</span><br><span class=\"line\">new appeared 3 times.</span><br><span class=\"line\">We appeared 2 times.</span><br><span class=\"line\">Python. appeared 1 times.</span><br><span class=\"line\">Random appeared 1 times.</span><br><span class=\"line\">launch appeared 1 times.</span><br><span class=\"line\">processing.�� appeared 1 times.</span><br><span class=\"line\">set appeared 1 times.</span><br><span class=\"line\">has appeared 4 times.</span><br><span class=\"line\">NextGen) appeared 1 times.</span><br><span class=\"line\">world appeared 1 times.</span><br><span class=\"line\">Learning appeared 1 times.</span><br><span class=\"line\">seamless appeared 1 times.</span><br><span class=\"line\">Director appeared 1 times.</span><br><span class=\"line\">generality appeared 1 times.</span><br><span class=\"line\">or appeared 4 times.</span><br><span class=\"line\">Yarn appeared 1 times.</span><br><span class=\"line\">Java, appeared 1 times.</span><br><span class=\"line\">appointment appeared 1 times.</span><br><span class=\"line\">As appeared 1 times.</span><br><span class=\"line\">YARN appeared 1 times.</span><br><span class=\"line\">Machine appeared 1 times.</span><br><span class=\"line\">company, appeared 1 times.</span><br><span class=\"line\">installed appeared 1 times.</span><br><span class=\"line\">50 appeared 2 times.</span><br><span class=\"line\">see appeared 1 times.</span><br><span class=\"line\">of appeared 10 times.</span><br><span class=\"line\">cluster appeared 4 times.</span><br><span class=\"line\">three appeared 1 times.</span><br><span class=\"line\">analytic appeared 1 times.</span><br><span class=\"line\">Or appeared 1 times.</span><br><span class=\"line\">Forests, appeared 1 times.</span><br><span class=\"line\">rows appeared 1 times.</span><br><span class=\"line\">millions appeared 1 times.</span><br><span class=\"line\">rows. appeared 1 times.</span><br><span class=\"line\">Hadoop appeared 4 times.</span><br><span class=\"line\">characterized appeared 1 times.</span><br><span class=\"line\">Spark appeared 10 times.</span><br><span class=\"line\">integration appeared 1 times.</span><br><span class=\"line\">job appeared 1 times.</span><br><span class=\"line\">native appeared 1 times.</span><br><span class=\"line\">greatest appeared 1 times.</span><br><span class=\"line\">general appeared 1 times.</span><br><span class=\"line\">Million appeared 1 times.</span><br><span class=\"line\">extensive appeared 1 times.</span><br><span class=\"line\">here appeared 1 times.</span><br><span class=\"line\">big appeared 1 times.</span><br><span class=\"line\">Joel appeared 1 times.</span><br><span class=\"line\">1. appeared 1 times.</span><br><span class=\"line\">send appeared 1 times.</span><br><span class=\"line\">(HDFS) appeared 1 times.</span><br><span class=\"line\">3. appeared 1 times.</span><br><span class=\"line\">without appeared 2 times.</span><br><span class=\"line\">for appeared 3 times.</span><br><span class=\"line\">models. appeared 1 times.</span><br><span class=\"line\">require appeared 1 times.</span><br><span class=\"line\">just appeared 1 times.</span><br><span class=\"line\">@JSHorwitz. appeared 1 times.</span><br><span class=\"line\">Labs appeared 1 times.</span><br><span class=\"line\">latest appeared 2 times.</span><br><span class=\"line\">regression, appeared 1 times.</span><br><span class=\"line\">node appeared 1 times.</span><br><span class=\"line\">coming appeared 1 times.</span><br><span class=\"line\">your appeared 1 times.</span><br><span class=\"line\">up appeared 2 times.</span><br><span class=\"line\">analysis appeared 1 times.</span><br><span class=\"line\">20 appeared 1 times.</span><br><span class=\"line\">advanced appeared 2 times.</span><br><span class=\"line\">Distributed appeared 1 times.</span><br><span class=\"line\">no appeared 1 times.</span><br><span class=\"line\">large-scale appeared 1 times.</span><br><span class=\"line\">since appeared 1 times.</span><br><span class=\"line\">started appeared 1 times.</span><br><span class=\"line\">empowers appeared 1 times.</span><br><span class=\"line\">transformation, appeared 1 times.</span><br><span class=\"line\">by appeared 1 times.</span><br><span class=\"line\">like appeared 1 times.</span><br><span class=\"line\">compatibility appeared 1 times.</span><br><span class=\"line\">2005. appeared 1 times.</span><br><span class=\"line\">both appeared 1 times.</span><br><span class=\"line\">an appeared 1 times.</span><br><span class=\"line\">streaming appeared 1 times.</span><br><span class=\"line\">(Shark), appeared 1 times.</span><br><span class=\"line\">analyzed appeared 1 times.</span><br><span class=\"line\">Streaming) appeared 1 times.</span><br><span class=\"line\">made appeared 1 times.</span><br><span class=\"line\">nicely appeared 1 times.</span><br><span class=\"line\">configuration. appeared 1 times.</span><br><span class=\"line\">with appeared 3 times.</span><br><span class=\"line\">algorithms, appeared 1 times.</span><br><span class=\"line\">meet appeared 1 times.</span><br><span class=\"line\">data appeared 4 times.</span><br><span class=\"line\">interesting appeared 1 times.</span><br><span class=\"line\">in appeared 5 times.</span><br><span class=\"line\">logistic appeared 1 times.</span><br><span class=\"line\">GigaOM appeared 1 times.</span><br><span class=\"line\">Summit. appeared 1 times.</span><br><span class=\"line\">increase appeared 1 times.</span><br><span class=\"line\">hundreds appeared 1 times.</span><br><span class=\"line\">support appeared 1 times.</span><br><span class=\"line\">scales appeared 1 times.</span><br><span class=\"line\">Click appeared 1 times.</span><br><span class=\"line\">building appeared 1 times.</span><br><span class=\"line\">other appeared 1 times.</span><br><span class=\"line\">course appeared 1 times.</span><br><span class=\"line\">exploration, appeared 1 times.</span><br><span class=\"line\">rock appeared 1 times.</span><br><span class=\"line\">key appeared 1 times.</span><br><span class=\"line\">you appeared 1 times.</span><br><span class=\"line\">hardware appeared 1 times.</span><br><span class=\"line\">that appeared 4 times.</span><br><span class=\"line\">a appeared 3 times.</span><br><span class=\"line\">fast appeared 1 times.</span><br><span class=\"line\">their appeared 1 times.</span><br><span class=\"line\">example, appeared 1 times.</span><br><span class=\"line\">last appeared 1 times.</span><br><span class=\"line\">SQL appeared 1 times.</span><br><span class=\"line\">demonstrated appeared 1 times.</span><br><span class=\"line\">will appeared 1 times.</span><br><span class=\"line\">to appeared 10 times.</span><br><span class=\"line\">get appeared 1 times.</span><br><span class=\"line\">platform appeared 1 times.</span><br><span class=\"line\"> appeared 7 times.</span><br><span class=\"line\">languages appeared 1 times.</span><br><span class=\"line\">list appeared 1 times.</span><br><span class=\"line\">there! appeared 1 times.</span><br><span class=\"line\">(Spark appeared 1 times.</span><br><span class=\"line\">Scala, appeared 1 times.</span><br><span class=\"line\">and appeared 7 times.</span><br><span class=\"line\">Marketing appeared 1 times.</span><br><span class=\"line\">(Hadoop appeared 1 times.</span><br><span class=\"line\">certified appeared 1 times.</span><br><span class=\"line\">additional appeared 1 times.</span><br><span class=\"line\">System appeared 1 times.</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Spark1.3.0集群搭建</p>\n<h2 id=\"CentOS-6-5集群搭建\"><a href=\"#CentOS-6-5集群搭建\" class=\"headerlink\" title=\"CentOS 6.5集群搭建\"></a>CentOS 6.5集群搭建</h2><h3 id=\"VirtualBox安装\"><a href=\"#VirtualBox安装\" class=\"headerlink\" title=\"VirtualBox安装\"></a>VirtualBox安装</h3><p>使用Virtual Box安装包，一步一步安装即可。Oracle_VM_VirtualBox_Extension_Pack-4.1.40-101594.vbox-extpack。之所以选用Virtual Box是因为它比VMWare更加稳定。使用VMWare运行hadoop集群或者spark集群时，有时会出现休眠后重启时，某些进程莫名挂掉的问题。而Virtual Box没有这种情况。之所以选择Virtual Box 4.1版本，是因为更高的版本就不兼容win7了。<br>由于用的是Mac，所以自己安装VirturlBox。</p>\n<p><a href=\"https://www.virtualbox.org/\">Virtual Box 官网</a></p>\n<h3 id=\"CentOS-6-5安装\"><a href=\"#CentOS-6-5安装\" class=\"headerlink\" title=\"CentOS 6.5安装\"></a>CentOS 6.5安装</h3><p>使用CentOS 6.5镜像即可，CentOS-6.5-i386-minimal.iso。<br>创建虚拟机：打开Virtual Box，点击“新建”按钮，点击“下一步”，输入虚拟机名称为spark1，选择操作系统为Linux，选择版本为Red Hat，分配1024MB内存，后面的选项全部用默认，在Virtual Disk File location and size中，一定要自己选择一个目录来存放虚拟机文件，最后点击“create”按钮，开始创建虚拟机。<br>设置虚拟机网卡：选择创建好的spark1虚拟机，点击“设置”按钮，在网络一栏中，连接方式中，选择“Bridged Adapter”。<br>安装虚拟机中的CentOS 6.5操作系统：选择创建好的虚拟机spark1，点击“开始”按钮，选择安装介质（即本地的CentOS 6.5镜像文件），选择第一项开始安装-Skip-欢迎界面Next-选择默认语言-Baisc Storage Devices-Yes, discard any data-主机名:spark1-选择时区-设置初始密码为hadoop-Replace Existing Linux System-Write changes to disk-CentOS 6.5自己开始安装。<br>安装完以后，CentOS会提醒你要重启一下，就是reboot，你就reboot就可以了。</p>\n<h3 id=\"CentOS-6-5网络配置\"><a href=\"#CentOS-6-5网络配置\" class=\"headerlink\" title=\"CentOS 6.5网络配置\"></a>CentOS 6.5网络配置</h3><p>先临时性设置虚拟机ip地址：ifconfig eth0 192.168.1.107，在&#x2F;etc&#x2F;hosts文件中配置本地ip（192.168.1.107）到host（spark1）的映射。<br>配置windows主机上的hosts文件：C:\\Windows\\System32\\drivers\\etc\\hosts，192.168.1.107 spark1。<br>使用SecureCRT从windows上连接虚拟机，自己可以上网下一个SecureCRT的绿色版，网上很多。<br>永久性配置CentOS网络。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class=\"line\">DEVICE=eth0</span><br><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">IPADDR=192.168.1.107</span><br><span class=\"line\">NETMASK=255.255.255.0</span><br><span class=\"line\">GATEWAY=192.168.1.1</span><br></pre></td></tr></table></figure>\n\n<p>重启网卡 service network restart。<br>即使更换了ip地址，重启网卡，可能还是联不通网。那么可以先将IPADDR、NETMASK、GATEWAY给删除，将BOOTPROTO改成dhcp。然后用service network restart重启网卡。此时linux会自动给分配一个ip地址，用ifconfig查看分配的ip地址。然后再次按照之前说的，配置网卡，将ip改成自动分配的ip地址。最后再重启一次网卡。</p>\n<p>由于用的是Mac，所以自己安装SecureCRT，自己安装破解版。</p>\n<p><a href=\"https://www.vandyke.com/products/securecrt/\">SecureCRT官网</a></p>\n<h3 id=\"CentOS-6-5防火墙和DNS配置\"><a href=\"#CentOS-6-5防火墙和DNS配置\" class=\"headerlink\" title=\"CentOS 6.5防火墙和DNS配置\"></a>CentOS 6.5防火墙和DNS配置</h3><p>关闭防火墙</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service iptables stop</span><br><span class=\"line\">chkconfig iptables off</span><br><span class=\"line\">vi /etc/selinux/config</span><br><span class=\"line\">SELINUX=disabled</span><br></pre></td></tr></table></figure>\n<p>自己在win7的控制面板中，关闭windows的防火墙！</p>\n<p>配置dns服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/resolv.conf</span><br><span class=\"line\">nameserver 61.139.2.69</span><br><span class=\"line\">ping www.baidu.com</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CentOS-6-5-yum配置\"><a href=\"#CentOS-6-5-yum配置\" class=\"headerlink\" title=\"CentOS 6.5 yum配置\"></a>CentOS 6.5 yum配置</h3><p>修改repo，使用WinSCP（网上很多，自己下一个），将CentOS6-Base-163.repo上传到CentOS中的&#x2F;usr&#x2F;local目录下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/yum.repos.d/</span><br><span class=\"line\">rm -rf *</span><br></pre></td></tr></table></figure>\n<p>将自己的repo文件移动到&#x2F;etc&#x2F;yum.repos.d&#x2F;目录中：cp &#x2F;usr&#x2F;local&#x2F;CentOS6-Base-163.repo .，修改repo文件，把所有gpgcheck属性修改为0。</p>\n<p>配置yum</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br><span class=\"line\">yum install telnet</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JDK-1-7安装\"><a href=\"#JDK-1-7安装\" class=\"headerlink\" title=\"JDK 1.7安装\"></a>JDK 1.7安装</h3><p>将jdk-7u60-linux-i586.rpm通过WinSCP上传到虚拟机中<br>安装JDK：rpm -ivh jdk-7u65-linux-i586.rpm<br>配置jdk相关的环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .bashrc</span><br><span class=\"line\">export JAVA_HOME=/usr/java/latest</span><br><span class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n<p>测试jdk安装是否成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br><span class=\"line\">rm -f /etc/udev/rules.d/70-persistent-net.rules</span><br></pre></td></tr></table></figure>\n<p>由于用的是Mac，所以自己安装FileZilla，没有安装WinSCP。</p>\n<h3 id=\"安装第二台和第三台虚拟机\"><a href=\"#安装第二台和第三台虚拟机\" class=\"headerlink\" title=\"安装第二台和第三台虚拟机\"></a>安装第二台和第三台虚拟机</h3><p>安装上述步骤，再安装两台一模一样环境的虚拟机，因为后面hadoop和spark都是要搭建集群的。<br>集群的最小环境就是三台。因为后面要搭建ZooKeeper、kafka等集群。<br>另外两台机器的hostname分别设置为spark2和spark3即可，ip分别为192.168.1.108和192.168.1.109<br>在安装的时候，另外两台虚拟机的centos镜像文件必须重新拷贝一份，放在新的目录里，使用各自自己的镜像文件。<br>虚拟机的硬盘文件也必须重新选择一个新的目录，以更好的区分。<br>安装好之后，记得要在三台机器的&#x2F;etc&#x2F;hosts文件中，配置全三台机器的ip地址到hostname的映射，而不能只配置本机，这个很重要！<br>在windows的hosts文件中也要配置全三台机器的ip地址到hostname的映射。</p>\n<h3 id=\"配置集群ssh免密码登录\"><a href=\"#配置集群ssh免密码登录\" class=\"headerlink\" title=\"配置集群ssh免密码登录\"></a>配置集群ssh免密码登录</h3><p>首先在三台机器上配置对本机的ssh免密码登录。生成本机的公钥，过程中不断敲回车即可，ssh-keygen命令默认会将公钥放在&#x2F;root&#x2F;.ssh目录下。ssh-keygen -t rsa。将公钥复制为authorized_keys文件，此时使用ssh连接本机就不需要输入密码了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /root/.ssh</span><br><span class=\"line\">cp id_rsa.pub authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>接着配置三台机器互相之间的ssh免密码登录。使用ssh-copy-id -i spark命令将本机的公钥拷贝到指定机器的authorized_keys文件中（方便好用）。</p>\n<h2 id=\"Hadoop-2-4-1集群搭建\"><a href=\"#Hadoop-2-4-1集群搭建\" class=\"headerlink\" title=\"Hadoop 2.4.1集群搭建\"></a>Hadoop 2.4.1集群搭建</h2><h3 id=\"安装hadoop包\"><a href=\"#安装hadoop包\" class=\"headerlink\" title=\"安装hadoop包\"></a>安装hadoop包</h3><p>使用hadoop-2.4.1.tar.gz，使用WinSCP上传到CentOS的&#x2F;usr&#x2F;local目录下<br>将hadoop包进行解压缩：tar -zxvf hadoop-2.4.1.tar.gz<br>对hadoop目录进行重命名：mv hadoop-2.4.1 hadoop<br>配置hadoop相关环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .bashrc</span><br><span class=\"line\">export HADOOP_HOME=/usr/local/hadoop</span><br><span class=\"line\">export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n\n<p>由于用的是Mac，所以自己使用FileZilla，不是WinSCP。</p>\n<h3 id=\"修改core-site-xml\"><a href=\"#修改core-site-xml\" class=\"headerlink\" title=\"修改core-site.xml\"></a>修改core-site.xml</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;hdfs://spark1:9000&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改hdfs-site-xml\"><a href=\"#修改hdfs-site-xml\" class=\"headerlink\" title=\"修改hdfs-site.xml\"></a>修改hdfs-site.xml</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;dfs.name.dir&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;/usr/local/data/namenode&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;dfs.data.dir&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;/usr/local/data/datanode&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;dfs.tmp.dir&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;/usr/local/data/tmp&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;3&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">修改mapred-site.xml</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;yarn&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">修改yarn-site.xml</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;spark1&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改slaves文件\"><a href=\"#修改slaves文件\" class=\"headerlink\" title=\"修改slaves文件\"></a>修改slaves文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spark1</span><br><span class=\"line\">spark2</span><br><span class=\"line\">spark3</span><br></pre></td></tr></table></figure>\n<h3 id=\"在另外两台机器上搭建hadoop\"><a href=\"#在另外两台机器上搭建hadoop\" class=\"headerlink\" title=\"在另外两台机器上搭建hadoop\"></a>在另外两台机器上搭建hadoop</h3><p>使用如上配置在另外两台机器上搭建hadoop，可以使用scp命令将spark1上面的hadoop安装包和.bashrc配置文件都拷贝过去。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /usr/local/hadoop root@spark2:/usr/local/</span><br><span class=\"line\">scp -r /usr/local/hadoop root@spark3:/usr/local/</span><br><span class=\"line\">scp .bashrc root@spark2:~/</span><br><span class=\"line\">scp .bashrc root@spark3:~/</span><br></pre></td></tr></table></figure>\n<p>要记得对.bashrc文件进行source，以让它生效。<br>记得在spark2和spark3的&#x2F;usr&#x2F;local目录下创建data目录。</p>\n<h3 id=\"启动hdfs集群\"><a href=\"#启动hdfs集群\" class=\"headerlink\" title=\"启动hdfs集群\"></a>启动hdfs集群</h3><p>格式化namenode：在spark1上执行以下命令，<code>hdfs namenode -format</code><br>启动hdfs集群：<code>start-dfs.sh</code><br> 验证启动是否成功：jps、访问spark:50070 (关闭CentOS 6.5 防火墙)。spark1：namenode、datanode、secondarynamenode。spark2：datanode。spark3：datanode。</p>\n<h3 id=\"启动yarn集群\"><a href=\"#启动yarn集群\" class=\"headerlink\" title=\"启动yarn集群\"></a>启动yarn集群</h3><p>启动yarn集群：<code>start-yarn.sh</code><br> 验证启动是否成功：jps、访问spark:8088(关闭CentOS 6.5 防火墙)。spark1：resourcemanager、nodemanager。spark2：nodemanager。spark3：nodemanager。</p>\n<h3 id=\"Hive-0-13搭建\"><a href=\"#Hive-0-13搭建\" class=\"headerlink\" title=\"Hive 0.13搭建\"></a>Hive 0.13搭建</h3><p>安装hive包<br>将课程提供的apache-hive-0.13.1-bin.tar.gz使用WinSCP上传到spark1的&#x2F;usr&#x2F;local目录下。<br>解压缩hive安装包：tar -zxvf apache-hive-0.13.1-bin.tar.gz。<br>重命名hive目录：mv apache-hive-0.13.1-bin hive。<br>配置hive相关的环境变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .bashrc</span><br><span class=\"line\">export HIVE_HOME=/usr/local/hive</span><br><span class=\"line\">export PATH=$HIVE_HOME/bin</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h3><p>在spark1上安装mysql<br>使用yum安装mysql server</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y mysql-server</span><br><span class=\"line\">service mysqld start</span><br><span class=\"line\">chkconfig mysqld on</span><br></pre></td></tr></table></figure>\n<p>使用yum安装mysql connector</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y mysql-connector-java</span><br></pre></td></tr></table></figure>\n<p>将mysql connector拷贝到hive的lib包中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/share/java/mysql-connector-java-5.1.17.jar /usr/local/hive/lib</span><br></pre></td></tr></table></figure>\n<p>在mysql上创建hive元数据库，并对hive进行授权</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database if not exists hive_metadata;</span><br><span class=\"line\">grant all privileges on hive_metadata.* to &#x27;hive&#x27;@&#x27;%&#x27; identified by &#x27;hive&#x27;;</span><br><span class=\"line\">grant all privileges on hive_metadata.* to &#x27;hive&#x27;@&#x27;localhost&#x27; identified by &#x27;hive&#x27;;</span><br><span class=\"line\">grant all privileges on hive_metadata.* to &#x27;hive&#x27;@&#x27;spark1&#x27; identified by &#x27;hive&#x27;;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">use hive_metadata;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置hive-site-xml\"><a href=\"#配置hive-site-xml\" class=\"headerlink\" title=\"配置hive-site.xml\"></a>配置hive-site.xml</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv hive-default.xml.template hive-site.xml</span><br><span class=\"line\">vi hive-site.xml</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;jdbc:mysql://spark1:3306/hive_metadata?createDatabaseIfNotExist=true&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;hive&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;hive&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  &lt;name&gt;hive.metastore.warehouse.dir&lt;/name&gt;</span><br><span class=\"line\">  &lt;value&gt;/user/hive/warehouse&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置hive-env-sh和hive-config-sh\"><a href=\"#配置hive-env-sh和hive-config-sh\" class=\"headerlink\" title=\"配置hive-env.sh和hive-config.sh\"></a>配置hive-env.sh和hive-config.sh</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv hive-env.sh.template hive-env.sh</span><br><span class=\"line\">vi /usr/local/hive/bin/hive-config.sh</span><br><span class=\"line\">export JAVA_HOME=/usr/java/latest</span><br><span class=\"line\">export HIVE_HOME=/usr/local/hive</span><br><span class=\"line\">export HADOOP_HOME=/usr/local/hadoop</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证hive是否安装成功\"><a href=\"#验证hive是否安装成功\" class=\"headerlink\" title=\"验证hive是否安装成功\"></a>验证hive是否安装成功</h3><p>直接输入hive命令，可以进入hive命令行</p>\n<h2 id=\"ZooKeeper-3-4-5集群搭建\"><a href=\"#ZooKeeper-3-4-5集群搭建\" class=\"headerlink\" title=\"ZooKeeper 3.4.5集群搭建\"></a>ZooKeeper 3.4.5集群搭建</h2><h3 id=\"安装ZooKeeper包\"><a href=\"#安装ZooKeeper包\" class=\"headerlink\" title=\"安装ZooKeeper包\"></a>安装ZooKeeper包</h3><p>将zookeeper-3.4.5.tar.gz使用WinSCP拷贝到spark1的&#x2F;usr&#x2F;local目录下。<br>对zookeeper-3.4.5.tar.gz进行解压缩：tar -zxvf zookeeper-3.4.5.tar.gz。<br>对zookeeper目录进行重命名：mv zookeeper-3.4.5 zk。<br>配置zookeeper相关的环境变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .bashrc</span><br><span class=\"line\">export ZOOKEEPER_HOME=/usr/local/zk</span><br><span class=\"line\">export PATH=$ZOOKEEPER_HOME/bin</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置zoo-cfg\"><a href=\"#配置zoo-cfg\" class=\"headerlink\" title=\"配置zoo.cfg\"></a>配置zoo.cfg</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd zk/conf</span><br><span class=\"line\">mv zoo_sample.cfg zoo.cfg</span><br><span class=\"line\">vi zoo.cfg</span><br><span class=\"line\">dataDir=/usr/local/zk/data</span><br><span class=\"line\">server.0=spark1:2888:3888\t</span><br><span class=\"line\">server.1=spark2:2888:3888</span><br><span class=\"line\">server.2=spark3:2888:3888</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置zk节点标识\"><a href=\"#设置zk节点标识\" class=\"headerlink\" title=\"设置zk节点标识\"></a>设置zk节点标识</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd zk</span><br><span class=\"line\">mkdir data</span><br><span class=\"line\">cd data</span><br><span class=\"line\">vi myid</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<h3 id=\"搭建zk集群\"><a href=\"#搭建zk集群\" class=\"headerlink\" title=\"搭建zk集群\"></a>搭建zk集群</h3><p>在另外两个节点上按照上述步骤配置ZooKeeper，使用scp将zk和.bashrc拷贝到spark2和spark3上即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /usr/local/zk root@spark2:/usr/local/</span><br><span class=\"line\">scp -r /usr/local/zk root@spark3:/usr/local/</span><br><span class=\"line\">scp ~/.bashrc root@spark2:~/</span><br><span class=\"line\">scp ~/.bashrc root@spark3:~/</span><br><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>唯一的区别是spark2和spark3的标识号分别设置为1和2。</p>\n<h3 id=\"启动ZooKeeper集群\"><a href=\"#启动ZooKeeper集群\" class=\"headerlink\" title=\"启动ZooKeeper集群\"></a>启动ZooKeeper集群</h3><p>分别在三台机器上执行：zkServer.sh start。<br>检查ZooKeeper状态：zkServer.sh status。</p>\n<h2 id=\"kafka-2-9-2-0-8-1集群搭建\"><a href=\"#kafka-2-9-2-0-8-1集群搭建\" class=\"headerlink\" title=\"kafka_2.9.2-0.8.1集群搭建\"></a>kafka_2.9.2-0.8.1集群搭建</h2><h3 id=\"安装scala-2-11-4\"><a href=\"#安装scala-2-11-4\" class=\"headerlink\" title=\"安装scala 2.11.4\"></a>安装scala 2.11.4</h3><p>将课程提供的scala-2.11.4.tgz使用WinSCP拷贝到spark1的&#x2F;usr&#x2F;local目录下。<br>对scala-2.11.4.tgz进行解压缩：tar -zxvf scala-2.11.4.tgz。<br>对scala目录进行重命名：mv scala-2.11.4 scala。</p>\n<h3 id=\"配置scala相关的环境变量。\"><a href=\"#配置scala相关的环境变量。\" class=\"headerlink\" title=\"配置scala相关的环境变量。\"></a>配置scala相关的环境变量。</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .bashrc</span><br><span class=\"line\">export SCALA_HOME=/usr/local/scala</span><br><span class=\"line\">export PATH=$SCALA_HOME/bin</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n<p>查看scala是否安装成功：scala -version<br>按照上述步骤在spark2和spark3机器上都安装好scala。使用scp将scala和.bashrc拷贝到spark2和spark3上即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /usr/local/scala root@spark2:/usr/local/</span><br><span class=\"line\">scp -r /usr/local/scala root@spark3:/usr/local/</span><br><span class=\"line\">scp ~/.bashrc root@spark2:~/</span><br><span class=\"line\">scp ~/.bashrc root@spark3:~/</span><br><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Kafka包\"><a href=\"#安装Kafka包\" class=\"headerlink\" title=\"安装Kafka包\"></a>安装Kafka包</h3><p>将课程提供的kafka_2.9.2-0.8.1.tgz使用WinSCP拷贝到spark1的&#x2F;usr&#x2F;local目录下。<br>对kafka_2.9.2-0.8.1.tgz进行解压缩：tar -zxvf kafka_2.9.2-0.8.1.tgz。<br>对kafka目录进行改名：mv kafka_2.9.2-0.8.1 kafka。</p>\n<h3 id=\"配置kafka。\"><a href=\"#配置kafka。\" class=\"headerlink\" title=\"配置kafka。\"></a>配置kafka。</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/local/kafka/config/server.properties</span><br></pre></td></tr></table></figure>\n<p>broker.id：依次增长的整数，0、1、2、3、4，集群中Broker的唯一id<br>zookeeper.connect&#x3D;192.168.1.107:2181,192.168.1.108:2181,192.168.1.109:2181<br>安装slf4j。<br>将课程提供的slf4j-1.7.6.zip上传到&#x2F;usr&#x2F;local目录下。unzip slf4j-1.7.6.zip。<br>把slf4j中的slf4j-nop-1.7.6.jar复制到kafka的libs目录下面。</p>\n<h3 id=\"搭建kafka集群\"><a href=\"#搭建kafka集群\" class=\"headerlink\" title=\"搭建kafka集群\"></a>搭建kafka集群</h3><p>按照上述步骤在spark2和spark3分别安装kafka。用scp把kafka拷贝到spark2和spark3行即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /usr/local/kafka root@spark2:/usr/local/</span><br><span class=\"line\">scp -r /usr/local/kafka root@spark3:/usr/local/</span><br></pre></td></tr></table></figure>\n<p>唯一区别的，就是server.properties中的broker.id，要设置为1和2。</p>\n<h3 id=\"启动kafka集群\"><a href=\"#启动kafka集群\" class=\"headerlink\" title=\"启动kafka集群\"></a>启动kafka集群</h3><p>在三台机器上分别执行以下命令：nohup bin&#x2F;kafka-server-start.sh config&#x2F;server.properties &amp;。</p>\n<p>解决kafka Unrecognized VM option ‘UseCompressedOops’问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi bin/kafka-run-class.sh </span><br><span class=\"line\">if [ -z &quot;$KAFKA_JVM_PERFORMANCE_OPTS&quot; ]; then</span><br><span class=\"line\">  KAFKA_JVM_PERFORMANCE_OPTS=&quot;-server  -XX:+UseCompressedOops -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>去掉-XX:+UseCompressedOops即可<br>使用jps检查启动是否成功。</p>\n<h3 id=\"测试kafka集群\"><a href=\"#测试kafka集群\" class=\"headerlink\" title=\"测试kafka集群\"></a>测试kafka集群</h3><p>使用基本命令检查kafka是否搭建成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --zookeeper spark1:2181,spark2:2181,spark3:2181 --topic Test --replication-factor 1 --partitions 1 --create</span><br><span class=\"line\"></span><br><span class=\"line\">bin/kafka-console-producer.sh --broker-list spark1:9092,spark2:9092,spark3:9092 --topic Test</span><br><span class=\"line\"></span><br><span class=\"line\">bin/kafka-console-consumer.sh --zookeeper spark1:2181,spark2:2181,spark3:2181 --topic Test --from-beginning</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Spark-1-3-0集群搭建\"><a href=\"#Spark-1-3-0集群搭建\" class=\"headerlink\" title=\"Spark 1.3.0集群搭建\"></a>Spark 1.3.0集群搭建</h2><h2 id=\"安装spark包\"><a href=\"#安装spark包\" class=\"headerlink\" title=\"安装spark包\"></a>安装spark包</h2><p>将spark-1.3.0-bin-hadoop2.4.tgz使用WinSCP上传到&#x2F;usr&#x2F;local目录下。<br>解压缩spark包：tar zxvf spark-1.3.0-bin-hadoop2.4.tgz。<br>更改spark目录名：mv spark-1.3.0-bin-hadoop2.4 spark。<br>设置spark环境变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi .bashrc</span><br><span class=\"line\">export SPARK_HOME=/usr/local/spark</span><br><span class=\"line\">export PATH=$SPARK_HOME/bin</span><br><span class=\"line\">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改spark-env-sh文件\"><a href=\"#修改spark-env-sh文件\" class=\"headerlink\" title=\"修改spark-env.sh文件\"></a>修改spark-env.sh文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/spark/conf</span><br><span class=\"line\">cp spark-env.sh.template spark-env.sh</span><br><span class=\"line\">vi spark-env.sh</span><br><span class=\"line\">export JAVA_HOME=/usr/java/latest</span><br><span class=\"line\">export SCALA_HOME=/usr/local/scala</span><br><span class=\"line\">export SPARK_MASTER_IP=192.168.1.107</span><br><span class=\"line\">export SPARK_WORKER_MEMORY=1g</span><br><span class=\"line\">export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改slaves文件-1\"><a href=\"#修改slaves文件-1\" class=\"headerlink\" title=\"修改slaves文件\"></a>修改slaves文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp slaves.template slaves</span><br><span class=\"line\">vi slaves</span><br><span class=\"line\">spark2</span><br><span class=\"line\">spark3</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装spark集群\"><a href=\"#安装spark集群\" class=\"headerlink\" title=\"安装spark集群\"></a>安装spark集群</h3><p>在另外两个节点进行一模一样的配置，使用scp将spark和.bashrc拷贝到spark2和spark3即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r /usr/local/spark root@spark2:/usr/local/</span><br><span class=\"line\">scp -r /usr/local/spark root@spark3:/usr/local/</span><br><span class=\"line\">scp ~/.bashrc root@spark2:~/</span><br><span class=\"line\">scp ~/.bashrc root@spark3:~/</span><br><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动spark集群\"><a href=\"#启动spark集群\" class=\"headerlink\" title=\"启动spark集群\"></a>启动spark集群</h3><p>在spark目录下的sbin目录<br>执行，&#x2F;start-all.sh<br>使用jsp和8080端口可以检查集群是否启动成功<br>进入spark-shell查看是否正常</p>\n<h2 id=\"WordCount\"><a href=\"#WordCount\" class=\"headerlink\" title=\"WordCount\"></a>WordCount</h2><h3 id=\"Java开发wordcount程序\"><a href=\"#Java开发wordcount程序\" class=\"headerlink\" title=\"Java开发wordcount程序\"></a>Java开发wordcount程序</h3><h3 id=\"安装eclipse\"><a href=\"#安装eclipse\" class=\"headerlink\" title=\"安装eclipse\"></a>安装eclipse</h3><p><a href=\"https://www.eclipse.org/downloads/\">eclipse download</a></p>\n<h3 id=\"配置maven\"><a href=\"#配置maven\" class=\"headerlink\" title=\"配置maven\"></a>配置maven</h3><p>打开eclipse-&gt;新建Maven Project-&gt;maven-archetype-quickstart-&gt;groupId:cn.spark-&gt;artifactId:spark-study-java-&gt;package:cn.spark.study-&gt;替换pom.xml-quick fix(第一次要等待很长时间)-&gt;Buid Baph-&gt;Configure Build Path-&gt;Libaries-&gt;JRE System Libarary-&gt;Edit-&gt;Workspace default JRE。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: pom.xml</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;groupId&gt;cn.spark&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spark-study-java&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">  &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;name&gt;spark-study-java&lt;/name&gt;</span><br><span class=\"line\">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;properties&gt;</span><br><span class=\"line\">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">  &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">      &lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class=\"line\">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;spark-core_2.10&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;spark-sql_2.10&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class=\"line\">\t  &lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;spark-hive_2.10&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;spark-streaming_2.10&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;2.4.1&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">\t&lt;dependency&gt;</span><br><span class=\"line\">\t  &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">\t  &lt;artifactId&gt;spark-streaming-kafka_2.10&lt;/artifactId&gt;</span><br><span class=\"line\">\t  &lt;version&gt;1.3.0&lt;/version&gt;</span><br><span class=\"line\">\t&lt;/dependency&gt;</span><br><span class=\"line\">  &lt;/dependencies&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;build&gt;</span><br><span class=\"line\">    &lt;sourceDirectory&gt;src/main/java&lt;/sourceDirectory&gt;</span><br><span class=\"line\">    &lt;testSourceDirectory&gt;src/main/test&lt;/testSourceDirectory&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;configuration&gt;</span><br><span class=\"line\">          &lt;descriptorRefs&gt;</span><br><span class=\"line\">            &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;</span><br><span class=\"line\">          &lt;/descriptorRefs&gt;</span><br><span class=\"line\">          &lt;archive&gt;</span><br><span class=\"line\">            &lt;manifest&gt;</span><br><span class=\"line\">              &lt;mainClass&gt;&lt;/mainClass&gt;</span><br><span class=\"line\">            &lt;/manifest&gt;</span><br><span class=\"line\">          &lt;/archive&gt;</span><br><span class=\"line\">        &lt;/configuration&gt;</span><br><span class=\"line\">        &lt;executions&gt;</span><br><span class=\"line\">          &lt;execution&gt;</span><br><span class=\"line\">            &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class=\"line\">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">              &lt;goal&gt;single&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">          &lt;/execution&gt;</span><br><span class=\"line\">        &lt;/executions&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;1.2.1&lt;/version&gt;</span><br><span class=\"line\">        &lt;executions&gt;</span><br><span class=\"line\">          &lt;execution&gt;</span><br><span class=\"line\">            &lt;goals&gt;</span><br><span class=\"line\">              &lt;goal&gt;exec&lt;/goal&gt;</span><br><span class=\"line\">            &lt;/goals&gt;</span><br><span class=\"line\">          &lt;/execution&gt;</span><br><span class=\"line\">        &lt;/executions&gt;</span><br><span class=\"line\">        &lt;configuration&gt;</span><br><span class=\"line\">          &lt;executable&gt;java&lt;/executable&gt;</span><br><span class=\"line\">          &lt;includeProjectDependencies&gt;true&lt;/includeProjectDependencies&gt;</span><br><span class=\"line\">          &lt;includePluginDependencies&gt;false&lt;/includePluginDependencies&gt;</span><br><span class=\"line\">          &lt;classpathScope&gt;compile&lt;/classpathScope&gt;</span><br><span class=\"line\">          &lt;mainClass&gt;cn.spark.study.App&lt;/mainClass&gt;</span><br><span class=\"line\">        &lt;/configuration&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;plugin&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;configuration&gt;</span><br><span class=\"line\">          &lt;source&gt;1.6&lt;/source&gt;</span><br><span class=\"line\">          &lt;target&gt;1.6&lt;/target&gt;</span><br><span class=\"line\">        &lt;/configuration&gt;</span><br><span class=\"line\">      &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">  &lt;/build&gt;</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建spark-txt，新建包cn-spark-study-core，新建WordCountLocal-java\"><a href=\"#新建spark-txt，新建包cn-spark-study-core，新建WordCountLocal-java\" class=\"headerlink\" title=\"新建spark.txt，新建包cn.spark.study.core，新建WordCountLocal.java\"></a>新建spark.txt，新建包cn.spark.study.core，新建WordCountLocal.java</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: spark.txt</span><br><span class=\"line\">Spark is new technology that sits on top of Hadoop Distributed File System (HDFS) that is characterized as ¡°a fast and general engine for large-scale data processing.¡± Spark has three key features that make it the most interesting up and coming technology to rock the big data world since Apache Hadoop in 2005.</span><br><span class=\"line\"></span><br><span class=\"line\">1. For iterative analysis like logistic regression, Random Forests, or other advanced algorithms, Spark has demonstrated 100X increase in speed that scales to hundreds of millions of rows.</span><br><span class=\"line\"></span><br><span class=\"line\">2. Spark has native support for the latest and greatest programming languages Java, Scala, and of course Python.</span><br><span class=\"line\"></span><br><span class=\"line\">3. Spark has generality or platform compatibility in both directions meaning it integrates nicely with SQL engines (Shark), Machine Learning (MLlib), and streaming (Spark Streaming) without requiring new software installed on the cluster using Hadoop¡¯s new YARN cluster manager.</span><br><span class=\"line\"></span><br><span class=\"line\">At Alpine, we have made it dead simple to get started with Spark by including the technology in our latest build out of the box. We require no additional software or hardware to leverage our extensive list of operators for data transformation, exploration, and building advanced analytic models. We leverage Hadoop Yarn (Hadoop NextGen) to launch Spark job without any pre-installation of Spark or modification of cluster configuration. This empowers our customers to have seamless integration of our Spark implementation and their Hadoop stack. For example, we have analyzed 50 Million rows of account data in 50 seconds on a 20 node cluster recently at last month GigaOM conference.</span><br><span class=\"line\"></span><br><span class=\"line\">As a Spark certified company, Alpine Data Labs will be at the Summit. We¡¯d love to see you there!</span><br><span class=\"line\"></span><br><span class=\"line\">Want to meet with us?  Click here to set up an appointment at your convenience. Or just send a tweet to our Product &amp; Marketing Director Joel Horwitz @JSHorwitz.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: WordCountLocal.java</span><br><span class=\"line\">package cn.spark.study.core;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.spark.SparkConf;</span><br><span class=\"line\">import org.apache.spark.api.java.JavaPairRDD;</span><br><span class=\"line\">import org.apache.spark.api.java.JavaRDD;</span><br><span class=\"line\">import org.apache.spark.api.java.JavaSparkContext;</span><br><span class=\"line\">import org.apache.spark.api.java.function.FlatMapFunction;</span><br><span class=\"line\">import org.apache.spark.api.java.function.Function2;</span><br><span class=\"line\">import org.apache.spark.api.java.function.PairFunction;</span><br><span class=\"line\">import org.apache.spark.api.java.function.VoidFunction;</span><br><span class=\"line\"></span><br><span class=\"line\">import scala.Tuple2;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 使用java开发本地测试wordcount程序</span><br><span class=\"line\"> * @author xdx</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class WordCountLocal &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t// 第一步：创建SparkConf对象，设置Spark应用的配置信息</span><br><span class=\"line\">\t\t// 使用setMaster()可以设置Spark应用程序要连接的Spark集群的master节点的url</span><br><span class=\"line\">\t\t// 但是如果设置为local则代表，在本地运行</span><br><span class=\"line\">\t\tSparkConf conf = new SparkConf()</span><br><span class=\"line\">\t\t\t\t.setAppName(&quot;WordCountLocal&quot;)</span><br><span class=\"line\">\t\t\t\t.setMaster(&quot;local&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 第二步：创建JavaSparkContext对象</span><br><span class=\"line\">\t\t// 在Spark中，SparkContext是Spark所有功能的一个入口，你无论是用java、scala，甚至是python编写</span><br><span class=\"line\">\t\t\t// 都必须要有一个SparkContext，它的主要作用，包括初始化Spark应用程序所需的一些核心组件，包括</span><br><span class=\"line\">\t\t\t// 调度器（DAGSchedule、TaskScheduler），还会去到Spark Master节点上进行注册，等等</span><br><span class=\"line\">\t\t// 一句话，SparkContext，是Spark应用中，可以说是最最重要的一个对象</span><br><span class=\"line\">\t\t// 但是呢，在Spark中，编写不同类型的Spark应用程序，使用的SparkContext是不同的，如果使用scala，</span><br><span class=\"line\">\t\t\t// 使用的就是原生的SparkContext对象</span><br><span class=\"line\">\t\t\t// 但是如果使用Java，那么就是JavaSparkContext对象</span><br><span class=\"line\">\t\t\t// 如果是开发Spark SQL程序，那么就是SQLContext、HiveContext</span><br><span class=\"line\">\t\t\t// 如果是开发Spark Streaming程序，那么就是它独有的SparkContext</span><br><span class=\"line\">\t\t\t// 以此类推</span><br><span class=\"line\">\t\tJavaSparkContext sc = new JavaSparkContext(conf);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 第三步：要针对输入源（hdfs文件、本地文件，等等），创建一个初始的RDD</span><br><span class=\"line\">\t\t// 输入源中的数据会打散，分配到RDD的每个partition中，从而形成一个初始的分布式的数据集</span><br><span class=\"line\">\t\t// 我们这里呢，因为是本地测试，所以呢，就是针对本地文件</span><br><span class=\"line\">\t\t// SparkContext中，用于根据文件类型的输入源创建RDD的方法，叫做textFile()方法</span><br><span class=\"line\">\t\t// 在Java中，创建的普通RDD，都叫做JavaRDD</span><br><span class=\"line\">\t\t// 在这里呢，RDD中，有元素这种概念，如果是hdfs或者本地文件呢，创建的RDD，每一个元素就相当于</span><br><span class=\"line\">\t\t// 是文件里的一行</span><br><span class=\"line\">\t\tJavaRDD&lt;String&gt; lines = sc.textFile(&quot;spark.txt&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 第四步：对初始RDD进行transformation操作，也就是一些计算操作</span><br><span class=\"line\">\t\t// 通常操作会通过创建function，并配合RDD的map、flatMap等算子来执行</span><br><span class=\"line\">\t\t// function，通常，如果比较简单，则创建指定Function的匿名内部类</span><br><span class=\"line\">\t\t// 但是如果function比较复杂，则会单独创建一个类，作为实现这个function接口的类</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 先将每一行拆分成单个的单词</span><br><span class=\"line\">\t\t// FlatMapFunction，有两个泛型参数，分别代表了输入和输出类型</span><br><span class=\"line\">\t\t// 我们这里呢，输入肯定是String，因为是一行一行的文本，输出，其实也是String，因为是每一行的文本</span><br><span class=\"line\">\t\t// 这里先简要介绍flatMap算子的作用，其实就是，将RDD的一个元素，给拆分成一个或多个元素</span><br><span class=\"line\">\t\tJavaRDD&lt;String&gt; words = lines.flatMap(new FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Iterable&lt;String&gt; call(String line) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn Arrays.asList(line.split(&quot; &quot;));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 接着，需要将每一个单词，映射为(单词, 1)的这种格式</span><br><span class=\"line\">\t\t\t// 因为只有这样，后面才能根据单词作为key，来进行每个单词的出现次数的累加</span><br><span class=\"line\">\t\t// mapToPair，其实就是将每个元素，映射为一个(v1,v2)这样的Tuple2类型的元素</span><br><span class=\"line\">\t\t\t// 如果大家还记得scala里面讲的tuple，那么没错，这里的tuple2就是scala类型，包含了两个值</span><br><span class=\"line\">\t\t// mapToPair这个算子，要求的是与PairFunction配合使用，第一个泛型参数代表了输入类型</span><br><span class=\"line\">\t\t\t// 第二个和第三个泛型参数，代表的输出的Tuple2的第一个值和第二个值的类型</span><br><span class=\"line\">\t\t// JavaPairRDD的两个泛型参数，分别代表了tuple元素的第一个值和第二个值的类型</span><br><span class=\"line\">\t\tJavaPairRDD&lt;String, Integer&gt; pairs = words.mapToPair(new PairFunction&lt;String, String, Integer&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Tuple2&lt;String, Integer&gt; call(String word) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn new Tuple2&lt;String, Integer&gt;(word, 1);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 接着，需要以单词作为key，统计每个单词出现的次数</span><br><span class=\"line\">\t\t// 这里要使用reduceByKey这个算子，对每个key对应的value，都进行reduce操作</span><br><span class=\"line\">\t\t// 比如JavaPairRDD中有几个元素，分别为(hello, 1) (hello, 1) (hello, 1) (world, 1)</span><br><span class=\"line\">\t\t// reduce操作，相当于是把第一个值和第二个值进行计算，然后再将结果与第三个值进行计算</span><br><span class=\"line\">\t\t// 比如这里的hello，那么就相当于是，首先是1 + 1 = 2，然后再将2 + 1 = 3</span><br><span class=\"line\">\t\t// 最后返回的JavaPairRDD中的元素，也是tuple，但是第一个值就是每个key，第二个值就是key的value</span><br><span class=\"line\">\t\t// reduce之后的结果，相当于就是每个单词出现的次数</span><br><span class=\"line\">\t\tJavaPairRDD&lt;String, Integer&gt; wordCounts = pairs.reduceByKey(new Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Integer call(Integer v1, Integer v2) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn v1 + v2;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 到这里为止，我们通过几个Spark算子操作，已经统计出了单词的次数</span><br><span class=\"line\">\t\t// 但是，之前我们使用的flatMap、mapToPair、reduceByKey这种操作，都叫做transformation操作</span><br><span class=\"line\">\t\t// 一个Spark应用中，光是有transformation操作，是不行的，是不会执行的，必须要有一种叫做action</span><br><span class=\"line\">\t\t// 接着，最后，可以使用一种叫做action操作的，比如说，foreach，来触发程序的执行</span><br><span class=\"line\">\t\twordCounts.foreach(new VoidFunction&lt;Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void call(Tuple2&lt;String, Integer&gt; wordCount) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(wordCount._1 + &quot; appeared &quot; + wordCount._2 + &quot; times.&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tsc.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Hadoop appeared 1 times.</span><br><span class=\"line\">processing. appeared 1 times.</span><br><span class=\"line\">Spark appeared 6 times.</span><br><span class=\"line\">it appeared 2 times.</span><br><span class=\"line\">parallel appeared 1 times.</span><br><span class=\"line\">its appeared 1 times.</span><br><span class=\"line\">operators appeared 1 times.</span><br><span class=\"line\">YARN, appeared 1 times.</span><br><span class=\"line\">engine. appeared 1 times.</span><br><span class=\"line\">Runs appeared 1 times.</span><br><span class=\"line\">standalone appeared 1 times.</span><br><span class=\"line\">optimizer, appeared 1 times.</span><br><span class=\"line\">shells. appeared 1 times.</span><br><span class=\"line\">complex appeared 1 times.</span><br><span class=\"line\">state-of-the-art appeared 1 times.</span><br><span class=\"line\">learning, appeared 1 times.</span><br><span class=\"line\">Use appeared 1 times.</span><br><span class=\"line\">applications appeared 1 times.</span><br><span class=\"line\">over appeared 1 times.</span><br><span class=\"line\">streaming, appeared 1 times.</span><br><span class=\"line\">easy appeared 1 times.</span><br><span class=\"line\">for appeared 3 times.</span><br><span class=\"line\">faster. appeared 1 times.</span><br><span class=\"line\">make appeared 1 times.</span><br><span class=\"line\">engine appeared 1 times.</span><br><span class=\"line\">these appeared 1 times.</span><br><span class=\"line\">performance appeared 1 times.</span><br><span class=\"line\">the appeared 3 times.</span><br><span class=\"line\">application. appeared 1 times.</span><br><span class=\"line\">SQL. appeared 1 times.</span><br><span class=\"line\">DataFrames, appeared 1 times.</span><br><span class=\"line\">Mesos, appeared 2 times.</span><br><span class=\"line\">R, appeared 2 times.</span><br><span class=\"line\">can appeared 4 times.</span><br><span class=\"line\">HDFS, appeared 1 times.</span><br><span class=\"line\">build appeared 1 times.</span><br><span class=\"line\">Cassandra, appeared 1 times.</span><br><span class=\"line\">achieves appeared 1 times.</span><br><span class=\"line\">Apache appeared 6 times.</span><br><span class=\"line\">including appeared 1 times.</span><br><span class=\"line\">large-scale appeared 1 times.</span><br><span class=\"line\">Kubernetes, appeared 1 times.</span><br><span class=\"line\">sources. appeared 2 times.</span><br><span class=\"line\">analytics. appeared 1 times.</span><br><span class=\"line\">libraries appeared 2 times.</span><br><span class=\"line\">Combine appeared 1 times.</span><br><span class=\"line\">query appeared 1 times.</span><br><span class=\"line\">batch appeared 1 times.</span><br><span class=\"line\">It appeared 1 times.</span><br><span class=\"line\">scheduler, appeared 1 times.</span><br><span class=\"line\">both appeared 1 times.</span><br><span class=\"line\">streaming appeared 1 times.</span><br><span class=\"line\">Access appeared 1 times.</span><br><span class=\"line\">machine appeared 1 times.</span><br><span class=\"line\">Everywhere appeared 1 times.</span><br><span class=\"line\">Generality appeared 1 times.</span><br><span class=\"line\">stack appeared 1 times.</span><br><span class=\"line\">And appeared 1 times.</span><br><span class=\"line\">high appeared 1 times.</span><br><span class=\"line\">Speed appeared 1 times.</span><br><span class=\"line\">is appeared 1 times.</span><br><span class=\"line\">80 appeared 1 times.</span><br><span class=\"line\">run appeared 1 times.</span><br><span class=\"line\">seamlessly appeared 1 times.</span><br><span class=\"line\">Kubernetes. appeared 1 times.</span><br><span class=\"line\">Spark™ appeared 1 times.</span><br><span class=\"line\">runs appeared 1 times.</span><br><span class=\"line\">same appeared 1 times.</span><br><span class=\"line\">You appeared 2 times.</span><br><span class=\"line\">on appeared 5 times.</span><br><span class=\"line\">interactively appeared 1 times.</span><br><span class=\"line\">Ease appeared 1 times.</span><br><span class=\"line\">data appeared 4 times.</span><br><span class=\"line\">apps. appeared 1 times.</span><br><span class=\"line\">offers appeared 1 times.</span><br><span class=\"line\">in appeared 4 times.</span><br><span class=\"line\">using appeared 2 times.</span><br><span class=\"line\">DAG appeared 1 times.</span><br><span class=\"line\">Alluxio, appeared 1 times.</span><br><span class=\"line\">diverse appeared 1 times.</span><br><span class=\"line\">100x appeared 1 times.</span><br><span class=\"line\">execution appeared 1 times.</span><br><span class=\"line\">hundreds appeared 1 times.</span><br><span class=\"line\">Python, appeared 2 times.</span><br><span class=\"line\">from appeared 1 times.</span><br><span class=\"line\">other appeared 1 times.</span><br><span class=\"line\">standalone, appeared 1 times.</span><br><span class=\"line\">use appeared 1 times.</span><br><span class=\"line\">physical appeared 1 times.</span><br><span class=\"line\">workloads appeared 1 times.</span><br><span class=\"line\">Run appeared 1 times.</span><br><span class=\"line\">mode, appeared 1 times.</span><br><span class=\"line\">EC2, appeared 1 times.</span><br><span class=\"line\">you appeared 1 times.</span><br><span class=\"line\">that appeared 1 times.</span><br><span class=\"line\">or appeared 2 times.</span><br><span class=\"line\">a appeared 5 times.</span><br><span class=\"line\">data, appeared 1 times.</span><br><span class=\"line\">high-level appeared 1 times.</span><br><span class=\"line\">Java, appeared 1 times.</span><br><span class=\"line\">SQL appeared 2 times.</span><br><span class=\"line\">Hive, appeared 1 times.</span><br><span class=\"line\">Hadoop, appeared 1 times.</span><br><span class=\"line\">to appeared 1 times.</span><br><span class=\"line\"> appeared 9 times.</span><br><span class=\"line\">analytics appeared 1 times.</span><br><span class=\"line\">GraphX, appeared 1 times.</span><br><span class=\"line\">Write appeared 1 times.</span><br><span class=\"line\">of appeared 3 times.</span><br><span class=\"line\">cluster appeared 1 times.</span><br><span class=\"line\">access appeared 1 times.</span><br><span class=\"line\">MLlib appeared 1 times.</span><br><span class=\"line\">quickly appeared 1 times.</span><br><span class=\"line\">Scala, appeared 2 times.</span><br><span class=\"line\">HBase, appeared 1 times.</span><br><span class=\"line\">and appeared 8 times.</span><br><span class=\"line\">unified appeared 1 times.</span><br><span class=\"line\">SQL, appeared 1 times.</span><br><span class=\"line\">combine appeared 1 times.</span><br><span class=\"line\">Streaming. appeared 1 times.</span><br><span class=\"line\">powers appeared 1 times.</span><br><span class=\"line\">cloud. appeared 1 times.</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n<h3 id=\"spark-submit提交到spark集群进行执行\"><a href=\"#spark-submit提交到spark集群进行执行\" class=\"headerlink\" title=\"spark-submit提交到spark集群进行执行\"></a>spark-submit提交到spark集群进行执行</h3><p>编写WordCountCluster.java</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: WordCountCluster.java</span><br><span class=\"line\">package cn.spark.study.core;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.spark.SparkConf;</span><br><span class=\"line\">import org.apache.spark.api.java.JavaPairRDD;</span><br><span class=\"line\">import org.apache.spark.api.java.JavaRDD;</span><br><span class=\"line\">import org.apache.spark.api.java.JavaSparkContext;</span><br><span class=\"line\">import org.apache.spark.api.java.function.FlatMapFunction;</span><br><span class=\"line\">import org.apache.spark.api.java.function.Function2;</span><br><span class=\"line\">import org.apache.spark.api.java.function.PairFunction;</span><br><span class=\"line\">import org.apache.spark.api.java.function.VoidFunction;</span><br><span class=\"line\"></span><br><span class=\"line\">import scala.Tuple2;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 将java开发的wordcount程序部署到spark集群上运行</span><br><span class=\"line\"> * @author xdx</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class WordCountCluster &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t// 如果要在spark集群上运行，需要修改的，只有两个地方</span><br><span class=\"line\">\t\t// 第一，将SparkConf的setMaster()方法给删掉，默认它自己会去连接</span><br><span class=\"line\">\t\t// 第二，我们针对的不是本地文件了，修改为hadoop hdfs上的真正的存储大数据的文件</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t// 实际执行步骤：</span><br><span class=\"line\">\t\t// 1、将spark.txt文件上传到hdfs上去</span><br><span class=\"line\">\t\t// 2、使用我们最早在pom.xml里配置的maven插件，对spark工程进行打包</span><br><span class=\"line\">\t\t// 3、将打包后的spark工程jar包，上传到机器上执行</span><br><span class=\"line\">\t\t// 4、编写spark-submit脚本</span><br><span class=\"line\">\t\t// 5、执行spark-submit脚本，提交spark应用到集群执行</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSparkConf conf = new SparkConf()</span><br><span class=\"line\">\t\t\t\t.setAppName(&quot;WordCountCluster&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJavaSparkContext sc = new JavaSparkContext(conf);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJavaRDD&lt;String&gt; lines = sc.textFile(&quot;hdfs://spark1:9000/spark.txt&quot;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJavaRDD&lt;String&gt; words = lines.flatMap(new FlatMapFunction&lt;String, String&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Iterable&lt;String&gt; call(String line) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn Arrays.asList(line.split(&quot; &quot;));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJavaPairRDD&lt;String, Integer&gt; pairs = words.mapToPair(new PairFunction&lt;String, String, Integer&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Tuple2&lt;String, Integer&gt; call(String word) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn new Tuple2&lt;String, Integer&gt;(word, 1);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJavaPairRDD&lt;String, Integer&gt; wordCounts = pairs.reduceByKey(new Function2&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override </span><br><span class=\"line\">\t\t\tpublic Integer call(Integer v1, Integer v2) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn v1 + v2;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\twordCounts.foreach(new VoidFunction&lt;Tuple2&lt;String, Integer&gt;&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionID = 1L;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void call(Tuple2&lt;String, Integer&gt; wordCount) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(wordCount._1 + &quot; appeared &quot; + wordCount._2 + &quot; times.&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tsc.close();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<p>将spark.txt上传到spark1，将spark.txt上传到hdfs<br>将spark-study-java打包，Run As-&gt;Run Configurations-&gt;Maven Build-&gt;New-&gt;spark-study-java-&gt;Run<br>将&#x2F;spark-study-java&#x2F;target&#x2F;spark-study-java-0.0.1-SNAPSHOT-jar-with-dependencies.jar上传到spark<br>编写wordcount.sh，使用spark-submit进行执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: wordcount.sh</span><br><span class=\"line\">/usr/local/spark/bin/spark-submit \\</span><br><span class=\"line\">--class cn.spark.sparktest.core.WordCountCluster \\</span><br><span class=\"line\">--num-executors 3 \\</span><br><span class=\"line\">--driver-memory 100m \\</span><br><span class=\"line\">--executor-memory 100m \\</span><br><span class=\"line\">--executor-cores 3 \\</span><br><span class=\"line\">/root/Workspace/SparkProjects/wordcount/SparkTest-0.0.1-SNAPSHOT-jar-with-dependencies.jar \\</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Scala开发wordcount程序\"><a href=\"#Scala开发wordcount程序\" class=\"headerlink\" title=\"Scala开发wordcount程序\"></a>Scala开发wordcount程序</h3><p>scala ide for eclipse download<br>在Java Build Path中，添加spark依赖包(spark-assembly-1.3.0-hadoop2.4.0.jar)，如果与scala ide for eclipse原生的scala版本发生冲突，则移除原生的scala，重新配置scala compiler</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: WordCount.scala</span><br><span class=\"line\">package cn.spark.study.core</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.spark.SparkConf</span><br><span class=\"line\">import org.apache.spark.SparkContext</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author xdx</span><br><span class=\"line\"> */</span><br><span class=\"line\">object WordCount &#123;</span><br><span class=\"line\">  def main(args: Array[String]) &#123;</span><br><span class=\"line\">    val conf = new SparkConf()</span><br><span class=\"line\">      .setAppName(&quot;WordCount&quot;)</span><br><span class=\"line\">      .setMaster(&quot;local&quot;)</span><br><span class=\"line\">    val sc = new SparkContext(conf)</span><br><span class=\"line\">    val lines = sc.textFile(&quot;spark.txt&quot;, 1)</span><br><span class=\"line\">    val words = lines.flatMap &#123; line =&gt; line.split(&quot; &quot;) &#125;</span><br><span class=\"line\">    val pairs = words.map &#123; word =&gt; (word, 1) &#125;</span><br><span class=\"line\">    val wordCounts = pairs.reduceByKey &#123; _ + _ &#125;</span><br><span class=\"line\">    wordCounts.foreach(wordCount =&gt; println(wordCount._1 + &quot; appeared &quot; + wordCount._2 + &quot; times.&quot;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">(MLlib), appeared 1 times.</span><br><span class=\"line\">For appeared 2 times.</span><br><span class=\"line\">Product appeared 1 times.</span><br><span class=\"line\">it appeared 3 times.</span><br><span class=\"line\">operators appeared 1 times.</span><br><span class=\"line\">sits appeared 1 times.</span><br><span class=\"line\">Hadoop��s appeared 1 times.</span><br><span class=\"line\">have appeared 3 times.</span><br><span class=\"line\">tweet appeared 1 times.</span><br><span class=\"line\">stack. appeared 1 times.</span><br><span class=\"line\">modification appeared 1 times.</span><br><span class=\"line\">conference. appeared 1 times.</span><br><span class=\"line\">we appeared 2 times.</span><br><span class=\"line\">requiring appeared 1 times.</span><br><span class=\"line\">This appeared 1 times.</span><br><span class=\"line\">simple appeared 1 times.</span><br><span class=\"line\">manager. appeared 1 times.</span><br><span class=\"line\">software appeared 2 times.</span><br><span class=\"line\">any appeared 1 times.</span><br><span class=\"line\">make appeared 1 times.</span><br><span class=\"line\">implementation appeared 1 times.</span><br><span class=\"line\">seconds appeared 1 times.</span><br><span class=\"line\">&amp; appeared 1 times.</span><br><span class=\"line\">out appeared 1 times.</span><br><span class=\"line\">Data appeared 1 times.</span><br><span class=\"line\">engine appeared 1 times.</span><br><span class=\"line\">directions appeared 1 times.</span><br><span class=\"line\">month appeared 1 times.</span><br><span class=\"line\">the appeared 7 times.</span><br><span class=\"line\">technology appeared 3 times.</span><br><span class=\"line\">2. appeared 1 times.</span><br><span class=\"line\">Alpine, appeared 1 times.</span><br><span class=\"line\">We��d appeared 1 times.</span><br><span class=\"line\">box. appeared 1 times.</span><br><span class=\"line\">100X appeared 1 times.</span><br><span class=\"line\">most appeared 1 times.</span><br><span class=\"line\">build appeared 1 times.</span><br><span class=\"line\">love appeared 1 times.</span><br><span class=\"line\">be appeared 1 times.</span><br><span class=\"line\">��a appeared 1 times.</span><br><span class=\"line\">Apache appeared 1 times.</span><br><span class=\"line\">At appeared 1 times.</span><br><span class=\"line\">Alpine appeared 1 times.</span><br><span class=\"line\">our appeared 5 times.</span><br><span class=\"line\">including appeared 1 times.</span><br><span class=\"line\">as appeared 1 times.</span><br><span class=\"line\">us? appeared 1 times.</span><br><span class=\"line\">dead appeared 1 times.</span><br><span class=\"line\">iterative appeared 1 times.</span><br><span class=\"line\">leverage appeared 2 times.</span><br><span class=\"line\">Want appeared 1 times.</span><br><span class=\"line\">File appeared 1 times.</span><br><span class=\"line\">programming appeared 1 times.</span><br><span class=\"line\">account appeared 1 times.</span><br><span class=\"line\">recently appeared 1 times.</span><br><span class=\"line\">engines appeared 1 times.</span><br><span class=\"line\">is appeared 2 times.</span><br><span class=\"line\">Horwitz appeared 1 times.</span><br><span class=\"line\">on appeared 3 times.</span><br><span class=\"line\">features appeared 1 times.</span><br><span class=\"line\">pre-installation appeared 1 times.</span><br><span class=\"line\">speed appeared 1 times.</span><br><span class=\"line\">at appeared 3 times.</span><br><span class=\"line\">using appeared 1 times.</span><br><span class=\"line\">convenience. appeared 1 times.</span><br><span class=\"line\">top appeared 1 times.</span><br><span class=\"line\">integrates appeared 1 times.</span><br><span class=\"line\">meaning appeared 1 times.</span><br><span class=\"line\">customers appeared 1 times.</span><br><span class=\"line\">new appeared 3 times.</span><br><span class=\"line\">We appeared 2 times.</span><br><span class=\"line\">Python. appeared 1 times.</span><br><span class=\"line\">Random appeared 1 times.</span><br><span class=\"line\">launch appeared 1 times.</span><br><span class=\"line\">processing.�� appeared 1 times.</span><br><span class=\"line\">set appeared 1 times.</span><br><span class=\"line\">has appeared 4 times.</span><br><span class=\"line\">NextGen) appeared 1 times.</span><br><span class=\"line\">world appeared 1 times.</span><br><span class=\"line\">Learning appeared 1 times.</span><br><span class=\"line\">seamless appeared 1 times.</span><br><span class=\"line\">Director appeared 1 times.</span><br><span class=\"line\">generality appeared 1 times.</span><br><span class=\"line\">or appeared 4 times.</span><br><span class=\"line\">Yarn appeared 1 times.</span><br><span class=\"line\">Java, appeared 1 times.</span><br><span class=\"line\">appointment appeared 1 times.</span><br><span class=\"line\">As appeared 1 times.</span><br><span class=\"line\">YARN appeared 1 times.</span><br><span class=\"line\">Machine appeared 1 times.</span><br><span class=\"line\">company, appeared 1 times.</span><br><span class=\"line\">installed appeared 1 times.</span><br><span class=\"line\">50 appeared 2 times.</span><br><span class=\"line\">see appeared 1 times.</span><br><span class=\"line\">of appeared 10 times.</span><br><span class=\"line\">cluster appeared 4 times.</span><br><span class=\"line\">three appeared 1 times.</span><br><span class=\"line\">analytic appeared 1 times.</span><br><span class=\"line\">Or appeared 1 times.</span><br><span class=\"line\">Forests, appeared 1 times.</span><br><span class=\"line\">rows appeared 1 times.</span><br><span class=\"line\">millions appeared 1 times.</span><br><span class=\"line\">rows. appeared 1 times.</span><br><span class=\"line\">Hadoop appeared 4 times.</span><br><span class=\"line\">characterized appeared 1 times.</span><br><span class=\"line\">Spark appeared 10 times.</span><br><span class=\"line\">integration appeared 1 times.</span><br><span class=\"line\">job appeared 1 times.</span><br><span class=\"line\">native appeared 1 times.</span><br><span class=\"line\">greatest appeared 1 times.</span><br><span class=\"line\">general appeared 1 times.</span><br><span class=\"line\">Million appeared 1 times.</span><br><span class=\"line\">extensive appeared 1 times.</span><br><span class=\"line\">here appeared 1 times.</span><br><span class=\"line\">big appeared 1 times.</span><br><span class=\"line\">Joel appeared 1 times.</span><br><span class=\"line\">1. appeared 1 times.</span><br><span class=\"line\">send appeared 1 times.</span><br><span class=\"line\">(HDFS) appeared 1 times.</span><br><span class=\"line\">3. appeared 1 times.</span><br><span class=\"line\">without appeared 2 times.</span><br><span class=\"line\">for appeared 3 times.</span><br><span class=\"line\">models. appeared 1 times.</span><br><span class=\"line\">require appeared 1 times.</span><br><span class=\"line\">just appeared 1 times.</span><br><span class=\"line\">@JSHorwitz. appeared 1 times.</span><br><span class=\"line\">Labs appeared 1 times.</span><br><span class=\"line\">latest appeared 2 times.</span><br><span class=\"line\">regression, appeared 1 times.</span><br><span class=\"line\">node appeared 1 times.</span><br><span class=\"line\">coming appeared 1 times.</span><br><span class=\"line\">your appeared 1 times.</span><br><span class=\"line\">up appeared 2 times.</span><br><span class=\"line\">analysis appeared 1 times.</span><br><span class=\"line\">20 appeared 1 times.</span><br><span class=\"line\">advanced appeared 2 times.</span><br><span class=\"line\">Distributed appeared 1 times.</span><br><span class=\"line\">no appeared 1 times.</span><br><span class=\"line\">large-scale appeared 1 times.</span><br><span class=\"line\">since appeared 1 times.</span><br><span class=\"line\">started appeared 1 times.</span><br><span class=\"line\">empowers appeared 1 times.</span><br><span class=\"line\">transformation, appeared 1 times.</span><br><span class=\"line\">by appeared 1 times.</span><br><span class=\"line\">like appeared 1 times.</span><br><span class=\"line\">compatibility appeared 1 times.</span><br><span class=\"line\">2005. appeared 1 times.</span><br><span class=\"line\">both appeared 1 times.</span><br><span class=\"line\">an appeared 1 times.</span><br><span class=\"line\">streaming appeared 1 times.</span><br><span class=\"line\">(Shark), appeared 1 times.</span><br><span class=\"line\">analyzed appeared 1 times.</span><br><span class=\"line\">Streaming) appeared 1 times.</span><br><span class=\"line\">made appeared 1 times.</span><br><span class=\"line\">nicely appeared 1 times.</span><br><span class=\"line\">configuration. appeared 1 times.</span><br><span class=\"line\">with appeared 3 times.</span><br><span class=\"line\">algorithms, appeared 1 times.</span><br><span class=\"line\">meet appeared 1 times.</span><br><span class=\"line\">data appeared 4 times.</span><br><span class=\"line\">interesting appeared 1 times.</span><br><span class=\"line\">in appeared 5 times.</span><br><span class=\"line\">logistic appeared 1 times.</span><br><span class=\"line\">GigaOM appeared 1 times.</span><br><span class=\"line\">Summit. appeared 1 times.</span><br><span class=\"line\">increase appeared 1 times.</span><br><span class=\"line\">hundreds appeared 1 times.</span><br><span class=\"line\">support appeared 1 times.</span><br><span class=\"line\">scales appeared 1 times.</span><br><span class=\"line\">Click appeared 1 times.</span><br><span class=\"line\">building appeared 1 times.</span><br><span class=\"line\">other appeared 1 times.</span><br><span class=\"line\">course appeared 1 times.</span><br><span class=\"line\">exploration, appeared 1 times.</span><br><span class=\"line\">rock appeared 1 times.</span><br><span class=\"line\">key appeared 1 times.</span><br><span class=\"line\">you appeared 1 times.</span><br><span class=\"line\">hardware appeared 1 times.</span><br><span class=\"line\">that appeared 4 times.</span><br><span class=\"line\">a appeared 3 times.</span><br><span class=\"line\">fast appeared 1 times.</span><br><span class=\"line\">their appeared 1 times.</span><br><span class=\"line\">example, appeared 1 times.</span><br><span class=\"line\">last appeared 1 times.</span><br><span class=\"line\">SQL appeared 1 times.</span><br><span class=\"line\">demonstrated appeared 1 times.</span><br><span class=\"line\">will appeared 1 times.</span><br><span class=\"line\">to appeared 10 times.</span><br><span class=\"line\">get appeared 1 times.</span><br><span class=\"line\">platform appeared 1 times.</span><br><span class=\"line\"> appeared 7 times.</span><br><span class=\"line\">languages appeared 1 times.</span><br><span class=\"line\">list appeared 1 times.</span><br><span class=\"line\">there! appeared 1 times.</span><br><span class=\"line\">(Spark appeared 1 times.</span><br><span class=\"line\">Scala, appeared 1 times.</span><br><span class=\"line\">and appeared 7 times.</span><br><span class=\"line\">Marketing appeared 1 times.</span><br><span class=\"line\">(Hadoop appeared 1 times.</span><br><span class=\"line\">certified appeared 1 times.</span><br><span class=\"line\">additional appeared 1 times.</span><br><span class=\"line\">System appeared 1 times.</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>"},{"title":"Spark运行环境搭建","date":"2019-09-13T09:25:44.000Z","_content":"Spark运行环境搭建\n\n## Mac安装VirtualBox\n\n* [VirtualBox](https://www.virtualbox.org/wiki/Downloads)\n\n## Mac安装SecureCRT\n\n* [SecureCRT](https://www.vandyke.com/products/securecrt/)\n\n## VirtualBox安装CentOS7-Minimal\n\n* [CentOS7](http://vault.centos.org/)\n* VirtualBox -> 设置 -> 存储 -> 盘片\n* VirtualBox -> 设置 -> 网络 -> 桥接网卡\n\n## CentOS7静态IP设置\n\n* 动态IP设置\n```\nping www.baidu.com\n/* Output:\nping: www.baidu.com: Name or service not known\n*///:~\nvi /etc/sysconfig/network-scripts/ifcfg-enp0s3\n/* Input:\nONBOOT=yes\n*///:~\nservice network restart\nping www.baidu.com\n/* Output:\nPING www.a.shifen.com (182.61.200.7) 56(84) bytes of data.\n...\n*///:~\n```\n\n* 查看DNS\n```\nvi /etc/resolv.conf\n/* Output:\n211.100.225.34\n124.207.160.106\n*///:~\n```\n\n* 查看Mac局域网IP\n```\nifconfig\n/* Output:\n...\nen0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500\n        ether 88:e9:fe:53:af:ef \n        inet6 fe80::8c0:3e8a:b41a:98b9%en0 prefixlen 64 secured scopeid 0x6 \n        inet 192.168.1.101 netmask 0xffffff00 broadcast 192.168.1.255\n        nd6 options=201<PERFORMNUD,DAD>\n        media: autoselect\n        status: active\n...\n*///:~\n```\n\n* 静态IP设置\n```\nvi /etc/sysconfig/network-scripts/ifcfg-enp0s3\n/* Input:\nDEVICE=enp0s3\nTYPE=Ethernet\nONBOOT=yes\nBOOTPROTO=static\nIPADDR=192.168.1.108\nNETMASK=255.255.255.0\nGATEWAY=192.168.1.1\nDNS1=211.100.225.34\nDNS2.124.207.160.106\n*///:~\nservice network restart\nping www.baidu.com\n/* Output:\nPING www.a.shifen.com (182.61.200.7) 56(84) bytes of data.\n...\n*///:~\n```\n\n## VirtualBox生成备份\n\n* VirtualBox -> 生成 -> 备份\n\n## SecureCRT连接VirtualBoxCentOS7\n\n* SecureCRT -> Connect -> Quick Connect -> Hostname(192.168.1.108) -> Username(root) PublicKey -> Properties -> Use identity or certificate file(/Users/xdx/.ssh/id_rsa.pub)\n* SecureCRT -> Options -> Session Options -> Appearance -> Solarized Darcula -> Font\n\n## Mac终端文件夹颜色设置\n\n```\nvim ~/.bash_profile\n/* Input:\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\nexport CLICOLOR=1\nexport LSCOLORS=Exfxcxdxbxegedabagacad\nexport GREP_OPTIONS=\"--color=auto\"\n*///:~\nsource ~/.bash_profile\n```\n\n## VIM安装与配置\n\n* VIM安装\n```\nyum -y install vim\n```\n\n* VIM配置\n```\nvim ~/.vimrc\n/* Input:\nsyntax on\nset tabstop=4\nset shiftwidth=4\nset softtabstop=4\nset smarttab\nset expandtab\nset encoding=utf-8\n*///:~\nsource ~/.vimrc\n```\n\n## CentOS7关闭防火墙和SELinux\n\n* 关闭防火墙\n```\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\n```\n\n* 关闭SELinux\n```\nvim /etc/sysconfig/selinux\n/* Input:\nSELINUX=disabled\n*///:~\n```\n\n## 安装lrzsz\n\n```\nyum -y install lrzsz\n```\n\n## 安装JDK\n\n* [downloads](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\n\n* getconf LONG_BIT\n```\ngetconf LONG_BIT\n/* Output:\n64\n*///:~\n```\n\n* 安装JDK\n```\njdk-7u80-linux-x64.tar.gz\nrz -bye\nmkdir /usr/java\ntar -zxvf jdk-7u80-linux-x64.tar.gz -C /usr/java\nvim ~/.bash_profile\n/* Input:\n# JAVA\nexport JAVA_HOME=/usr/java/jdk1.7.0\nexport PATH=$PATH:$JAVA_HOME/bin\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n*///:~\nsource ~/.bash_profile\njava -version\n/* Output:\njava version \"1.7.0_80\"\nJava(TM) SE Runtime Environment (build 1.7.0_80-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)\n*///:~\n```\n\n## 安装Scala\n\n* [downloads](http://www.scala-lang.org/download/)\n\n```\nyum -y install wget\nwget http://downloads.typesafe.com/scala/2.11.5/scala-2.11.5.tgz\nmkdir /usr/local/scala\ntar -zxvf scala-2.11.5.tgz -C /usr/local/scala\nvim ~/.bash_profile\n/* Input:\n# SCALA\nexport SCALA_HOME=/usr/local/scala/scala-2.11.5\nexport PATH=$PATH:$SCALA_HOME/bin\n*///:~\nsource ~/.bash_profile\nscala -version\n/* Output:\nScala code runner version 2.11.5 -- Copyright 2002-2013, LAMP/EPFL\n*///:~\n```\n\n## 安装Spark\n\n* [downloads](http://spark.apache.org/downloads.html)\n\n```\nwget http://archive.apache.org/dist/spark/spark-1.2.0/spark-1.2.0-bin-hadoop1.tgz\nmkdir /usr/local/spark\ntar -zxvf spark-1.2.0-bin-hadoop1.tgz -C /usr/local/spark\nvim ~/.bash_profile\n/* Input:\n# SPARK\nexport SPARK_HOME=/usr/local/spark/spark-1.2.0-bin-hadoop1\nexport PATH=$PATH:$SPARK_HOME/bin\nexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib\n*///:~\nsource ~/.bash_profile\npyspark --master local[2]\n/* Output:\nPython 2.7.5 (default, Oct 30 2018, 23:45:53)\n...\n*///:~\n>>> exit()\ncd /usr/local/spark/spark-1.2.0-bin-hadoop1/conf/\ncp spark-env.sh.template spark-env.sh\nvim spark-env.sh\n/* Input:\nexport SPARK_MASTER_IP=127.0.0.1\nexport SPARK_LOCAL_IP=127.0.0.1\n*///:~\ncd ~\nspark-shell\n/* Output:\nSpark assembly has been built with Hive, including Datanucleus jars on classpath\n...\nscala> \n*///:~\nscala> :q\n```\n\n## WordCount\n\n```\ncd /usr/local/spark/spark-1.2.0-bin-hadoop1/bin\nspark-shell\nscala> val lines = sc.textFile(\"../README.md\", 2)\n/* Output:\n19/09/14 10:35:42 INFO MemoryStore: ensureFreeSpace(32768) called with curMem=0, maxMem=280248975\n19/09/14 10:35:42 INFO MemoryStore: Block broadcast_0 stored as values in memory (estimated size 32.0 KB, free 267.2 MB)\n19/09/14 10:35:42 INFO MemoryStore: ensureFreeSpace(4959) called with curMem=32768, maxMem=280248975\n19/09/14 10:35:42 INFO MemoryStore: Block broadcast_0_piece0 stored as bytes in memory (estimated size 4.8 KB, free 267.2 MB)\n19/09/14 10:35:42 INFO BlockManagerInfo: Added broadcast_0_piece0 in memory on localhost:42664 (size: 4.8 KB, free: 267.3 MB)\n19/09/14 10:35:42 INFO BlockManagerMaster: Updated info of block broadcast_0_piece0\n19/09/14 10:35:42 INFO SparkContext: Created broadcast 0 from textFile at <console>:12\nlines: org.apache.spark.rdd.RDD[String] = ../README.md MappedRDD[1] at textFile at <console>:12\n*///:~\nscala> val words = lines.flatMap(line => line.split(\" \"))\n/* Output:\nwords: org.apache.spark.rdd.RDD[String] = FlatMappedRDD[2] at flatMap at <console>:14\n*///:~\nscala> val ones = words.map(w => (w, 1))\n/* Output:\nones: org.apache.spark.rdd.RDD[(String, Int)] = MappedRDD[3] at map at <console>:16\n*///:~\nscala> val counts = ones.reduceByKey(_ + _)\n/* Output:\n19/09/14 10:41:24 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n19/09/14 10:41:24 WARN LoadSnappy: Snappy native library not loaded\n19/09/14 10:41:24 INFO FileInputFormat: Total input paths to process : 1\ncounts: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[4] at reduceByKey at <console>:18\n*///:~\nscala> counts.foreach(println)\n/* Output:\n...\n(For,2)\n(processing.,1)\n(Spark,15)\n(particular,3)\n(Programs,1)\n(The,1)\n...\n*///:~\nscala> :q\n```","source":"_posts/Spark运行环境搭建.md","raw":"---\ntitle: Spark运行环境搭建\ndate: 2019-09-13 17:25:44\ntags: Spark\ncategories: Spark\n---\nSpark运行环境搭建\n\n## Mac安装VirtualBox\n\n* [VirtualBox](https://www.virtualbox.org/wiki/Downloads)\n\n## Mac安装SecureCRT\n\n* [SecureCRT](https://www.vandyke.com/products/securecrt/)\n\n## VirtualBox安装CentOS7-Minimal\n\n* [CentOS7](http://vault.centos.org/)\n* VirtualBox -> 设置 -> 存储 -> 盘片\n* VirtualBox -> 设置 -> 网络 -> 桥接网卡\n\n## CentOS7静态IP设置\n\n* 动态IP设置\n```\nping www.baidu.com\n/* Output:\nping: www.baidu.com: Name or service not known\n*///:~\nvi /etc/sysconfig/network-scripts/ifcfg-enp0s3\n/* Input:\nONBOOT=yes\n*///:~\nservice network restart\nping www.baidu.com\n/* Output:\nPING www.a.shifen.com (182.61.200.7) 56(84) bytes of data.\n...\n*///:~\n```\n\n* 查看DNS\n```\nvi /etc/resolv.conf\n/* Output:\n211.100.225.34\n124.207.160.106\n*///:~\n```\n\n* 查看Mac局域网IP\n```\nifconfig\n/* Output:\n...\nen0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500\n        ether 88:e9:fe:53:af:ef \n        inet6 fe80::8c0:3e8a:b41a:98b9%en0 prefixlen 64 secured scopeid 0x6 \n        inet 192.168.1.101 netmask 0xffffff00 broadcast 192.168.1.255\n        nd6 options=201<PERFORMNUD,DAD>\n        media: autoselect\n        status: active\n...\n*///:~\n```\n\n* 静态IP设置\n```\nvi /etc/sysconfig/network-scripts/ifcfg-enp0s3\n/* Input:\nDEVICE=enp0s3\nTYPE=Ethernet\nONBOOT=yes\nBOOTPROTO=static\nIPADDR=192.168.1.108\nNETMASK=255.255.255.0\nGATEWAY=192.168.1.1\nDNS1=211.100.225.34\nDNS2.124.207.160.106\n*///:~\nservice network restart\nping www.baidu.com\n/* Output:\nPING www.a.shifen.com (182.61.200.7) 56(84) bytes of data.\n...\n*///:~\n```\n\n## VirtualBox生成备份\n\n* VirtualBox -> 生成 -> 备份\n\n## SecureCRT连接VirtualBoxCentOS7\n\n* SecureCRT -> Connect -> Quick Connect -> Hostname(192.168.1.108) -> Username(root) PublicKey -> Properties -> Use identity or certificate file(/Users/xdx/.ssh/id_rsa.pub)\n* SecureCRT -> Options -> Session Options -> Appearance -> Solarized Darcula -> Font\n\n## Mac终端文件夹颜色设置\n\n```\nvim ~/.bash_profile\n/* Input:\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\nexport CLICOLOR=1\nexport LSCOLORS=Exfxcxdxbxegedabagacad\nexport GREP_OPTIONS=\"--color=auto\"\n*///:~\nsource ~/.bash_profile\n```\n\n## VIM安装与配置\n\n* VIM安装\n```\nyum -y install vim\n```\n\n* VIM配置\n```\nvim ~/.vimrc\n/* Input:\nsyntax on\nset tabstop=4\nset shiftwidth=4\nset softtabstop=4\nset smarttab\nset expandtab\nset encoding=utf-8\n*///:~\nsource ~/.vimrc\n```\n\n## CentOS7关闭防火墙和SELinux\n\n* 关闭防火墙\n```\nsystemctl stop firewalld.service\nsystemctl disable firewalld.service\n```\n\n* 关闭SELinux\n```\nvim /etc/sysconfig/selinux\n/* Input:\nSELINUX=disabled\n*///:~\n```\n\n## 安装lrzsz\n\n```\nyum -y install lrzsz\n```\n\n## 安装JDK\n\n* [downloads](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\n\n* getconf LONG_BIT\n```\ngetconf LONG_BIT\n/* Output:\n64\n*///:~\n```\n\n* 安装JDK\n```\njdk-7u80-linux-x64.tar.gz\nrz -bye\nmkdir /usr/java\ntar -zxvf jdk-7u80-linux-x64.tar.gz -C /usr/java\nvim ~/.bash_profile\n/* Input:\n# JAVA\nexport JAVA_HOME=/usr/java/jdk1.7.0\nexport PATH=$PATH:$JAVA_HOME/bin\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n*///:~\nsource ~/.bash_profile\njava -version\n/* Output:\njava version \"1.7.0_80\"\nJava(TM) SE Runtime Environment (build 1.7.0_80-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)\n*///:~\n```\n\n## 安装Scala\n\n* [downloads](http://www.scala-lang.org/download/)\n\n```\nyum -y install wget\nwget http://downloads.typesafe.com/scala/2.11.5/scala-2.11.5.tgz\nmkdir /usr/local/scala\ntar -zxvf scala-2.11.5.tgz -C /usr/local/scala\nvim ~/.bash_profile\n/* Input:\n# SCALA\nexport SCALA_HOME=/usr/local/scala/scala-2.11.5\nexport PATH=$PATH:$SCALA_HOME/bin\n*///:~\nsource ~/.bash_profile\nscala -version\n/* Output:\nScala code runner version 2.11.5 -- Copyright 2002-2013, LAMP/EPFL\n*///:~\n```\n\n## 安装Spark\n\n* [downloads](http://spark.apache.org/downloads.html)\n\n```\nwget http://archive.apache.org/dist/spark/spark-1.2.0/spark-1.2.0-bin-hadoop1.tgz\nmkdir /usr/local/spark\ntar -zxvf spark-1.2.0-bin-hadoop1.tgz -C /usr/local/spark\nvim ~/.bash_profile\n/* Input:\n# SPARK\nexport SPARK_HOME=/usr/local/spark/spark-1.2.0-bin-hadoop1\nexport PATH=$PATH:$SPARK_HOME/bin\nexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib\n*///:~\nsource ~/.bash_profile\npyspark --master local[2]\n/* Output:\nPython 2.7.5 (default, Oct 30 2018, 23:45:53)\n...\n*///:~\n>>> exit()\ncd /usr/local/spark/spark-1.2.0-bin-hadoop1/conf/\ncp spark-env.sh.template spark-env.sh\nvim spark-env.sh\n/* Input:\nexport SPARK_MASTER_IP=127.0.0.1\nexport SPARK_LOCAL_IP=127.0.0.1\n*///:~\ncd ~\nspark-shell\n/* Output:\nSpark assembly has been built with Hive, including Datanucleus jars on classpath\n...\nscala> \n*///:~\nscala> :q\n```\n\n## WordCount\n\n```\ncd /usr/local/spark/spark-1.2.0-bin-hadoop1/bin\nspark-shell\nscala> val lines = sc.textFile(\"../README.md\", 2)\n/* Output:\n19/09/14 10:35:42 INFO MemoryStore: ensureFreeSpace(32768) called with curMem=0, maxMem=280248975\n19/09/14 10:35:42 INFO MemoryStore: Block broadcast_0 stored as values in memory (estimated size 32.0 KB, free 267.2 MB)\n19/09/14 10:35:42 INFO MemoryStore: ensureFreeSpace(4959) called with curMem=32768, maxMem=280248975\n19/09/14 10:35:42 INFO MemoryStore: Block broadcast_0_piece0 stored as bytes in memory (estimated size 4.8 KB, free 267.2 MB)\n19/09/14 10:35:42 INFO BlockManagerInfo: Added broadcast_0_piece0 in memory on localhost:42664 (size: 4.8 KB, free: 267.3 MB)\n19/09/14 10:35:42 INFO BlockManagerMaster: Updated info of block broadcast_0_piece0\n19/09/14 10:35:42 INFO SparkContext: Created broadcast 0 from textFile at <console>:12\nlines: org.apache.spark.rdd.RDD[String] = ../README.md MappedRDD[1] at textFile at <console>:12\n*///:~\nscala> val words = lines.flatMap(line => line.split(\" \"))\n/* Output:\nwords: org.apache.spark.rdd.RDD[String] = FlatMappedRDD[2] at flatMap at <console>:14\n*///:~\nscala> val ones = words.map(w => (w, 1))\n/* Output:\nones: org.apache.spark.rdd.RDD[(String, Int)] = MappedRDD[3] at map at <console>:16\n*///:~\nscala> val counts = ones.reduceByKey(_ + _)\n/* Output:\n19/09/14 10:41:24 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n19/09/14 10:41:24 WARN LoadSnappy: Snappy native library not loaded\n19/09/14 10:41:24 INFO FileInputFormat: Total input paths to process : 1\ncounts: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[4] at reduceByKey at <console>:18\n*///:~\nscala> counts.foreach(println)\n/* Output:\n...\n(For,2)\n(processing.,1)\n(Spark,15)\n(particular,3)\n(Programs,1)\n(The,1)\n...\n*///:~\nscala> :q\n```","slug":"Spark运行环境搭建","published":1,"updated":"2023-09-10T11:50:54.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln2n3nwi000iyuzqcpcw94lc","content":"<p>Spark运行环境搭建</p>\n<h2 id=\"Mac安装VirtualBox\"><a href=\"#Mac安装VirtualBox\" class=\"headerlink\" title=\"Mac安装VirtualBox\"></a>Mac安装VirtualBox</h2><ul>\n<li><a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a></li>\n</ul>\n<h2 id=\"Mac安装SecureCRT\"><a href=\"#Mac安装SecureCRT\" class=\"headerlink\" title=\"Mac安装SecureCRT\"></a>Mac安装SecureCRT</h2><ul>\n<li><a href=\"https://www.vandyke.com/products/securecrt/\">SecureCRT</a></li>\n</ul>\n<h2 id=\"VirtualBox安装CentOS7-Minimal\"><a href=\"#VirtualBox安装CentOS7-Minimal\" class=\"headerlink\" title=\"VirtualBox安装CentOS7-Minimal\"></a>VirtualBox安装CentOS7-Minimal</h2><ul>\n<li><a href=\"http://vault.centos.org/\">CentOS7</a></li>\n<li>VirtualBox -&gt; 设置 -&gt; 存储 -&gt; 盘片</li>\n<li>VirtualBox -&gt; 设置 -&gt; 网络 -&gt; 桥接网卡</li>\n</ul>\n<h2 id=\"CentOS7静态IP设置\"><a href=\"#CentOS7静态IP设置\" class=\"headerlink\" title=\"CentOS7静态IP设置\"></a>CentOS7静态IP设置</h2><ul>\n<li><p>动态IP设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping www.baidu.com</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">ping: www.baidu.com: Name or service not known</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">service network restart</span><br><span class=\"line\">ping www.baidu.com</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">PING www.a.shifen.com (182.61.200.7) 56(84) bytes of data.</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看DNS</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/resolv.conf</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">211.100.225.34</span><br><span class=\"line\">124.207.160.106</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看Mac局域网IP</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">...</span><br><span class=\"line\">en0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class=\"line\">        ether 88:e9:fe:53:af:ef </span><br><span class=\"line\">        inet6 fe80::8c0:3e8a:b41a:98b9%en0 prefixlen 64 secured scopeid 0x6 </span><br><span class=\"line\">        inet 192.168.1.101 netmask 0xffffff00 broadcast 192.168.1.255</span><br><span class=\"line\">        nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class=\"line\">        media: autoselect</span><br><span class=\"line\">        status: active</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>静态IP设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">DEVICE=enp0s3</span><br><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">IPADDR=192.168.1.108</span><br><span class=\"line\">NETMASK=255.255.255.0</span><br><span class=\"line\">GATEWAY=192.168.1.1</span><br><span class=\"line\">DNS1=211.100.225.34</span><br><span class=\"line\">DNS2.124.207.160.106</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">service network restart</span><br><span class=\"line\">ping www.baidu.com</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">PING www.a.shifen.com (182.61.200.7) 56(84) bytes of data.</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"VirtualBox生成备份\"><a href=\"#VirtualBox生成备份\" class=\"headerlink\" title=\"VirtualBox生成备份\"></a>VirtualBox生成备份</h2><ul>\n<li>VirtualBox -&gt; 生成 -&gt; 备份</li>\n</ul>\n<h2 id=\"SecureCRT连接VirtualBoxCentOS7\"><a href=\"#SecureCRT连接VirtualBoxCentOS7\" class=\"headerlink\" title=\"SecureCRT连接VirtualBoxCentOS7\"></a>SecureCRT连接VirtualBoxCentOS7</h2><ul>\n<li>SecureCRT -&gt; Connect -&gt; Quick Connect -&gt; Hostname(192.168.1.108) -&gt; Username(root) PublicKey -&gt; Properties -&gt; Use identity or certificate file(&#x2F;Users&#x2F;xdx&#x2F;.ssh&#x2F;id_rsa.pub)</li>\n<li>SecureCRT -&gt; Options -&gt; Session Options -&gt; Appearance -&gt; Solarized Darcula -&gt; Font</li>\n</ul>\n<h2 id=\"Mac终端文件夹颜色设置\"><a href=\"#Mac终端文件夹颜色设置\" class=\"headerlink\" title=\"Mac终端文件夹颜色设置\"></a>Mac终端文件夹颜色设置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">export LC_ALL=en_US.UTF-8</span><br><span class=\"line\">export LANG=en_US.UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">export CLICOLOR=1</span><br><span class=\"line\">export LSCOLORS=Exfxcxdxbxegedabagacad</span><br><span class=\"line\">export GREP_OPTIONS=&quot;--color=auto&quot;</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"VIM安装与配置\"><a href=\"#VIM安装与配置\" class=\"headerlink\" title=\"VIM安装与配置\"></a>VIM安装与配置</h2><ul>\n<li><p>VIM安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install vim</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>VIM配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.vimrc</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">syntax on</span><br><span class=\"line\">set tabstop=4</span><br><span class=\"line\">set shiftwidth=4</span><br><span class=\"line\">set softtabstop=4</span><br><span class=\"line\">set smarttab</span><br><span class=\"line\">set expandtab</span><br><span class=\"line\">set encoding=utf-8</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.vimrc</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"CentOS7关闭防火墙和SELinux\"><a href=\"#CentOS7关闭防火墙和SELinux\" class=\"headerlink\" title=\"CentOS7关闭防火墙和SELinux\"></a>CentOS7关闭防火墙和SELinux</h2><ul>\n<li><p>关闭防火墙</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭SELinux</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/selinux</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"安装lrzsz\"><a href=\"#安装lrzsz\" class=\"headerlink\" title=\"安装lrzsz\"></a>安装lrzsz</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install lrzsz</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><ul>\n<li><p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">downloads</a></p>\n</li>\n<li><p>getconf LONG_BIT</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getconf LONG_BIT</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">64</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装JDK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdk-7u80-linux-x64.tar.gz</span><br><span class=\"line\">rz -bye</span><br><span class=\"line\">mkdir /usr/java</span><br><span class=\"line\">tar -zxvf jdk-7u80-linux-x64.tar.gz -C /usr/java</span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># JAVA</span><br><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.7.0</span><br><span class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">java -version</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">java version &quot;1.7.0_80&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.7.0_80-b15)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"安装Scala\"><a href=\"#安装Scala\" class=\"headerlink\" title=\"安装Scala\"></a>安装Scala</h2><ul>\n<li><a href=\"http://www.scala-lang.org/download/\">downloads</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br><span class=\"line\">wget http://downloads.typesafe.com/scala/2.11.5/scala-2.11.5.tgz</span><br><span class=\"line\">mkdir /usr/local/scala</span><br><span class=\"line\">tar -zxvf scala-2.11.5.tgz -C /usr/local/scala</span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># SCALA</span><br><span class=\"line\">export SCALA_HOME=/usr/local/scala/scala-2.11.5</span><br><span class=\"line\">export PATH=$PATH:$SCALA_HOME/bin</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">scala -version</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Scala code runner version 2.11.5 -- Copyright 2002-2013, LAMP/EPFL</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Spark\"><a href=\"#安装Spark\" class=\"headerlink\" title=\"安装Spark\"></a>安装Spark</h2><ul>\n<li><a href=\"http://spark.apache.org/downloads.html\">downloads</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://archive.apache.org/dist/spark/spark-1.2.0/spark-1.2.0-bin-hadoop1.tgz</span><br><span class=\"line\">mkdir /usr/local/spark</span><br><span class=\"line\">tar -zxvf spark-1.2.0-bin-hadoop1.tgz -C /usr/local/spark</span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># SPARK</span><br><span class=\"line\">export SPARK_HOME=/usr/local/spark/spark-1.2.0-bin-hadoop1</span><br><span class=\"line\">export PATH=$PATH:$SPARK_HOME/bin</span><br><span class=\"line\">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">pyspark --master local[2]</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Python 2.7.5 (default, Oct 30 2018, 23:45:53)</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">&gt;&gt;&gt; exit()</span><br><span class=\"line\">cd /usr/local/spark/spark-1.2.0-bin-hadoop1/conf/</span><br><span class=\"line\">cp spark-env.sh.template spark-env.sh</span><br><span class=\"line\">vim spark-env.sh</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">export SPARK_MASTER_IP=127.0.0.1</span><br><span class=\"line\">export SPARK_LOCAL_IP=127.0.0.1</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd ~</span><br><span class=\"line\">spark-shell</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Spark assembly has been built with Hive, including Datanucleus jars on classpath</span><br><span class=\"line\">...</span><br><span class=\"line\">scala&gt; </span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; :q</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WordCount\"><a href=\"#WordCount\" class=\"headerlink\" title=\"WordCount\"></a>WordCount</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/spark/spark-1.2.0-bin-hadoop1/bin</span><br><span class=\"line\">spark-shell</span><br><span class=\"line\">scala&gt; val lines = sc.textFile(&quot;../README.md&quot;, 2)</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">19/09/14 10:35:42 INFO MemoryStore: ensureFreeSpace(32768) called with curMem=0, maxMem=280248975</span><br><span class=\"line\">19/09/14 10:35:42 INFO MemoryStore: Block broadcast_0 stored as values in memory (estimated size 32.0 KB, free 267.2 MB)</span><br><span class=\"line\">19/09/14 10:35:42 INFO MemoryStore: ensureFreeSpace(4959) called with curMem=32768, maxMem=280248975</span><br><span class=\"line\">19/09/14 10:35:42 INFO MemoryStore: Block broadcast_0_piece0 stored as bytes in memory (estimated size 4.8 KB, free 267.2 MB)</span><br><span class=\"line\">19/09/14 10:35:42 INFO BlockManagerInfo: Added broadcast_0_piece0 in memory on localhost:42664 (size: 4.8 KB, free: 267.3 MB)</span><br><span class=\"line\">19/09/14 10:35:42 INFO BlockManagerMaster: Updated info of block broadcast_0_piece0</span><br><span class=\"line\">19/09/14 10:35:42 INFO SparkContext: Created broadcast 0 from textFile at &lt;console&gt;:12</span><br><span class=\"line\">lines: org.apache.spark.rdd.RDD[String] = ../README.md MappedRDD[1] at textFile at &lt;console&gt;:12</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; val words = lines.flatMap(line =&gt; line.split(&quot; &quot;))</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">words: org.apache.spark.rdd.RDD[String] = FlatMappedRDD[2] at flatMap at &lt;console&gt;:14</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; val ones = words.map(w =&gt; (w, 1))</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">ones: org.apache.spark.rdd.RDD[(String, Int)] = MappedRDD[3] at map at &lt;console&gt;:16</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; val counts = ones.reduceByKey(_ + _)</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">19/09/14 10:41:24 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class=\"line\">19/09/14 10:41:24 WARN LoadSnappy: Snappy native library not loaded</span><br><span class=\"line\">19/09/14 10:41:24 INFO FileInputFormat: Total input paths to process : 1</span><br><span class=\"line\">counts: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[4] at reduceByKey at &lt;console&gt;:18</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; counts.foreach(println)</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">...</span><br><span class=\"line\">(For,2)</span><br><span class=\"line\">(processing.,1)</span><br><span class=\"line\">(Spark,15)</span><br><span class=\"line\">(particular,3)</span><br><span class=\"line\">(Programs,1)</span><br><span class=\"line\">(The,1)</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; :q</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Spark运行环境搭建</p>\n<h2 id=\"Mac安装VirtualBox\"><a href=\"#Mac安装VirtualBox\" class=\"headerlink\" title=\"Mac安装VirtualBox\"></a>Mac安装VirtualBox</h2><ul>\n<li><a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a></li>\n</ul>\n<h2 id=\"Mac安装SecureCRT\"><a href=\"#Mac安装SecureCRT\" class=\"headerlink\" title=\"Mac安装SecureCRT\"></a>Mac安装SecureCRT</h2><ul>\n<li><a href=\"https://www.vandyke.com/products/securecrt/\">SecureCRT</a></li>\n</ul>\n<h2 id=\"VirtualBox安装CentOS7-Minimal\"><a href=\"#VirtualBox安装CentOS7-Minimal\" class=\"headerlink\" title=\"VirtualBox安装CentOS7-Minimal\"></a>VirtualBox安装CentOS7-Minimal</h2><ul>\n<li><a href=\"http://vault.centos.org/\">CentOS7</a></li>\n<li>VirtualBox -&gt; 设置 -&gt; 存储 -&gt; 盘片</li>\n<li>VirtualBox -&gt; 设置 -&gt; 网络 -&gt; 桥接网卡</li>\n</ul>\n<h2 id=\"CentOS7静态IP设置\"><a href=\"#CentOS7静态IP设置\" class=\"headerlink\" title=\"CentOS7静态IP设置\"></a>CentOS7静态IP设置</h2><ul>\n<li><p>动态IP设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping www.baidu.com</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">ping: www.baidu.com: Name or service not known</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">service network restart</span><br><span class=\"line\">ping www.baidu.com</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">PING www.a.shifen.com (182.61.200.7) 56(84) bytes of data.</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看DNS</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/resolv.conf</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">211.100.225.34</span><br><span class=\"line\">124.207.160.106</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看Mac局域网IP</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">...</span><br><span class=\"line\">en0: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class=\"line\">        ether 88:e9:fe:53:af:ef </span><br><span class=\"line\">        inet6 fe80::8c0:3e8a:b41a:98b9%en0 prefixlen 64 secured scopeid 0x6 </span><br><span class=\"line\">        inet 192.168.1.101 netmask 0xffffff00 broadcast 192.168.1.255</span><br><span class=\"line\">        nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class=\"line\">        media: autoselect</span><br><span class=\"line\">        status: active</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>静态IP设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">DEVICE=enp0s3</span><br><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">IPADDR=192.168.1.108</span><br><span class=\"line\">NETMASK=255.255.255.0</span><br><span class=\"line\">GATEWAY=192.168.1.1</span><br><span class=\"line\">DNS1=211.100.225.34</span><br><span class=\"line\">DNS2.124.207.160.106</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">service network restart</span><br><span class=\"line\">ping www.baidu.com</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">PING www.a.shifen.com (182.61.200.7) 56(84) bytes of data.</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"VirtualBox生成备份\"><a href=\"#VirtualBox生成备份\" class=\"headerlink\" title=\"VirtualBox生成备份\"></a>VirtualBox生成备份</h2><ul>\n<li>VirtualBox -&gt; 生成 -&gt; 备份</li>\n</ul>\n<h2 id=\"SecureCRT连接VirtualBoxCentOS7\"><a href=\"#SecureCRT连接VirtualBoxCentOS7\" class=\"headerlink\" title=\"SecureCRT连接VirtualBoxCentOS7\"></a>SecureCRT连接VirtualBoxCentOS7</h2><ul>\n<li>SecureCRT -&gt; Connect -&gt; Quick Connect -&gt; Hostname(192.168.1.108) -&gt; Username(root) PublicKey -&gt; Properties -&gt; Use identity or certificate file(&#x2F;Users&#x2F;xdx&#x2F;.ssh&#x2F;id_rsa.pub)</li>\n<li>SecureCRT -&gt; Options -&gt; Session Options -&gt; Appearance -&gt; Solarized Darcula -&gt; Font</li>\n</ul>\n<h2 id=\"Mac终端文件夹颜色设置\"><a href=\"#Mac终端文件夹颜色设置\" class=\"headerlink\" title=\"Mac终端文件夹颜色设置\"></a>Mac终端文件夹颜色设置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">export LC_ALL=en_US.UTF-8</span><br><span class=\"line\">export LANG=en_US.UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">export CLICOLOR=1</span><br><span class=\"line\">export LSCOLORS=Exfxcxdxbxegedabagacad</span><br><span class=\"line\">export GREP_OPTIONS=&quot;--color=auto&quot;</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"VIM安装与配置\"><a href=\"#VIM安装与配置\" class=\"headerlink\" title=\"VIM安装与配置\"></a>VIM安装与配置</h2><ul>\n<li><p>VIM安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install vim</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>VIM配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.vimrc</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">syntax on</span><br><span class=\"line\">set tabstop=4</span><br><span class=\"line\">set shiftwidth=4</span><br><span class=\"line\">set softtabstop=4</span><br><span class=\"line\">set smarttab</span><br><span class=\"line\">set expandtab</span><br><span class=\"line\">set encoding=utf-8</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.vimrc</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"CentOS7关闭防火墙和SELinux\"><a href=\"#CentOS7关闭防火墙和SELinux\" class=\"headerlink\" title=\"CentOS7关闭防火墙和SELinux\"></a>CentOS7关闭防火墙和SELinux</h2><ul>\n<li><p>关闭防火墙</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭SELinux</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/selinux</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">SELINUX=disabled</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"安装lrzsz\"><a href=\"#安装lrzsz\" class=\"headerlink\" title=\"安装lrzsz\"></a>安装lrzsz</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install lrzsz</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><ul>\n<li><p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">downloads</a></p>\n</li>\n<li><p>getconf LONG_BIT</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getconf LONG_BIT</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">64</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装JDK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdk-7u80-linux-x64.tar.gz</span><br><span class=\"line\">rz -bye</span><br><span class=\"line\">mkdir /usr/java</span><br><span class=\"line\">tar -zxvf jdk-7u80-linux-x64.tar.gz -C /usr/java</span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># JAVA</span><br><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.7.0</span><br><span class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">java -version</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">java version &quot;1.7.0_80&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.7.0_80-b15)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"安装Scala\"><a href=\"#安装Scala\" class=\"headerlink\" title=\"安装Scala\"></a>安装Scala</h2><ul>\n<li><a href=\"http://www.scala-lang.org/download/\">downloads</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br><span class=\"line\">wget http://downloads.typesafe.com/scala/2.11.5/scala-2.11.5.tgz</span><br><span class=\"line\">mkdir /usr/local/scala</span><br><span class=\"line\">tar -zxvf scala-2.11.5.tgz -C /usr/local/scala</span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># SCALA</span><br><span class=\"line\">export SCALA_HOME=/usr/local/scala/scala-2.11.5</span><br><span class=\"line\">export PATH=$PATH:$SCALA_HOME/bin</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">scala -version</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Scala code runner version 2.11.5 -- Copyright 2002-2013, LAMP/EPFL</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Spark\"><a href=\"#安装Spark\" class=\"headerlink\" title=\"安装Spark\"></a>安装Spark</h2><ul>\n<li><a href=\"http://spark.apache.org/downloads.html\">downloads</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://archive.apache.org/dist/spark/spark-1.2.0/spark-1.2.0-bin-hadoop1.tgz</span><br><span class=\"line\">mkdir /usr/local/spark</span><br><span class=\"line\">tar -zxvf spark-1.2.0-bin-hadoop1.tgz -C /usr/local/spark</span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># SPARK</span><br><span class=\"line\">export SPARK_HOME=/usr/local/spark/spark-1.2.0-bin-hadoop1</span><br><span class=\"line\">export PATH=$PATH:$SPARK_HOME/bin</span><br><span class=\"line\">export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">pyspark --master local[2]</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Python 2.7.5 (default, Oct 30 2018, 23:45:53)</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">&gt;&gt;&gt; exit()</span><br><span class=\"line\">cd /usr/local/spark/spark-1.2.0-bin-hadoop1/conf/</span><br><span class=\"line\">cp spark-env.sh.template spark-env.sh</span><br><span class=\"line\">vim spark-env.sh</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\">export SPARK_MASTER_IP=127.0.0.1</span><br><span class=\"line\">export SPARK_LOCAL_IP=127.0.0.1</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd ~</span><br><span class=\"line\">spark-shell</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Spark assembly has been built with Hive, including Datanucleus jars on classpath</span><br><span class=\"line\">...</span><br><span class=\"line\">scala&gt; </span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; :q</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WordCount\"><a href=\"#WordCount\" class=\"headerlink\" title=\"WordCount\"></a>WordCount</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/spark/spark-1.2.0-bin-hadoop1/bin</span><br><span class=\"line\">spark-shell</span><br><span class=\"line\">scala&gt; val lines = sc.textFile(&quot;../README.md&quot;, 2)</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">19/09/14 10:35:42 INFO MemoryStore: ensureFreeSpace(32768) called with curMem=0, maxMem=280248975</span><br><span class=\"line\">19/09/14 10:35:42 INFO MemoryStore: Block broadcast_0 stored as values in memory (estimated size 32.0 KB, free 267.2 MB)</span><br><span class=\"line\">19/09/14 10:35:42 INFO MemoryStore: ensureFreeSpace(4959) called with curMem=32768, maxMem=280248975</span><br><span class=\"line\">19/09/14 10:35:42 INFO MemoryStore: Block broadcast_0_piece0 stored as bytes in memory (estimated size 4.8 KB, free 267.2 MB)</span><br><span class=\"line\">19/09/14 10:35:42 INFO BlockManagerInfo: Added broadcast_0_piece0 in memory on localhost:42664 (size: 4.8 KB, free: 267.3 MB)</span><br><span class=\"line\">19/09/14 10:35:42 INFO BlockManagerMaster: Updated info of block broadcast_0_piece0</span><br><span class=\"line\">19/09/14 10:35:42 INFO SparkContext: Created broadcast 0 from textFile at &lt;console&gt;:12</span><br><span class=\"line\">lines: org.apache.spark.rdd.RDD[String] = ../README.md MappedRDD[1] at textFile at &lt;console&gt;:12</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; val words = lines.flatMap(line =&gt; line.split(&quot; &quot;))</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">words: org.apache.spark.rdd.RDD[String] = FlatMappedRDD[2] at flatMap at &lt;console&gt;:14</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; val ones = words.map(w =&gt; (w, 1))</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">ones: org.apache.spark.rdd.RDD[(String, Int)] = MappedRDD[3] at map at &lt;console&gt;:16</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; val counts = ones.reduceByKey(_ + _)</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">19/09/14 10:41:24 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class=\"line\">19/09/14 10:41:24 WARN LoadSnappy: Snappy native library not loaded</span><br><span class=\"line\">19/09/14 10:41:24 INFO FileInputFormat: Total input paths to process : 1</span><br><span class=\"line\">counts: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[4] at reduceByKey at &lt;console&gt;:18</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; counts.foreach(println)</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">...</span><br><span class=\"line\">(For,2)</span><br><span class=\"line\">(processing.,1)</span><br><span class=\"line\">(Spark,15)</span><br><span class=\"line\">(particular,3)</span><br><span class=\"line\">(Programs,1)</span><br><span class=\"line\">(The,1)</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">scala&gt; :q</span><br></pre></td></tr></table></figure>"},{"title":"Spark源码阅读环境搭建","date":"2019-09-15T09:16:44.000Z","_content":"Spark源码阅读环境搭建\n\n## Maven安装\n\n* [Maven](http://maven.apache.org/index.html)\n\n```\ncd /Users/xdx/Workspace/Softwares\nwget http://archive.apache.org/dist/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz\nsudo mkdir /usr/local/maven\nsudo tar -zxvf apache-maven-3.6.2-bin.tar.gz -C /usr/local/maven\nvim ~/.bash_profile\n/* Input:\n# MAVEN\nexport MAVEN_HOME=/usr/local/maven/apache-maven-3.6.2\nexport PATH=$PATH:$MAVEN_HOME/bin\nexport MAVEN_OPTS=\"-Xmx2g -XX:ReservedCodeCacheSize=512m\"\n*///:~\nsource ~/.bash_profile\nmvn -v\n/* Output:\nApache Maven 3.6.2\n...\n*///:~\n```\n\n## Spark源码编译\n\n```\ncd /Users/xdx/Workspace/SparkProjects\nwget http://archive.apache.org/dist/spark/spark-1.2.0/spark-1.2.0.tgz\ntar -zxvf spark-1.2.0.tgz\ncd spark-1.2.0\nmvn -T 5 -DskipTests clean package\n/* Output:\n[ERROR] Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile (scala-compile-first) on project spark-streaming-flume_2.10: Execution scala-compile-first of goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile failed.: CompileFailed -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :spark-streaming-flume_2.10\n...\n*///:~\nvim pom.xml\n/* Input:\n <dependency>\n        <!-- Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile -->\n        <groupId>net.alchim31.maven</groupId>\n        <artifactId>scala-maven-plugin</artifactId>\n        <version>3.2.0</version>\n      </dependency>\n*///:~\nmvn -T 5 -DskipTests clean package\n/* Output:\n[ERROR] Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile (scala-compile-first) on project spark-streaming-flume_2.10: Execution scala-compile-first of goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile failed.: CompileFailed -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :spark-streaming-flume_2.10\n...\n*///:~\ncd /Users/xdx/Workspace/Softwares\nwget http://archive.apache.org/dist/maven/maven-3/3.2.2/binaries/apache-maven-3.2.2-bin.tar.gz\nsudo tar -zxvf apache-maven-3.2.2-bin.tar.gz -C /usr/local/maven\nvim ~/.bash_profile\n/* Input:\n# MAVEN\nexport MAVEN_HOME=/usr/local/maven/apache-maven-3.2.2\nexport PATH=$PATH:$MAVEN_HOME/bin\nexport MAVEN_OPTS=\"-Xmx2g -XX:ReservedCodeCacheSize=512m\"\n*///:~\nsource ~/.bash_profile\nmvn -v\n/* Output:\nApache Maven 3.6.2\n...\n*///:~\nexit\nmvn -v\n/* Output:\nApache Maven 3.2.2\n...\n*///:~\ncd /Users/xdx/Workspace/SparkProjects\ncd spark-1.2.0\nmvn -T 5 -DskipTests clean package\n/* Output:\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO] \n[INFO] Spark Project Parent POM ........................... SUCCESS [  3.898 s]\n[INFO] Spark Project Networking ........................... SUCCESS [ 10.270 s]\n[INFO] Spark Project Shuffle Streaming Service ............ SUCCESS [  8.470 s]\n[INFO] Spark Project Core ................................. SUCCESS [02:48 min]\n[INFO] Spark Project Bagel ................................ SUCCESS [ 44.801 s]\n[INFO] Spark Project GraphX ............................... SUCCESS [01:36 min]\n[INFO] Spark Project Streaming ............................ SUCCESS [02:07 min]\n[INFO] Spark Project Catalyst ............................. SUCCESS [02:16 min]\n[INFO] Spark Project SQL .................................. SUCCESS [01:14 min]\n[INFO] Spark Project ML Library ........................... SUCCESS [01:31 min]\n[INFO] Spark Project Tools ................................ SUCCESS [ 29.564 s]\n[INFO] Spark Project Hive ................................. SUCCESS [01:31 min]\n[INFO] Spark Project REPL ................................. SUCCESS [ 39.208 s]\n[INFO] Spark Project Assembly ............................. SUCCESS [ 35.906 s]\n[INFO] Spark Project External Twitter ..................... SUCCESS [ 44.000 s]\n[INFO] Spark Project External Flume Sink .................. SUCCESS [ 22.857 s]\n[INFO] Spark Project External Flume ....................... SUCCESS [ 58.495 s]\n[INFO] Spark Project External MQTT ........................ SUCCESS [ 40.438 s]\n[INFO] Spark Project External ZeroMQ ...................... SUCCESS [ 46.336 s]\n[INFO] Spark Project External Kafka ....................... SUCCESS [ 36.279 s]\n[INFO] Spark Project Examples ............................. SUCCESS [01:13 min]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 10:00 min (Wall Clock)\n[INFO] Finished at: 2019-09-15T21:41:11+08:00\n[INFO] Final Memory: 64M/1263M\n[INFO] ------------------------------------------------------------------------\n*///:~\n```\n\n## Idea调试JavaWordCount\n\n* JavaWordCount -> Edit Configurations -> Run/Debug Configurations\n\n```\n/* Input:\nVM options: -Dspark.master=local\nProgram arguments: README.md\n*///:~\n```\n\n* View -> Tool Windows -> Maven -> Spark Project External Flume Sink -> Generate Sources and Update Folders\n\n* View -> Tool Windows -> Maven -> Spark Project Hive -> Generate Sources and Update Folders\n\n```\n/* Output:\nError: A JNI error has occurred, please check your installation and try again\nException in thread \"main\" java.lang.NoClassDefFoundError: org/apache/spark/api/java/function/FlatMapFunction\n\tat java.lang.Class.getDeclaredMethods0(Native Method)\n\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\n\tat java.lang.Class.privateGetMethodRecursive(Class.java:3048)\n\tat java.lang.Class.getMethod0(Class.java:3018)\n\tat java.lang.Class.getMethod(Class.java:1784)\n\tat sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)\n\tat sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)\nCaused by: java.lang.ClassNotFoundException: org.apache.spark.api.java.function.FlatMapFunction\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:382)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\t... 7 more\n*///:~\n```\n\n```\n//: pom.xml\n...\n<!--<scope>provided</scope>-->\n...\n```\n\n```\n/* Output:\nException in thread \"main\" java.lang.SecurityException: class \"javax.servlet.FilterRegistration\"'s signer information does not match signer information of other classes in the same package\n\tat java.lang.ClassLoader.checkCerts(ClassLoader.java:898)\n\tat java.lang.ClassLoader.preDefineClass(ClassLoader.java:668)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:761)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:468)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:74)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:369)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:363)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:362)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\tat org.eclipse.jetty.servlet.ServletContextHandler.<init>(ServletContextHandler.java:136)\n\tat org.eclipse.jetty.servlet.ServletContextHandler.<init>(ServletContextHandler.java:129)\n\tat org.eclipse.jetty.servlet.ServletContextHandler.<init>(ServletContextHandler.java:98)\n\tat org.apache.spark.ui.JettyUtils$.createServletHandler(JettyUtils.scala:96)\n\tat org.apache.spark.ui.JettyUtils$.createServletHandler(JettyUtils.scala:87)\n\tat org.apache.spark.ui.WebUI.attachPage(WebUI.scala:67)\n\tat org.apache.spark.ui.WebUI$$anonfun$attachTab$1.apply(WebUI.scala:60)\n\tat org.apache.spark.ui.WebUI$$anonfun$attachTab$1.apply(WebUI.scala:60)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)\n\tat org.apache.spark.ui.WebUI.attachTab(WebUI.scala:60)\n\tat org.apache.spark.ui.SparkUI.initialize(SparkUI.scala:50)\n\tat org.apache.spark.ui.SparkUI.<init>(SparkUI.scala:63)\n\tat org.apache.spark.ui.SparkUI$.create(SparkUI.scala:153)\n\tat org.apache.spark.ui.SparkUI$.createLiveUI(SparkUI.scala:108)\n\tat org.apache.spark.SparkContext.<init>(SparkContext.scala:260)\n\tat org.apache.spark.api.java.JavaSparkContext.<init>(JavaSparkContext.scala:61)\n\tat org.apache.spark.examples.JavaWordCount.main(JavaWordCount.java:44)\n*///:~\n```\n\n* Maven Helper\n\n* SonarLint\n\n* IDEA Mind Map\n\n```\nvim ~/.bash_profile\n/* Input:\n# MAVEN\nexport MAVEN_HOME=/usr/local/maven/apache-maven-3.6.2\nexport PATH=$PATH:$MAVEN_HOME/bin\nexport MAVEN_OPTS=\"-Xmx2g -XX:ReservedCodeCacheSize=512m\"\n*///:~\nsource ~/.bash_profile\nexit\ncd /Users/xdx/Workspace/SparkProjects\nwget http://archive.apache.org/dist/spark/spark-2.4.4/spark-2.4.4.tgz\ntar -zxvf spark-2.4.4.tgz\ncd spark-2.4.4\nmvn -T 5 -DskipTests clean package\n/* Output:\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for Spark Project Parent POM 2.4.4:\n[INFO] \n[INFO] Spark Project Parent POM ........................... SUCCESS [01:54 min]\n[INFO] Spark Project Tags ................................. SUCCESS [ 28.305 s]\n[INFO] Spark Project Sketch ............................... SUCCESS [ 11.713 s]\n[INFO] Spark Project Local DB ............................. SUCCESS [  6.649 s]\n[INFO] Spark Project Networking ........................... SUCCESS [01:27 min]\n[INFO] Spark Project Shuffle Streaming Service ............ SUCCESS [  3.910 s]\n[INFO] Spark Project Unsafe ............................... SUCCESS [02:36 min]\n[INFO] Spark Project Launcher ............................. SUCCESS [01:20 min]\n[INFO] Spark Project Core ................................. SUCCESS [12:41 min]\n[INFO] Spark Project ML Local Library ..................... SUCCESS [02:38 min]\n[INFO] Spark Project GraphX ............................... SUCCESS [29:15 min]\n[INFO] Spark Project Streaming ............................ SUCCESS [30:22 min]\n[INFO] Spark Project Catalyst ............................. SUCCESS [31:43 min]\n[INFO] Spark Project SQL .................................. SUCCESS [49:35 min]\n[INFO] Spark Project ML Library ........................... SUCCESS [03:48 min]\n[INFO] Spark Project Tools ................................ SUCCESS [ 56.221 s]\n[INFO] Spark Project Hive ................................. SUCCESS [02:31 min]\n[INFO] Spark Project REPL ................................. SUCCESS [ 17.349 s]\n[INFO] Spark Project Assembly ............................. SUCCESS [  2.984 s]\n[INFO] Spark Integration for Kafka 0.10 ................... SUCCESS [20:45 min]\n[INFO] Kafka 0.10+ Source for Structured Streaming ........ SUCCESS [01:16 min]\n[INFO] Spark Project Examples ............................. SUCCESS [ 57.738 s]\n[INFO] Spark Integration for Kafka 0.10 Assembly .......... SUCCESS [  5.975 s]\n[INFO] Spark Avro ......................................... SUCCESS [ 59.228 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:43 h (Wall Clock)\n[INFO] Finished at: 2019-09-16T23:55:40+08:00\n[INFO] ------------------------------------------------------------------------\n*///:~\n```\n\n* JavaWordCount -> Create 'JavaWordCount.main()' -> Run/Debug Configurations\n\n```\n/* Input:\nVM options: -Dspark.master=local\nProgram arguments: README.md\n*///:~\n```\n\n-> Run 'JavaWordCount.main()'","source":"_posts/Spark源码阅读环境搭建.md","raw":"---\ntitle: Spark源码阅读环境搭建\ndate: 2019-09-15 17:16:44\ntags: Spark\ncategories: Spark\n---\nSpark源码阅读环境搭建\n\n## Maven安装\n\n* [Maven](http://maven.apache.org/index.html)\n\n```\ncd /Users/xdx/Workspace/Softwares\nwget http://archive.apache.org/dist/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz\nsudo mkdir /usr/local/maven\nsudo tar -zxvf apache-maven-3.6.2-bin.tar.gz -C /usr/local/maven\nvim ~/.bash_profile\n/* Input:\n# MAVEN\nexport MAVEN_HOME=/usr/local/maven/apache-maven-3.6.2\nexport PATH=$PATH:$MAVEN_HOME/bin\nexport MAVEN_OPTS=\"-Xmx2g -XX:ReservedCodeCacheSize=512m\"\n*///:~\nsource ~/.bash_profile\nmvn -v\n/* Output:\nApache Maven 3.6.2\n...\n*///:~\n```\n\n## Spark源码编译\n\n```\ncd /Users/xdx/Workspace/SparkProjects\nwget http://archive.apache.org/dist/spark/spark-1.2.0/spark-1.2.0.tgz\ntar -zxvf spark-1.2.0.tgz\ncd spark-1.2.0\nmvn -T 5 -DskipTests clean package\n/* Output:\n[ERROR] Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile (scala-compile-first) on project spark-streaming-flume_2.10: Execution scala-compile-first of goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile failed.: CompileFailed -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :spark-streaming-flume_2.10\n...\n*///:~\nvim pom.xml\n/* Input:\n <dependency>\n        <!-- Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile -->\n        <groupId>net.alchim31.maven</groupId>\n        <artifactId>scala-maven-plugin</artifactId>\n        <version>3.2.0</version>\n      </dependency>\n*///:~\nmvn -T 5 -DskipTests clean package\n/* Output:\n[ERROR] Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile (scala-compile-first) on project spark-streaming-flume_2.10: Execution scala-compile-first of goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile failed.: CompileFailed -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException\n[ERROR] \n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :spark-streaming-flume_2.10\n...\n*///:~\ncd /Users/xdx/Workspace/Softwares\nwget http://archive.apache.org/dist/maven/maven-3/3.2.2/binaries/apache-maven-3.2.2-bin.tar.gz\nsudo tar -zxvf apache-maven-3.2.2-bin.tar.gz -C /usr/local/maven\nvim ~/.bash_profile\n/* Input:\n# MAVEN\nexport MAVEN_HOME=/usr/local/maven/apache-maven-3.2.2\nexport PATH=$PATH:$MAVEN_HOME/bin\nexport MAVEN_OPTS=\"-Xmx2g -XX:ReservedCodeCacheSize=512m\"\n*///:~\nsource ~/.bash_profile\nmvn -v\n/* Output:\nApache Maven 3.6.2\n...\n*///:~\nexit\nmvn -v\n/* Output:\nApache Maven 3.2.2\n...\n*///:~\ncd /Users/xdx/Workspace/SparkProjects\ncd spark-1.2.0\nmvn -T 5 -DskipTests clean package\n/* Output:\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO] \n[INFO] Spark Project Parent POM ........................... SUCCESS [  3.898 s]\n[INFO] Spark Project Networking ........................... SUCCESS [ 10.270 s]\n[INFO] Spark Project Shuffle Streaming Service ............ SUCCESS [  8.470 s]\n[INFO] Spark Project Core ................................. SUCCESS [02:48 min]\n[INFO] Spark Project Bagel ................................ SUCCESS [ 44.801 s]\n[INFO] Spark Project GraphX ............................... SUCCESS [01:36 min]\n[INFO] Spark Project Streaming ............................ SUCCESS [02:07 min]\n[INFO] Spark Project Catalyst ............................. SUCCESS [02:16 min]\n[INFO] Spark Project SQL .................................. SUCCESS [01:14 min]\n[INFO] Spark Project ML Library ........................... SUCCESS [01:31 min]\n[INFO] Spark Project Tools ................................ SUCCESS [ 29.564 s]\n[INFO] Spark Project Hive ................................. SUCCESS [01:31 min]\n[INFO] Spark Project REPL ................................. SUCCESS [ 39.208 s]\n[INFO] Spark Project Assembly ............................. SUCCESS [ 35.906 s]\n[INFO] Spark Project External Twitter ..................... SUCCESS [ 44.000 s]\n[INFO] Spark Project External Flume Sink .................. SUCCESS [ 22.857 s]\n[INFO] Spark Project External Flume ....................... SUCCESS [ 58.495 s]\n[INFO] Spark Project External MQTT ........................ SUCCESS [ 40.438 s]\n[INFO] Spark Project External ZeroMQ ...................... SUCCESS [ 46.336 s]\n[INFO] Spark Project External Kafka ....................... SUCCESS [ 36.279 s]\n[INFO] Spark Project Examples ............................. SUCCESS [01:13 min]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 10:00 min (Wall Clock)\n[INFO] Finished at: 2019-09-15T21:41:11+08:00\n[INFO] Final Memory: 64M/1263M\n[INFO] ------------------------------------------------------------------------\n*///:~\n```\n\n## Idea调试JavaWordCount\n\n* JavaWordCount -> Edit Configurations -> Run/Debug Configurations\n\n```\n/* Input:\nVM options: -Dspark.master=local\nProgram arguments: README.md\n*///:~\n```\n\n* View -> Tool Windows -> Maven -> Spark Project External Flume Sink -> Generate Sources and Update Folders\n\n* View -> Tool Windows -> Maven -> Spark Project Hive -> Generate Sources and Update Folders\n\n```\n/* Output:\nError: A JNI error has occurred, please check your installation and try again\nException in thread \"main\" java.lang.NoClassDefFoundError: org/apache/spark/api/java/function/FlatMapFunction\n\tat java.lang.Class.getDeclaredMethods0(Native Method)\n\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\n\tat java.lang.Class.privateGetMethodRecursive(Class.java:3048)\n\tat java.lang.Class.getMethod0(Class.java:3018)\n\tat java.lang.Class.getMethod(Class.java:1784)\n\tat sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)\n\tat sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)\nCaused by: java.lang.ClassNotFoundException: org.apache.spark.api.java.function.FlatMapFunction\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:382)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\t... 7 more\n*///:~\n```\n\n```\n//: pom.xml\n...\n<!--<scope>provided</scope>-->\n...\n```\n\n```\n/* Output:\nException in thread \"main\" java.lang.SecurityException: class \"javax.servlet.FilterRegistration\"'s signer information does not match signer information of other classes in the same package\n\tat java.lang.ClassLoader.checkCerts(ClassLoader.java:898)\n\tat java.lang.ClassLoader.preDefineClass(ClassLoader.java:668)\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:761)\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:468)\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:74)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:369)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:363)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:362)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\tat org.eclipse.jetty.servlet.ServletContextHandler.<init>(ServletContextHandler.java:136)\n\tat org.eclipse.jetty.servlet.ServletContextHandler.<init>(ServletContextHandler.java:129)\n\tat org.eclipse.jetty.servlet.ServletContextHandler.<init>(ServletContextHandler.java:98)\n\tat org.apache.spark.ui.JettyUtils$.createServletHandler(JettyUtils.scala:96)\n\tat org.apache.spark.ui.JettyUtils$.createServletHandler(JettyUtils.scala:87)\n\tat org.apache.spark.ui.WebUI.attachPage(WebUI.scala:67)\n\tat org.apache.spark.ui.WebUI$$anonfun$attachTab$1.apply(WebUI.scala:60)\n\tat org.apache.spark.ui.WebUI$$anonfun$attachTab$1.apply(WebUI.scala:60)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)\n\tat org.apache.spark.ui.WebUI.attachTab(WebUI.scala:60)\n\tat org.apache.spark.ui.SparkUI.initialize(SparkUI.scala:50)\n\tat org.apache.spark.ui.SparkUI.<init>(SparkUI.scala:63)\n\tat org.apache.spark.ui.SparkUI$.create(SparkUI.scala:153)\n\tat org.apache.spark.ui.SparkUI$.createLiveUI(SparkUI.scala:108)\n\tat org.apache.spark.SparkContext.<init>(SparkContext.scala:260)\n\tat org.apache.spark.api.java.JavaSparkContext.<init>(JavaSparkContext.scala:61)\n\tat org.apache.spark.examples.JavaWordCount.main(JavaWordCount.java:44)\n*///:~\n```\n\n* Maven Helper\n\n* SonarLint\n\n* IDEA Mind Map\n\n```\nvim ~/.bash_profile\n/* Input:\n# MAVEN\nexport MAVEN_HOME=/usr/local/maven/apache-maven-3.6.2\nexport PATH=$PATH:$MAVEN_HOME/bin\nexport MAVEN_OPTS=\"-Xmx2g -XX:ReservedCodeCacheSize=512m\"\n*///:~\nsource ~/.bash_profile\nexit\ncd /Users/xdx/Workspace/SparkProjects\nwget http://archive.apache.org/dist/spark/spark-2.4.4/spark-2.4.4.tgz\ntar -zxvf spark-2.4.4.tgz\ncd spark-2.4.4\nmvn -T 5 -DskipTests clean package\n/* Output:\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary for Spark Project Parent POM 2.4.4:\n[INFO] \n[INFO] Spark Project Parent POM ........................... SUCCESS [01:54 min]\n[INFO] Spark Project Tags ................................. SUCCESS [ 28.305 s]\n[INFO] Spark Project Sketch ............................... SUCCESS [ 11.713 s]\n[INFO] Spark Project Local DB ............................. SUCCESS [  6.649 s]\n[INFO] Spark Project Networking ........................... SUCCESS [01:27 min]\n[INFO] Spark Project Shuffle Streaming Service ............ SUCCESS [  3.910 s]\n[INFO] Spark Project Unsafe ............................... SUCCESS [02:36 min]\n[INFO] Spark Project Launcher ............................. SUCCESS [01:20 min]\n[INFO] Spark Project Core ................................. SUCCESS [12:41 min]\n[INFO] Spark Project ML Local Library ..................... SUCCESS [02:38 min]\n[INFO] Spark Project GraphX ............................... SUCCESS [29:15 min]\n[INFO] Spark Project Streaming ............................ SUCCESS [30:22 min]\n[INFO] Spark Project Catalyst ............................. SUCCESS [31:43 min]\n[INFO] Spark Project SQL .................................. SUCCESS [49:35 min]\n[INFO] Spark Project ML Library ........................... SUCCESS [03:48 min]\n[INFO] Spark Project Tools ................................ SUCCESS [ 56.221 s]\n[INFO] Spark Project Hive ................................. SUCCESS [02:31 min]\n[INFO] Spark Project REPL ................................. SUCCESS [ 17.349 s]\n[INFO] Spark Project Assembly ............................. SUCCESS [  2.984 s]\n[INFO] Spark Integration for Kafka 0.10 ................... SUCCESS [20:45 min]\n[INFO] Kafka 0.10+ Source for Structured Streaming ........ SUCCESS [01:16 min]\n[INFO] Spark Project Examples ............................. SUCCESS [ 57.738 s]\n[INFO] Spark Integration for Kafka 0.10 Assembly .......... SUCCESS [  5.975 s]\n[INFO] Spark Avro ......................................... SUCCESS [ 59.228 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:43 h (Wall Clock)\n[INFO] Finished at: 2019-09-16T23:55:40+08:00\n[INFO] ------------------------------------------------------------------------\n*///:~\n```\n\n* JavaWordCount -> Create 'JavaWordCount.main()' -> Run/Debug Configurations\n\n```\n/* Input:\nVM options: -Dspark.master=local\nProgram arguments: README.md\n*///:~\n```\n\n-> Run 'JavaWordCount.main()'","slug":"Spark源码阅读环境搭建","published":1,"updated":"2023-09-10T11:52:54.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln2n3nwl000jyuzqerbm196k","content":"<p>Spark源码阅读环境搭建</p>\n<h2 id=\"Maven安装\"><a href=\"#Maven安装\" class=\"headerlink\" title=\"Maven安装\"></a>Maven安装</h2><ul>\n<li><a href=\"http://maven.apache.org/index.html\">Maven</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /Users/xdx/Workspace/Softwares</span><br><span class=\"line\">wget http://archive.apache.org/dist/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz</span><br><span class=\"line\">sudo mkdir /usr/local/maven</span><br><span class=\"line\">sudo tar -zxvf apache-maven-3.6.2-bin.tar.gz -C /usr/local/maven</span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># MAVEN</span><br><span class=\"line\">export MAVEN_HOME=/usr/local/maven/apache-maven-3.6.2</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br><span class=\"line\">export MAVEN_OPTS=&quot;-Xmx2g -XX:ReservedCodeCacheSize=512m&quot;</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">mvn -v</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Apache Maven 3.6.2</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Spark源码编译\"><a href=\"#Spark源码编译\" class=\"headerlink\" title=\"Spark源码编译\"></a>Spark源码编译</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /Users/xdx/Workspace/SparkProjects</span><br><span class=\"line\">wget http://archive.apache.org/dist/spark/spark-1.2.0/spark-1.2.0.tgz</span><br><span class=\"line\">tar -zxvf spark-1.2.0.tgz</span><br><span class=\"line\">cd spark-1.2.0</span><br><span class=\"line\">mvn -T 5 -DskipTests clean package</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">[ERROR] Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile (scala-compile-first) on project spark-streaming-flume_2.10: Execution scala-compile-first of goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile failed.: CompileFailed -&gt; [Help 1]</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class=\"line\">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class=\"line\">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] After correcting the problems, you can resume the build with the command</span><br><span class=\"line\">[ERROR]   mvn &lt;args&gt; -rf :spark-streaming-flume_2.10</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">vim pom.xml</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">        &lt;!-- Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile --&gt;</span><br><span class=\"line\">        &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">mvn -T 5 -DskipTests clean package</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">[ERROR] Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile (scala-compile-first) on project spark-streaming-flume_2.10: Execution scala-compile-first of goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile failed.: CompileFailed -&gt; [Help 1]</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class=\"line\">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class=\"line\">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] After correcting the problems, you can resume the build with the command</span><br><span class=\"line\">[ERROR]   mvn &lt;args&gt; -rf :spark-streaming-flume_2.10</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd /Users/xdx/Workspace/Softwares</span><br><span class=\"line\">wget http://archive.apache.org/dist/maven/maven-3/3.2.2/binaries/apache-maven-3.2.2-bin.tar.gz</span><br><span class=\"line\">sudo tar -zxvf apache-maven-3.2.2-bin.tar.gz -C /usr/local/maven</span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># MAVEN</span><br><span class=\"line\">export MAVEN_HOME=/usr/local/maven/apache-maven-3.2.2</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br><span class=\"line\">export MAVEN_OPTS=&quot;-Xmx2g -XX:ReservedCodeCacheSize=512m&quot;</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">mvn -v</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Apache Maven 3.6.2</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">exit</span><br><span class=\"line\">mvn -v</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Apache Maven 3.2.2</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd /Users/xdx/Workspace/SparkProjects</span><br><span class=\"line\">cd spark-1.2.0</span><br><span class=\"line\">mvn -T 5 -DskipTests clean package</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Reactor Summary:</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] Spark Project Parent POM ........................... SUCCESS [  3.898 s]</span><br><span class=\"line\">[INFO] Spark Project Networking ........................... SUCCESS [ 10.270 s]</span><br><span class=\"line\">[INFO] Spark Project Shuffle Streaming Service ............ SUCCESS [  8.470 s]</span><br><span class=\"line\">[INFO] Spark Project Core ................................. SUCCESS [02:48 min]</span><br><span class=\"line\">[INFO] Spark Project Bagel ................................ SUCCESS [ 44.801 s]</span><br><span class=\"line\">[INFO] Spark Project GraphX ............................... SUCCESS [01:36 min]</span><br><span class=\"line\">[INFO] Spark Project Streaming ............................ SUCCESS [02:07 min]</span><br><span class=\"line\">[INFO] Spark Project Catalyst ............................. SUCCESS [02:16 min]</span><br><span class=\"line\">[INFO] Spark Project SQL .................................. SUCCESS [01:14 min]</span><br><span class=\"line\">[INFO] Spark Project ML Library ........................... SUCCESS [01:31 min]</span><br><span class=\"line\">[INFO] Spark Project Tools ................................ SUCCESS [ 29.564 s]</span><br><span class=\"line\">[INFO] Spark Project Hive ................................. SUCCESS [01:31 min]</span><br><span class=\"line\">[INFO] Spark Project REPL ................................. SUCCESS [ 39.208 s]</span><br><span class=\"line\">[INFO] Spark Project Assembly ............................. SUCCESS [ 35.906 s]</span><br><span class=\"line\">[INFO] Spark Project External Twitter ..................... SUCCESS [ 44.000 s]</span><br><span class=\"line\">[INFO] Spark Project External Flume Sink .................. SUCCESS [ 22.857 s]</span><br><span class=\"line\">[INFO] Spark Project External Flume ....................... SUCCESS [ 58.495 s]</span><br><span class=\"line\">[INFO] Spark Project External MQTT ........................ SUCCESS [ 40.438 s]</span><br><span class=\"line\">[INFO] Spark Project External ZeroMQ ...................... SUCCESS [ 46.336 s]</span><br><span class=\"line\">[INFO] Spark Project External Kafka ....................... SUCCESS [ 36.279 s]</span><br><span class=\"line\">[INFO] Spark Project Examples ............................. SUCCESS [01:13 min]</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 10:00 min (Wall Clock)</span><br><span class=\"line\">[INFO] Finished at: 2019-09-15T21:41:11+08:00</span><br><span class=\"line\">[INFO] Final Memory: 64M/1263M</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Idea调试JavaWordCount\"><a href=\"#Idea调试JavaWordCount\" class=\"headerlink\" title=\"Idea调试JavaWordCount\"></a>Idea调试JavaWordCount</h2><ul>\n<li>JavaWordCount -&gt; Edit Configurations -&gt; Run&#x2F;Debug Configurations</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Input:</span><br><span class=\"line\">VM options: -Dspark.master=local</span><br><span class=\"line\">Program arguments: README.md</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>View -&gt; Tool Windows -&gt; Maven -&gt; Spark Project External Flume Sink -&gt; Generate Sources and Update Folders</p>\n</li>\n<li><p>View -&gt; Tool Windows -&gt; Maven -&gt; Spark Project Hive -&gt; Generate Sources and Update Folders</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Error: A JNI error has occurred, please check your installation and try again</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/apache/spark/api/java/function/FlatMapFunction</span><br><span class=\"line\">\tat java.lang.Class.getDeclaredMethods0(Native Method)</span><br><span class=\"line\">\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2701)</span><br><span class=\"line\">\tat java.lang.Class.privateGetMethodRecursive(Class.java:3048)</span><br><span class=\"line\">\tat java.lang.Class.getMethod0(Class.java:3018)</span><br><span class=\"line\">\tat java.lang.Class.getMethod(Class.java:1784)</span><br><span class=\"line\">\tat sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)</span><br><span class=\"line\">\tat sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)</span><br><span class=\"line\">Caused by: java.lang.ClassNotFoundException: org.apache.spark.api.java.function.FlatMapFunction</span><br><span class=\"line\">\tat java.net.URLClassLoader.findClass(URLClassLoader.java:382)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class=\"line\">\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class=\"line\">\t... 7 more</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: pom.xml</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.SecurityException: class &quot;javax.servlet.FilterRegistration&quot;&#x27;s signer information does not match signer information of other classes in the same package</span><br><span class=\"line\">\tat java.lang.ClassLoader.checkCerts(ClassLoader.java:898)</span><br><span class=\"line\">\tat java.lang.ClassLoader.preDefineClass(ClassLoader.java:668)</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass(ClassLoader.java:761)</span><br><span class=\"line\">\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)</span><br><span class=\"line\">\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:468)</span><br><span class=\"line\">\tat java.net.URLClassLoader.access$100(URLClassLoader.java:74)</span><br><span class=\"line\">\tat java.net.URLClassLoader$1.run(URLClassLoader.java:369)</span><br><span class=\"line\">\tat java.net.URLClassLoader$1.run(URLClassLoader.java:363)</span><br><span class=\"line\">\tat java.security.AccessController.doPrivileged(Native Method)</span><br><span class=\"line\">\tat java.net.URLClassLoader.findClass(URLClassLoader.java:362)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class=\"line\">\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class=\"line\">\tat org.eclipse.jetty.servlet.ServletContextHandler.&lt;init&gt;(ServletContextHandler.java:136)</span><br><span class=\"line\">\tat org.eclipse.jetty.servlet.ServletContextHandler.&lt;init&gt;(ServletContextHandler.java:129)</span><br><span class=\"line\">\tat org.eclipse.jetty.servlet.ServletContextHandler.&lt;init&gt;(ServletContextHandler.java:98)</span><br><span class=\"line\">\tat org.apache.spark.ui.JettyUtils$.createServletHandler(JettyUtils.scala:96)</span><br><span class=\"line\">\tat org.apache.spark.ui.JettyUtils$.createServletHandler(JettyUtils.scala:87)</span><br><span class=\"line\">\tat org.apache.spark.ui.WebUI.attachPage(WebUI.scala:67)</span><br><span class=\"line\">\tat org.apache.spark.ui.WebUI$$anonfun$attachTab$1.apply(WebUI.scala:60)</span><br><span class=\"line\">\tat org.apache.spark.ui.WebUI$$anonfun$attachTab$1.apply(WebUI.scala:60)</span><br><span class=\"line\">\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)</span><br><span class=\"line\">\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)</span><br><span class=\"line\">\tat org.apache.spark.ui.WebUI.attachTab(WebUI.scala:60)</span><br><span class=\"line\">\tat org.apache.spark.ui.SparkUI.initialize(SparkUI.scala:50)</span><br><span class=\"line\">\tat org.apache.spark.ui.SparkUI.&lt;init&gt;(SparkUI.scala:63)</span><br><span class=\"line\">\tat org.apache.spark.ui.SparkUI$.create(SparkUI.scala:153)</span><br><span class=\"line\">\tat org.apache.spark.ui.SparkUI$.createLiveUI(SparkUI.scala:108)</span><br><span class=\"line\">\tat org.apache.spark.SparkContext.&lt;init&gt;(SparkContext.scala:260)</span><br><span class=\"line\">\tat org.apache.spark.api.java.JavaSparkContext.&lt;init&gt;(JavaSparkContext.scala:61)</span><br><span class=\"line\">\tat org.apache.spark.examples.JavaWordCount.main(JavaWordCount.java:44)</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Maven Helper</p>\n</li>\n<li><p>SonarLint</p>\n</li>\n<li><p>IDEA Mind Map</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># MAVEN</span><br><span class=\"line\">export MAVEN_HOME=/usr/local/maven/apache-maven-3.6.2</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br><span class=\"line\">export MAVEN_OPTS=&quot;-Xmx2g -XX:ReservedCodeCacheSize=512m&quot;</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">exit</span><br><span class=\"line\">cd /Users/xdx/Workspace/SparkProjects</span><br><span class=\"line\">wget http://archive.apache.org/dist/spark/spark-2.4.4/spark-2.4.4.tgz</span><br><span class=\"line\">tar -zxvf spark-2.4.4.tgz</span><br><span class=\"line\">cd spark-2.4.4</span><br><span class=\"line\">mvn -T 5 -DskipTests clean package</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Reactor Summary for Spark Project Parent POM 2.4.4:</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] Spark Project Parent POM ........................... SUCCESS [01:54 min]</span><br><span class=\"line\">[INFO] Spark Project Tags ................................. SUCCESS [ 28.305 s]</span><br><span class=\"line\">[INFO] Spark Project Sketch ............................... SUCCESS [ 11.713 s]</span><br><span class=\"line\">[INFO] Spark Project Local DB ............................. SUCCESS [  6.649 s]</span><br><span class=\"line\">[INFO] Spark Project Networking ........................... SUCCESS [01:27 min]</span><br><span class=\"line\">[INFO] Spark Project Shuffle Streaming Service ............ SUCCESS [  3.910 s]</span><br><span class=\"line\">[INFO] Spark Project Unsafe ............................... SUCCESS [02:36 min]</span><br><span class=\"line\">[INFO] Spark Project Launcher ............................. SUCCESS [01:20 min]</span><br><span class=\"line\">[INFO] Spark Project Core ................................. SUCCESS [12:41 min]</span><br><span class=\"line\">[INFO] Spark Project ML Local Library ..................... SUCCESS [02:38 min]</span><br><span class=\"line\">[INFO] Spark Project GraphX ............................... SUCCESS [29:15 min]</span><br><span class=\"line\">[INFO] Spark Project Streaming ............................ SUCCESS [30:22 min]</span><br><span class=\"line\">[INFO] Spark Project Catalyst ............................. SUCCESS [31:43 min]</span><br><span class=\"line\">[INFO] Spark Project SQL .................................. SUCCESS [49:35 min]</span><br><span class=\"line\">[INFO] Spark Project ML Library ........................... SUCCESS [03:48 min]</span><br><span class=\"line\">[INFO] Spark Project Tools ................................ SUCCESS [ 56.221 s]</span><br><span class=\"line\">[INFO] Spark Project Hive ................................. SUCCESS [02:31 min]</span><br><span class=\"line\">[INFO] Spark Project REPL ................................. SUCCESS [ 17.349 s]</span><br><span class=\"line\">[INFO] Spark Project Assembly ............................. SUCCESS [  2.984 s]</span><br><span class=\"line\">[INFO] Spark Integration for Kafka 0.10 ................... SUCCESS [20:45 min]</span><br><span class=\"line\">[INFO] Kafka 0.10+ Source for Structured Streaming ........ SUCCESS [01:16 min]</span><br><span class=\"line\">[INFO] Spark Project Examples ............................. SUCCESS [ 57.738 s]</span><br><span class=\"line\">[INFO] Spark Integration for Kafka 0.10 Assembly .......... SUCCESS [  5.975 s]</span><br><span class=\"line\">[INFO] Spark Avro ......................................... SUCCESS [ 59.228 s]</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  01:43 h (Wall Clock)</span><br><span class=\"line\">[INFO] Finished at: 2019-09-16T23:55:40+08:00</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>JavaWordCount -&gt; Create ‘JavaWordCount.main()’ -&gt; Run&#x2F;Debug Configurations</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Input:</span><br><span class=\"line\">VM options: -Dspark.master=local</span><br><span class=\"line\">Program arguments: README.md</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<p>-&gt; Run ‘JavaWordCount.main()’</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Spark源码阅读环境搭建</p>\n<h2 id=\"Maven安装\"><a href=\"#Maven安装\" class=\"headerlink\" title=\"Maven安装\"></a>Maven安装</h2><ul>\n<li><a href=\"http://maven.apache.org/index.html\">Maven</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /Users/xdx/Workspace/Softwares</span><br><span class=\"line\">wget http://archive.apache.org/dist/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz</span><br><span class=\"line\">sudo mkdir /usr/local/maven</span><br><span class=\"line\">sudo tar -zxvf apache-maven-3.6.2-bin.tar.gz -C /usr/local/maven</span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># MAVEN</span><br><span class=\"line\">export MAVEN_HOME=/usr/local/maven/apache-maven-3.6.2</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br><span class=\"line\">export MAVEN_OPTS=&quot;-Xmx2g -XX:ReservedCodeCacheSize=512m&quot;</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">mvn -v</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Apache Maven 3.6.2</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Spark源码编译\"><a href=\"#Spark源码编译\" class=\"headerlink\" title=\"Spark源码编译\"></a>Spark源码编译</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /Users/xdx/Workspace/SparkProjects</span><br><span class=\"line\">wget http://archive.apache.org/dist/spark/spark-1.2.0/spark-1.2.0.tgz</span><br><span class=\"line\">tar -zxvf spark-1.2.0.tgz</span><br><span class=\"line\">cd spark-1.2.0</span><br><span class=\"line\">mvn -T 5 -DskipTests clean package</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">[ERROR] Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile (scala-compile-first) on project spark-streaming-flume_2.10: Execution scala-compile-first of goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile failed.: CompileFailed -&gt; [Help 1]</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class=\"line\">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class=\"line\">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] After correcting the problems, you can resume the build with the command</span><br><span class=\"line\">[ERROR]   mvn &lt;args&gt; -rf :spark-streaming-flume_2.10</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">vim pom.xml</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">        &lt;!-- Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile --&gt;</span><br><span class=\"line\">        &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class=\"line\">      &lt;/dependency&gt;</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">mvn -T 5 -DskipTests clean package</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">[ERROR] Failed to execute goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile (scala-compile-first) on project spark-streaming-flume_2.10: Execution scala-compile-first of goal net.alchim31.maven:scala-maven-plugin:3.2.0:compile failed.: CompileFailed -&gt; [Help 1]</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class=\"line\">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class=\"line\">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] After correcting the problems, you can resume the build with the command</span><br><span class=\"line\">[ERROR]   mvn &lt;args&gt; -rf :spark-streaming-flume_2.10</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd /Users/xdx/Workspace/Softwares</span><br><span class=\"line\">wget http://archive.apache.org/dist/maven/maven-3/3.2.2/binaries/apache-maven-3.2.2-bin.tar.gz</span><br><span class=\"line\">sudo tar -zxvf apache-maven-3.2.2-bin.tar.gz -C /usr/local/maven</span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># MAVEN</span><br><span class=\"line\">export MAVEN_HOME=/usr/local/maven/apache-maven-3.2.2</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br><span class=\"line\">export MAVEN_OPTS=&quot;-Xmx2g -XX:ReservedCodeCacheSize=512m&quot;</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">mvn -v</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Apache Maven 3.6.2</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">exit</span><br><span class=\"line\">mvn -v</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Apache Maven 3.2.2</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd /Users/xdx/Workspace/SparkProjects</span><br><span class=\"line\">cd spark-1.2.0</span><br><span class=\"line\">mvn -T 5 -DskipTests clean package</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Reactor Summary:</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] Spark Project Parent POM ........................... SUCCESS [  3.898 s]</span><br><span class=\"line\">[INFO] Spark Project Networking ........................... SUCCESS [ 10.270 s]</span><br><span class=\"line\">[INFO] Spark Project Shuffle Streaming Service ............ SUCCESS [  8.470 s]</span><br><span class=\"line\">[INFO] Spark Project Core ................................. SUCCESS [02:48 min]</span><br><span class=\"line\">[INFO] Spark Project Bagel ................................ SUCCESS [ 44.801 s]</span><br><span class=\"line\">[INFO] Spark Project GraphX ............................... SUCCESS [01:36 min]</span><br><span class=\"line\">[INFO] Spark Project Streaming ............................ SUCCESS [02:07 min]</span><br><span class=\"line\">[INFO] Spark Project Catalyst ............................. SUCCESS [02:16 min]</span><br><span class=\"line\">[INFO] Spark Project SQL .................................. SUCCESS [01:14 min]</span><br><span class=\"line\">[INFO] Spark Project ML Library ........................... SUCCESS [01:31 min]</span><br><span class=\"line\">[INFO] Spark Project Tools ................................ SUCCESS [ 29.564 s]</span><br><span class=\"line\">[INFO] Spark Project Hive ................................. SUCCESS [01:31 min]</span><br><span class=\"line\">[INFO] Spark Project REPL ................................. SUCCESS [ 39.208 s]</span><br><span class=\"line\">[INFO] Spark Project Assembly ............................. SUCCESS [ 35.906 s]</span><br><span class=\"line\">[INFO] Spark Project External Twitter ..................... SUCCESS [ 44.000 s]</span><br><span class=\"line\">[INFO] Spark Project External Flume Sink .................. SUCCESS [ 22.857 s]</span><br><span class=\"line\">[INFO] Spark Project External Flume ....................... SUCCESS [ 58.495 s]</span><br><span class=\"line\">[INFO] Spark Project External MQTT ........................ SUCCESS [ 40.438 s]</span><br><span class=\"line\">[INFO] Spark Project External ZeroMQ ...................... SUCCESS [ 46.336 s]</span><br><span class=\"line\">[INFO] Spark Project External Kafka ....................... SUCCESS [ 36.279 s]</span><br><span class=\"line\">[INFO] Spark Project Examples ............................. SUCCESS [01:13 min]</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 10:00 min (Wall Clock)</span><br><span class=\"line\">[INFO] Finished at: 2019-09-15T21:41:11+08:00</span><br><span class=\"line\">[INFO] Final Memory: 64M/1263M</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Idea调试JavaWordCount\"><a href=\"#Idea调试JavaWordCount\" class=\"headerlink\" title=\"Idea调试JavaWordCount\"></a>Idea调试JavaWordCount</h2><ul>\n<li>JavaWordCount -&gt; Edit Configurations -&gt; Run&#x2F;Debug Configurations</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Input:</span><br><span class=\"line\">VM options: -Dspark.master=local</span><br><span class=\"line\">Program arguments: README.md</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>View -&gt; Tool Windows -&gt; Maven -&gt; Spark Project External Flume Sink -&gt; Generate Sources and Update Folders</p>\n</li>\n<li><p>View -&gt; Tool Windows -&gt; Maven -&gt; Spark Project Hive -&gt; Generate Sources and Update Folders</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Error: A JNI error has occurred, please check your installation and try again</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/apache/spark/api/java/function/FlatMapFunction</span><br><span class=\"line\">\tat java.lang.Class.getDeclaredMethods0(Native Method)</span><br><span class=\"line\">\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2701)</span><br><span class=\"line\">\tat java.lang.Class.privateGetMethodRecursive(Class.java:3048)</span><br><span class=\"line\">\tat java.lang.Class.getMethod0(Class.java:3018)</span><br><span class=\"line\">\tat java.lang.Class.getMethod(Class.java:1784)</span><br><span class=\"line\">\tat sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)</span><br><span class=\"line\">\tat sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)</span><br><span class=\"line\">Caused by: java.lang.ClassNotFoundException: org.apache.spark.api.java.function.FlatMapFunction</span><br><span class=\"line\">\tat java.net.URLClassLoader.findClass(URLClassLoader.java:382)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class=\"line\">\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class=\"line\">\t... 7 more</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//: pom.xml</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.SecurityException: class &quot;javax.servlet.FilterRegistration&quot;&#x27;s signer information does not match signer information of other classes in the same package</span><br><span class=\"line\">\tat java.lang.ClassLoader.checkCerts(ClassLoader.java:898)</span><br><span class=\"line\">\tat java.lang.ClassLoader.preDefineClass(ClassLoader.java:668)</span><br><span class=\"line\">\tat java.lang.ClassLoader.defineClass(ClassLoader.java:761)</span><br><span class=\"line\">\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)</span><br><span class=\"line\">\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:468)</span><br><span class=\"line\">\tat java.net.URLClassLoader.access$100(URLClassLoader.java:74)</span><br><span class=\"line\">\tat java.net.URLClassLoader$1.run(URLClassLoader.java:369)</span><br><span class=\"line\">\tat java.net.URLClassLoader$1.run(URLClassLoader.java:363)</span><br><span class=\"line\">\tat java.security.AccessController.doPrivileged(Native Method)</span><br><span class=\"line\">\tat java.net.URLClassLoader.findClass(URLClassLoader.java:362)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class=\"line\">\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)</span><br><span class=\"line\">\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class=\"line\">\tat org.eclipse.jetty.servlet.ServletContextHandler.&lt;init&gt;(ServletContextHandler.java:136)</span><br><span class=\"line\">\tat org.eclipse.jetty.servlet.ServletContextHandler.&lt;init&gt;(ServletContextHandler.java:129)</span><br><span class=\"line\">\tat org.eclipse.jetty.servlet.ServletContextHandler.&lt;init&gt;(ServletContextHandler.java:98)</span><br><span class=\"line\">\tat org.apache.spark.ui.JettyUtils$.createServletHandler(JettyUtils.scala:96)</span><br><span class=\"line\">\tat org.apache.spark.ui.JettyUtils$.createServletHandler(JettyUtils.scala:87)</span><br><span class=\"line\">\tat org.apache.spark.ui.WebUI.attachPage(WebUI.scala:67)</span><br><span class=\"line\">\tat org.apache.spark.ui.WebUI$$anonfun$attachTab$1.apply(WebUI.scala:60)</span><br><span class=\"line\">\tat org.apache.spark.ui.WebUI$$anonfun$attachTab$1.apply(WebUI.scala:60)</span><br><span class=\"line\">\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)</span><br><span class=\"line\">\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)</span><br><span class=\"line\">\tat org.apache.spark.ui.WebUI.attachTab(WebUI.scala:60)</span><br><span class=\"line\">\tat org.apache.spark.ui.SparkUI.initialize(SparkUI.scala:50)</span><br><span class=\"line\">\tat org.apache.spark.ui.SparkUI.&lt;init&gt;(SparkUI.scala:63)</span><br><span class=\"line\">\tat org.apache.spark.ui.SparkUI$.create(SparkUI.scala:153)</span><br><span class=\"line\">\tat org.apache.spark.ui.SparkUI$.createLiveUI(SparkUI.scala:108)</span><br><span class=\"line\">\tat org.apache.spark.SparkContext.&lt;init&gt;(SparkContext.scala:260)</span><br><span class=\"line\">\tat org.apache.spark.api.java.JavaSparkContext.&lt;init&gt;(JavaSparkContext.scala:61)</span><br><span class=\"line\">\tat org.apache.spark.examples.JavaWordCount.main(JavaWordCount.java:44)</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Maven Helper</p>\n</li>\n<li><p>SonarLint</p>\n</li>\n<li><p>IDEA Mind Map</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># MAVEN</span><br><span class=\"line\">export MAVEN_HOME=/usr/local/maven/apache-maven-3.6.2</span><br><span class=\"line\">export PATH=$PATH:$MAVEN_HOME/bin</span><br><span class=\"line\">export MAVEN_OPTS=&quot;-Xmx2g -XX:ReservedCodeCacheSize=512m&quot;</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">exit</span><br><span class=\"line\">cd /Users/xdx/Workspace/SparkProjects</span><br><span class=\"line\">wget http://archive.apache.org/dist/spark/spark-2.4.4/spark-2.4.4.tgz</span><br><span class=\"line\">tar -zxvf spark-2.4.4.tgz</span><br><span class=\"line\">cd spark-2.4.4</span><br><span class=\"line\">mvn -T 5 -DskipTests clean package</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Reactor Summary for Spark Project Parent POM 2.4.4:</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] Spark Project Parent POM ........................... SUCCESS [01:54 min]</span><br><span class=\"line\">[INFO] Spark Project Tags ................................. SUCCESS [ 28.305 s]</span><br><span class=\"line\">[INFO] Spark Project Sketch ............................... SUCCESS [ 11.713 s]</span><br><span class=\"line\">[INFO] Spark Project Local DB ............................. SUCCESS [  6.649 s]</span><br><span class=\"line\">[INFO] Spark Project Networking ........................... SUCCESS [01:27 min]</span><br><span class=\"line\">[INFO] Spark Project Shuffle Streaming Service ............ SUCCESS [  3.910 s]</span><br><span class=\"line\">[INFO] Spark Project Unsafe ............................... SUCCESS [02:36 min]</span><br><span class=\"line\">[INFO] Spark Project Launcher ............................. SUCCESS [01:20 min]</span><br><span class=\"line\">[INFO] Spark Project Core ................................. SUCCESS [12:41 min]</span><br><span class=\"line\">[INFO] Spark Project ML Local Library ..................... SUCCESS [02:38 min]</span><br><span class=\"line\">[INFO] Spark Project GraphX ............................... SUCCESS [29:15 min]</span><br><span class=\"line\">[INFO] Spark Project Streaming ............................ SUCCESS [30:22 min]</span><br><span class=\"line\">[INFO] Spark Project Catalyst ............................. SUCCESS [31:43 min]</span><br><span class=\"line\">[INFO] Spark Project SQL .................................. SUCCESS [49:35 min]</span><br><span class=\"line\">[INFO] Spark Project ML Library ........................... SUCCESS [03:48 min]</span><br><span class=\"line\">[INFO] Spark Project Tools ................................ SUCCESS [ 56.221 s]</span><br><span class=\"line\">[INFO] Spark Project Hive ................................. SUCCESS [02:31 min]</span><br><span class=\"line\">[INFO] Spark Project REPL ................................. SUCCESS [ 17.349 s]</span><br><span class=\"line\">[INFO] Spark Project Assembly ............................. SUCCESS [  2.984 s]</span><br><span class=\"line\">[INFO] Spark Integration for Kafka 0.10 ................... SUCCESS [20:45 min]</span><br><span class=\"line\">[INFO] Kafka 0.10+ Source for Structured Streaming ........ SUCCESS [01:16 min]</span><br><span class=\"line\">[INFO] Spark Project Examples ............................. SUCCESS [ 57.738 s]</span><br><span class=\"line\">[INFO] Spark Integration for Kafka 0.10 Assembly .......... SUCCESS [  5.975 s]</span><br><span class=\"line\">[INFO] Spark Avro ......................................... SUCCESS [ 59.228 s]</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  01:43 h (Wall Clock)</span><br><span class=\"line\">[INFO] Finished at: 2019-09-16T23:55:40+08:00</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>JavaWordCount -&gt; Create ‘JavaWordCount.main()’ -&gt; Run&#x2F;Debug Configurations</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Input:</span><br><span class=\"line\">VM options: -Dspark.master=local</span><br><span class=\"line\">Program arguments: README.md</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<p>-&gt; Run ‘JavaWordCount.main()’</p>\n"},{"title":"Hello World","date":"2019-08-31T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2019-09-01 00:00:00\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2023-09-10T12:05:02.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln2n3nww000oyuzqd8vcg68e","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"剑指Offer","date":"2023-09-12T08:26:00.000Z","_content":"\n[牛客网剑指Offer编程题](https://www.nowcoder.com/exam/oj/ta?page=1&tpId=13&type=13)\n\n## 二维数组中的查找\n题目描述\n\n> 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    # array 二维列表\n    def Find(self, target, array):\n        # write code here\n        if not array:\n            return False\n        else:\n            rows, cols = len(array), len(array[0])\n            r, c = 0, cols - 1\n            while r <= rows - 1 and c >= 0:\n                if array[r][c] == target:\n                    return True\n                elif array[r][c] < target:\n                    r += 1\n                else:\n                    c -= 1\n            else:\n                return False\n```\n\n## 替换空格\n题目描述\n\n> 请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    # s 源字符串\n    def replaceSpace(self, s):\n        # write code here\n        r = ''\n        for c in s:\n            if c != ' ':\n                r += c\n            else:\n                r += '%20'\n        return r\n```\n\n## 从尾到头打印链表\n题目描述\n\n> 输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # 返回从尾部到头部的列表值序列，例如[1,2,3]\n    def printListFromTailToHead(self, listNode):\n        # write code here\n        h = listNode\n        r = []\n        while h:\n            r.insert(0, h.val)\n            h = h.next\n        return r\n```\n\n## 重建二叉树\n题目描述\n\n> 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    # 返回构造的TreeNode根节点\n    def reConstructBinaryTree(self, pre, tin):\n        # write code here\n        if not pre:\n            return None\n        else:\n            value = pre[0]\n            root = TreeNode(value)\n            try:\n                rindex = tin.index(value)\n            except:\n                return None\n            left = self.reConstructBinaryTree(pre[1:rindex+1], tin[:rindex])\n            right = self.reConstructBinaryTree(pre[rindex+1:], tin[rindex+1:])\n            root.left, root.right = left, right\n            return root\n```\n\n## 用两个栈实现队列\n题目描述\n\n> 用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def __init__(self):\n        self.stack_first = []\n        self.stack_second = []\n    def push(self, node):\n        # write code here\n        self.stack_first.append(node)\n    def pop(self):\n        # return xx\n        if not self.stack_first and not self.stack_second:\n            return None\n        elif self.stack_second:\n            return self.stack_second.pop()\n        else:\n            while self.stack_first:\n                self.stack_second.append(self.stack_first.pop())\n            return self.stack_second.pop()\n```\n\n## 旋转数组的最小数字\n题目描述\n\n> 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def minNumberInRotateArray(self, rotateArray):\n        # write code here\n        if not rotateArray:\n            return 0\n        else:\n            left, right = 0, len(rotateArray) - 1\n            value = rotateArray[-1]\n            while left <= right:\n                mid = (left + right) / 2\n                if rotateArray[mid] > value:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            return rotateArray[left]\n```\n\n## 斐波那契数列\n题目描述\n\n> 大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。n<=39\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def Fibonacci(self, n):\n        # write code here\n        x, y = 0, 1\n        for _ in range(n):\n            x, y = y, x + y\n        return x\n```\n\n## 跳台阶\n题目描述\n\n>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def jumpFloor(self, number):\n        # write code here\n        x, y = 1, 1\n        for _ in range(number):\n            x, y = y, x + y\n        return x\n```\n\n## 变态跳台阶\n题目描述\n\n>  一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def jumpFloorII(self, number):\n        # write code here\n        return 1 << (number - 1)\n```\n\n## 矩形覆盖\n题目描述\n\n> 我们可以用21的小矩形横着或者竖着去覆盖更大的矩形。请问用n个21的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def rectCover(self, number):\n        # write code here\n        if number == 0:\n            return 0\n        else:\n            x, y = 1, 1\n            for _ in range(number):\n                x, y = y, x + y\n            return x\n```\n\n## 二进制中1的个数\n题目描述\n\n> 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def NumberOf1(self, n):\n        # write code here\n        return sum([(n>>i & 1) for i in range(32)])\n```\n\n## 数值的整数次方\n题目描述\n\n> 给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def Power(self, base, exponent):\n        # write code here\n        if exponent == 0:\n            return 1\n        elif exponent > 0:\n            if exponent & 1:\n                return base * self.Power(base, exponent/2) ** 2\n            else:\n                return self.Power(base, exponent/2) ** 2\n        else:\n            return 1.0 / self.Power(base, -exponent)\n```\n\n## 调整数组顺序使奇数位于偶数前面\n题目描述\n\n> 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def reOrderArray(self, array):\n        # write code here\n        odd, even = [], []\n        for a in array:\n            if a & 1:\n                odd.append(a)\n            else:\n                even.append(a)\n        return odd + even\n```\n\n## 链表中倒数第k个结点\n题目描述\n\n> 输入一个链表，输出该链表中倒数第k个结点。\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def FindKthToTail(self, head, k):\n        # write code here\n        if k <= 0:\n            return None\n        else:\n            p = head\n            q = head\n            while k and q:\n                q = q.next\n                k -= 1\n            if k > 0:\n                return None\n            else:\n                while q:\n                    p = p.next\n                    q = q.next\n                return p\n```\n\n## 反转链表\n题目描述\n\n> 输入一个链表，反转链表后，输出新链表的表头。\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution:\n    # 返回ListNode\n    def ReverseList(self, pHead):\n        # write code here\n        if not pHead:\n            return None\n        else:\n            q, r = pHead, pHead.next\n            q.next = None\n            while r:\n                p = q\n                q = r\n                r = r.next\n                q.next = p\n            return q\n```\n\n## 合并两个排序的链表\n题目描述\n\n> 输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution:\n    # 返回合并后列表\n    def Merge(self, pHead1, pHead2):\n        # write code here\n        if not pHead1 and not pHead2:\n            return None\n        else:\n            if not pHead1:\n                return pHead2\n            elif not pHead2:\n                return pHead1\n            else:\n                if pHead1.val <= pHead2.val:\n                    head = pHead1\n                    head.next = self.Merge(pHead1.next, pHead2)\n                else:\n                    head = pHead2\n                    head.next = self.Merge(pHead1, pHead2.next)\n                return head\n```\n\n## 树的子结构\n题目描述\n\n> 输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    def dfs(self, r1, r2):\n        if not r2:\n            return True\n        elif not r1:\n            return False\n        else:\n            if r1.val != r2.val:\n                return False\n            else:\n                return self.dfs(r1.left, r2.left) and self.dfs(r1.right, r2.right)\n    \n    def HasSubtree(self, pRoot1, pRoot2):\n        # write code here\n        if not pRoot1:\n            return False\n        elif not pRoot2:\n            return False\n        else:\n            return self.dfs(pRoot1, pRoot2) or self.HasSubtree(pRoot1.left, pRoot2) or self.HasSubtree(pRoot1.right, pRoot2)\n```\n\n## 二叉树的镜像\n题目描述\n\n> 操作给定的二叉树，将其变换为源二叉树的镜像。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    # 返回镜像树的根节点\n    def Mirror(self, root):\n        # write code here\n        if not root:\n            return None\n        else:\n            left = self.Mirror(root.left)\n            right = self.Mirror(root.right)\n            root.left, root.right = right, left\n            return root\n```\n\n## 顺时针打印矩阵\n题目描述\n\n> 输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    # matrix类型为二维列表，需要返回列表\n    def printMatrix(self, matrix):\n        # write code here\n        if not matrix:\n            return []\n        else:\n            res = []\n            rows, cols = len(matrix), len(matrix[0])\n            l, r, t, b = 0, cols - 1, 0, rows - 1\n            while l <= r and t <= b:\n                for i in range(l, r+1):\n                    res.append(matrix[t][i])\n                if t < b:\n                    for i in range(t+1, b+1):\n                        res.append(matrix[i][r])\n                    if r > l:\n                        for i in range(r-1, l-1, -1):\n                            res.append(matrix[b][i])\n                        if t < b - 1:\n                            for i in range(b-1, t, -1):\n                                res.append(matrix[i][l])\n                            l += 1\n                            r -= 1\n                            t += 1\n                            b -= 1\n                        else:\n                            break\n                    else:\n                        break\n                else:\n                    break\n            return res\n```\n\n## 包含min函数的栈\n题目描述\n\n> 定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def __init__(self):\n        self.stack_first = []\n        self.stack_second = []\n    def push(self, node):\n        # write code here\n        self.stack_first.append(node)\n        if not self.stack_second:\n            self.stack_second.append(node)\n        else:\n            value = self.stack_second[-1]\n            if node <= value:\n                self.stack_second.append(node)\n            else:\n                self.stack_second.append(value)\n    def pop(self):\n        # write code here\n        self.stack_first.pop()\n        self.stack_second.pop()\n    def top(self):\n        # write code here\n        return self.stack_first[-1]\n    def min(self):\n        # write code here\n        return self.stack_second[-1]\n```\n\n## 栈的压入、弹出序列\n题目描述\n\n> 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def IsPopOrder(self, pushV, popV):\n        # write code here\n        n = len(pushV)\n        if n == 0:\n            return False\n        else:\n            res = []\n            j = 0\n            for i in range(n):\n                res.append(pushV[i])\n                while j < n and res[-1] == popV[j]:\n                    res.pop()\n                    j += 1\n            if not res:\n                return True\n            else:\n                return False\n```\n\n## 从上往下打印二叉树\n题目描述\n\n> 从上往下打印出二叉树的每个节点，同层节点从左至右打印。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    # 返回从上到下每个节点值列表，例：[1,2,3]\n    def PrintFromTopToBottom(self, root):\n        # write code here\n        if not root:\n            return []\n        else:\n            res = []\n            q = [root]\n            while q:\n                v = q.pop(0)\n                res.append(v.val)\n                if v.left:\n                    q.append(v.left)\n                if v.right:\n                    q.append(v.right)\n            return res\n```\n\n## 二叉搜索树的后序遍历序列\n题目描述\n\n> 输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def VerifySquenceOfBST(self, sequence):\n        # write code here\n        if not sequence:\n            return False\n        else:\n            value = sequence[-1]\n            n = len(sequence)\n            i = 0\n            while i < n and sequence[i] < value:\n                i += 1\n            while i < n and sequence[i] > value:\n                i += 1\n            if i == n - 1:\n                return True\n            else:\n                return False\n```\n\n## 二叉树中和为某一值的路径\n题目描述\n\n> 输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    # 返回二维列表，内部每个列表表示找到的路径\n    def FindPath(self, root, expectNumber):\n        # write code here\n        if not root:\n            return []\n        else:\n            if root.val == expectNumber and not root.left and not root.right:\n                return [[root.val]]\n            else:\n                left = self.FindPath(root.left, expectNumber - root.val)\n                right = self.FindPath(root.right, expectNumber - root.val)\n                return [[root.val] + l for l in left if l] + [[root.val] + r for r in right if r]\n```\n\n## 复杂链表的复制\n题目描述\n\n> 输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）\n```\n# -*- coding:utf-8 -*-\n# class RandomListNode:\n#     def __init__(self, x):\n#         self.label = x\n#         self.next = None\n#         self.random = None\nclass Solution:\n    # 返回 RandomListNode\n    def Clone(self, pHead):\n        # write code here\n        if not pHead:\n            return None\n        else:\n            p = pHead\n            while p:\n                q = RandomListNode(p.label)\n                q.next = p.next\n                p.next = q\n                p = q.next\n                \n            p = pHead\n            while p:\n                q = p.next\n                if p.random:\n                    q.random = p.random.next\n                else:\n                    pass\n                p = q.next\n                \n            p = pHead\n            h = p.next\n            while p.next:\n                q = p.next\n                p.next = q.next\n                p = q\n            return h\n```\n\n## 二叉搜索树与双向链表\n题目描述\n\n> 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    def Convert(self, pRootOfTree):\n        root = pRootOfTree\n        if not root:\n            return None\n        else:\n            self.Convert(root.left)\n            left = root.left\n            if left:\n                while left.right:\n                    left = left.right\n                root.left, left.right = left, root\n                \n            self.Convert(root.right)\n            right = root.right\n            if right:\n                while right.left:\n                    right = right.left\n                root.right, right.left = right, root\n                \n            while root.left:\n                root = root.left\n                \n            return root\n```\n\n## 字符串的排列\n题目描述\n\n> 输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。\n```\n# -*- coding:utf-8 -*-\nimport itertools\nclass Solution:\n    def Permutation(self, ss):\n        # write code here\n        if not ss:\n            return []\n        else:\n            return sorted(list(set(map(''.join, itertools.permutations(ss)))))\n```\n\n## 数组中出现次数超过一半的数字\n题目描述\n\n> 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。\n```\nimport collections\n# -*- coding:utf-8 -*-\nclass Solution:\n    def MoreThanHalfNum_Solution(self, numbers):\n        # write code here\n        counter = collections.Counter(numbers)\n        for k, v in counter.items():\n            if v > len(numbers)/2:\n                return k\n        return 0\n```\n\n## 最小的K个数\n题目描述\n\n> 输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def GetLeastNumbers_Solution(self, tinput, k):\n        # write code here\n        if k <= 0 or k > len(tinput):\n            return []\n        else:\n            tinput.sort()\n            return tinput[:k]\n```\n\n## 连续子数组的最大和\n题目描述\n\n> HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def FindGreatestSumOfSubArray(self, array):\n        # write code here\n        n = len(array)\n        if n == 0:\n            return 0\n        else:\n            dp = [0] * n\n            dp[0] = array[0]\n            for i in range(1, n):\n                dp[i] = max(dp[i-1]+array[i], array[i])\n            return max(dp)\n```\n\n## 整数中1出现的次数（从1到n整数中1出现的次数）\n题目描述\n\n> 求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def NumberOf1Between1AndN_Solution(self, n):\n        # write code here\n        def nOf1(q):\n            index = 0\n            for i in str(q):\n                if i == '1':\n                    index += 1\n            return index\n        sum = 0\n        for q in range(1, n + 1):\n            sum += nOf1(q)\n        return sum\n```\n\n## 把数组排成最小的数\n题目描述\n\n> 输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def PrintMinNumber(self, numbers):\n        # write code here\n        def compare(x, y):\n            a = int(str(x) + str(y))\n            b = int(str(y) + str(x))\n            if a > b:\n                return 1\n            elif a < b:\n                return -1\n            else:\n                return 0\n            \n        numbers.sort(cmp=compare)\n        res = ''\n        for n in numbers:\n            res += str(n)\n        return res\n```\n\n## 丑数\n题目描述\n\n> 把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def GetUglyNumber_Solution(self, index):\n        # write code here\n        if index < 1:\n            return 0\n        UglyNum = [1]\n        indexTwo = 0\n        indexThree = 0\n        indexFive = 0\n        for i in range(index - 1):\n            NewUgly = min(UglyNum[indexTwo] * 2, UglyNum[indexThree] * 3, UglyNum[indexFive] * 5)\n            UglyNum.append(NewUgly)\n            if NewUgly % 2 == 0:\n                indexTwo += 1\n            if NewUgly % 3 == 0:\n                indexThree += 1\n            if NewUgly % 5 == 0:\n                indexFive += 1\n        return UglyNum[-1]\n```\n\n## 第一个只出现一次的字符位置\n题目描述\n\n> 在一个字符串(0<=字符串长度<=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.\n```\n# -*- coding:utf-8 -*-\nimport collections\nclass Solution:\n    def FirstNotRepeatingChar(self, s):\n        # write code here\n        if not s:\n            return -1\n        counter = collections.Counter(s)\n        for i, c in enumerate(s):\n            if counter[c] == 1:\n                return i\n```\n\n## 数组中的逆序对\n题目描述\n\n> 在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def InversePairsCore(self, data, copy, start, end):\n        if start == end:\n            return 0\n        else:\n            mid = (start + end) / 2\n            left = self.InversePairsCore(copy, data, start, mid)\n            right = self.InversePairsCore(copy, data, mid+1, end)\n            i, j = mid, end\n            count = 0\n            copyIndex = end\n            while i >= start and j >= mid + 1:\n                if data[i] > data[j]:\n                    count += j - mid\n                    copy[copyIndex] = data[i]\n                    copyIndex -= 1\n                    i -= 1\n                else:\n                    copy[copyIndex] = data[j]\n                    copyIndex -= 1\n                    j -= 1\n            while i >= start:\n                copy[copyIndex] = data[i]\n                copyIndex -= 1\n                i -= 1\n            while j >= mid + 1:\n                copy[copyIndex] = data[j]\n                copyIndex -= 1\n                j -= 1\n            return left + right + count\n                    \n    def InversePairs(self, data):\n        # write code here\n        return self.InversePairsCore(data[:], data[:], 0, len(data) - 1) % 1000000007\n```\n\n## 两个链表的第一个公共结点\n题目描述\n\n> 输入两个链表，找出它们的第一个公共结点。\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution:\n    def FindFirstCommonNode(self, pHead1, pHead2):\n        # write code here\n        s1 = []\n        s2 = []\n        p = pHead1\n        q = pHead2\n        while p:\n            s1.append(p)\n            p = p.next\n        while q:\n            s2.append(q)\n            q = q.next\n            \n        c = None\n        while s1 and s2:\n            if s1[-1] == s2[-1]:\n                c = s1.pop()\n                s2.pop()\n            else:\n                break\n        return c\n```\n\n## 数字在排序数组中出现的次数\n题目描述\n\n> 统计一个数字在排序数组中出现的次数。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def GetNumberOfK(self, data, k):\n        # write code here\n        left, right = 0, len(data) - 1\n        while left <= right:\n            mid = (left + right) / 2\n            if data[mid] < k:\n                left = mid + 1\n            else:\n                right = mid - 1\n        i = left\n        left, right = 0, len(data) - 1\n        while left <= right:\n            mid = (left + right) / 2\n            if data[mid] <= k:\n                left = mid + 1\n            else:\n                right = mid - 1\n        j = left\n        return j - i\n```\n\n## 二叉树的深度\n题目描述\n\n> 输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    def TreeDepth(self, pRoot):\n        # write code here\n        if not pRoot:\n            return 0\n        else:\n            return max(self.TreeDepth(pRoot.left), self.TreeDepth(pRoot.right)) + 1\n```\n\n## 平衡二叉树\n题目描述\n\n> 输入一棵二叉树，判断该二叉树是否是平衡二叉树。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    def depth(self, pRoot):\n        if not pRoot:\n            return 0\n        else:\n            return max(self.depth(pRoot.left), self.depth(pRoot.right)) + 1\n    def IsBalanced_Solution(self, pRoot):\n        # write code here\n        if not pRoot:\n            return True\n        else:\n            left = self.depth(pRoot.left)\n            right = self.depth(pRoot.right)\n            if left == right or abs(left - right) == 1:\n                return self.IsBalanced_Solution(pRoot.left) and self.IsBalanced_Solution(pRoot.right)\n            else:\n                return False\n```\n\n## 数组中只出现一次的数字\n题目描述\n\n> 一个整型数组里除了两个数字之外，其他的数字都出现了偶数次。请写程序找出这两个只出现一次的数字。\n```\n# -*- coding:utf-8 -*-\nimport collections\nclass Solution:\n    # 返回[a,b] 其中ab是出现一次的两个数字\n    def FindNumsAppearOnce(self, array):\n        # write code here\n        counter = collections.Counter(array)\n        res = []\n        for a in array:\n            if counter[a] == 1:\n                res.append(a)\n        return res\n```\n\n## 和为S的连续正数序列\n题目描述\n\n> 小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!\n```\nimport math\n# -*- coding:utf-8 -*-\nclass Solution:\n    def FindContinuousSequence(self, tsum):\n        # write code here\n        res = []\n        i, j = 2, int(math.sqrt(2*tsum))\n        for n in range(j, i-1, -1):\n            if n & 1 and tsum % n == 0:\n                r = []\n                m = tsum / n\n                for x in range(m - (n-1)/2, m + (n-1)/2 + 1):\n                    r.append(x)\n                res.append(r)\n            elif n & 1 == 0 and (tsum % n) * 2 == n:\n                r = []\n                m = ((2 * tsum) / n) / 2\n                for x in range(m-n/2+1, m+n/2 + 1):\n                    r.append(x)\n                res.append(r)\n        return res\n```\n\n## 和为S的两个数字\n题目描述\n\n> 输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def FindNumbersWithSum(self, array, tsum):\n        # write code here\n        d = {}\n        for i, a in enumerate(array):\n            d[a] = i\n        r = []\n        m = float('inf')\n        for v in d:\n            if (tsum-v) in d:\n                if v * (tsum-v) < m:\n                    m = v * (tsum-v)\n                    r = [v, tsum-v]\n        return r\n```\n\n## 左旋转字符串\n题目描述\n\n> 汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def LeftRotateString(self, s, n):\n        # write code here\n        if n <= 0:\n            return s\n        if not s:\n            return \"\"\n        n = n % len(s)\n        a = s[:n][::-1]\n        b = s[n:][::-1]\n        return (a + b)[::-1]\n```\n\n## 翻转单词顺序列\n题目描述\n\n> 牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def ReverseSentence(self, s):\n        # write code here\n        r = \"\"\n        i = 0\n        start = 0\n        count = 0\n        while i < len(s):\n            while i < len(s) and s[i] is not ' ':\n                count += 1\n                i += 1\n            r += s[start:start + count][::-1]\n            while i < len(s) and s[i] is ' ':\n                r += ' '\n                i += 1\n            start = i\n            count = 0\n        return r[::-1]\n```\n\n## 扑克牌顺子\n题目描述\n\n> LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)…他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def IsContinuous(self, numbers):\n        # write code here\n        if not numbers:\n            return False\n        else:\n            numbers.sort()\n            n = len(numbers)\n            i = 0\n            zeros = 0\n            while i < n:\n                if numbers[i] == 0:\n                    zeros += 1\n                i += 1\n            if zeros == n - 1:\n                return True\n            else:\n                i = zeros\n                while i < n - 1:\n                    gap = numbers[i + 1] - numbers[i] - 1\n                    if gap > zeros or gap < 0:\n                        return False\n                    else:\n                        zeros -= gap\n                    i += 1\n                return True\n```\n\n## 孩子们的游戏(圆圈中最后剩下的数)\n题目描述\n\n> 每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0…m-1报数….这样下去….直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)\n```\n# -*- coding:utf-8 -*-\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def LastRemaining_Solution(self, n, m):\n        # write code here\n        if n == 0:\n            return -1\n        h = ListNode(0)\n        p = h\n        for i in range(1, n):\n            p.next = ListNode(i)\n            p = p.next\n        p.next = h\n        while h != h.next:\n            for i in range(1, m):\n                p = p.next\n                h = h.next\n            h = h.next\n            p.next = h\n        return h.val\n```\n\n## 求1+2+3+…+n\n题目描述\n\n> 求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def __init__(self):\n        self.r = 0\n    def Sum_Solution(self, n):\n        # write code here\n        def recursive(n):\n            self.r += n\n            n -= 1\n            return (n>0) and recursive(n)\n        recursive(n)\n        return self.r\n```\n\n## 不用加减乘除做加法\n题目描述\n\n> 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def Add(self, num1, num2):\n        # write code here\n        return sum([num1, num2])\n```\n\n## 把字符串转换成整数\n题目描述\n\n> 将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def StrToInt(self, s):\n        # write code here\n        if not s:\n            return 0\n        if not s[0].isdigit() and s[0] is not '+' and s[0] is not '-':\n            return 0\n        if s[0] is '+' and len(s) == 1 or s[0] is '-' and len(s) == 1:\n            return 0\n        for i in range(1, len(s)):\n            if not s[i].isdigit():\n                return 0\n        if s[0] == '-':\n            return -int(s[1:])\n        elif s[0] == '+':\n            return int(s[1:])\n        else:\n            return int(s)\n```\n\n## 数组中重复的数字\n题目描述\n\n> 在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。\n```\n# -*- coding:utf-8 -*-\nimport collections\nclass Solution:\n    # 这里要特别注意~找到任意重复的一个值并赋值到duplication[0]\n    # 函数返回True/False\n    def duplicate(self, numbers, duplication):\n        # write code here\n        if not numbers:\n            return False\n        else:\n            counter = collections.Counter(numbers)\n            for n in numbers:\n                if counter[n] != 1:\n                    duplication[0] = n\n                    return True\n            return False\n```\n\n## 构建乘积数组\n题目描述\n\n> 给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]=A[0]A[1]…A[i-1]A[i+1]…A[n-1]。不能使用除法。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def multiply(self, A):\n        # write code here\n        if not A:\n            return []\n        else:\n            n = len(A)\n            B = [0] * n\n            B[0] = 1\n            for i in range(1, n):\n                B[i] = B[i - 1] * A[i - 1]\n            temp = 1\n            for j in range(n - 2, -1, -1):\n                temp *= A[j + 1]\n                B[j] *= temp\n            return B\n```\n\n## 正则表达式匹配\n题目描述\n\n> 请实现一个函数用来匹配包括’.’和’‘的正则表达式。模式中的字符’.’表示任意一个字符，而’‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”abaca”匹配，但是与”aa.a”和”ab*a”均不匹配\n```\nclass Solution(object):\n    def match(self, text, pattern):\n        if not pattern:\n            return not text\n        first_match = bool(text) and pattern[0] in {text[0], '.'}\n        if len(pattern) >= 2 and pattern[1] == '*':\n            return (self.match(text, pattern[2:]) or\n                    first_match and self.match(text[1:], pattern))\n        else:\n            return first_match and self.match(text[1:], pattern[1:])\n```\n\n## 表示数值的字符串\n题目描述\n\n> 请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    # s字符串\n    def isNumeric(self, s):\n        # write code here\n        try:\n            p = float(s)\n            return True\n        except:\n            return False\n```\n\n## 字符流中第一个不重复的字符\n题目描述\n\n> 请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是”g”。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是”l”。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def __init__(self):\n        self.buffer = ''\n    # 返回对应char\n    def FirstAppearingOnce(self):\n        # write code here\n        appear = [False for _ in range(256)]\n        for b in self.buffer:\n            if appear[ord(b)] is False:\n                appear[ord(b)] = True\n            else:\n                appear[ord(b)] = False\n        for b in self.buffer:\n            if appear[ord(b)] is True:\n                return b\n        return '#'\n\n    def Insert(self, char):\n        # write code here\n        self.buffer += char\n```\n\n## 链表中环的入口结点\n题目描述\n\n> 给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution:\n    def EntryNodeOfLoop(self, pHead):\n        # write code here\n        if not pHead or not pHead.next or not pHead.next.next:\n            return None\n        else:\n            slow = pHead.next\n            fast = pHead.next.next\n            while slow != fast:\n                if fast and fast.next:\n                    slow = slow.next\n                    fast = fast.next.next\n                else:\n                    return None\n            slow = pHead\n            while slow != fast:\n                slow = slow.next\n                fast = fast.next\n            return slow\n```\n\n## 删除链表中重复的结点\n题目描述\n\n> 在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1->2->3->3->4->4->5 处理后为 1->2->5\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution:\n    def deleteDuplication(self, pHead):\n        # write code here\n        p, q, r = None, pHead, None\n        while q:\n            if q.next and q.next.val == q.val:\n                r = q.next\n                while r.next and r.next.val == q.val:\n                    r = r.next\n                if q == pHead:\n                    pHead = r.next\n                else:\n                    p.next = r.next\n                q = r.next\n            else:\n                p = q\n                q = q.next\n        return pHead\n```\n\n## 二叉树的下一个结点\n题目描述\n\n> 给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。\n```\n# -*- coding:utf-8 -*-\n# class TreeLinkNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n#         self.next = None\nclass Solution:\n    def GetNext(self, pNode):\n        # write code here\n        if not pNode:\n            return None\n        else:\n            if pNode.right:\n                res = pNode.right\n                while res.left:\n                    res = res.left\n                return res\n            else:\n                parent = pNode.next\n                current = pNode\n                while parent and parent.left != current:\n                    current = parent\n                    parent = parent.next\n                return parent\n```\n\n## 对称的二叉树\n题目描述\n\n> 请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    def mirror(self, pRoot):\n        if not pRoot:\n            return None\n        else:\n            left = self.mirror(pRoot.left)\n            right = self.mirror(pRoot.right)\n            pRoot.left, pRoot.right = right, left\n            return pRoot\n        \n    def sample(self, r1, r2):\n        if not r1 and not r2:\n            return True\n        else:\n            return (r1 and r2) and (r1.val == r2.val) and self.sample(r1.left, r2.left) and self.sample(r1.right, r2.right)\n    \n    def isSymmetrical(self, pRoot):\n        # write code here\n        if not pRoot:\n            return True\n        else:\n            left, right = pRoot.left, pRoot.right\n            right = self.mirror(right)\n            return self.sample(left, right)\n```\n\n## 按之字形顺序打印二叉树\n题目描述\n\n> 请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    def Print(self, pRoot):\n        # write code here\n        if not pRoot:\n            return []\n        else:\n            res = []\n            s1, s2 = [pRoot], []\n            while s1 or s2:\n                if s1:\n                    r = []\n                    while s1:\n                        v = s1.pop()\n                        r.append(v.val)\n                        if v.left:\n                            s2.append(v.left)\n                        if v.right:\n                            s2.append(v.right)\n                    res.append(r)\n                if s2:\n                    r = []\n                    while s2:\n                        v = s2.pop()\n                        r.append(v.val)\n                        if v.right:\n                            s1.append(v.right)\n                        if v.left:\n                            s1.append(v.left)\n                    res.append(r)\n            return res\n```\n\n## 把二叉树打印成多行\n题目描述\n\n> 从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    # 返回二维列表[[1,2],[4,5]]\n    def Print(self, pRoot):\n        # write code here\n        if not pRoot:\n            return []\n        else:\n            res = []\n            q1, q2 = [pRoot], []\n            while q1 or q2:\n                if q1:\n                    r = []\n                    while q1:\n                        v = q1.pop(0)\n                        r.append(v.val)\n                        if v.left:\n                            q2.append(v.left)\n                        if v.right:\n                            q2.append(v.right)\n                    res.append(r)\n                if q2:\n                    r = []\n                    while q2:\n                        v = q2.pop(0)\n                        r.append(v.val)\n                        if v.left:\n                            q1.append(v.left)\n                        if v.right:\n                            q1.append(v.right)\n                    res.append(r)\n            return res\n```\n\n## 序列化二叉树\n题目描述\n\n> 请实现两个函数，分别用来序列化和反序列化二叉树\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    flag = -1\n    \n    def Serialize(self, root):\n        # write code here\n        if not root:\n            return '#'\n        else:\n            return str(root.val) + ',' + self.Serialize(root.left) + ',' + self.Serialize(root.right)\n\n    def Deserialize(self, s):\n        # write code here\n        self.flag += 1\n        if self.flag >= len(s):\n            return None\n        root = None\n        l = s.split(',')\n        if l[self.flag] != '#':\n            root = TreeNode(int(l[self.flag]))\n            root.left = self.Deserialize(s)\n            root.right = self.Deserialize(s)\n        return root\n```\n\n## 二叉搜索树的第k个结点\n题目描述\n\n> 给定一棵二叉搜索树，请找出其中的第k小的结点。例如， （5，3，7，2，4，6，8） 中，按结点数值大小顺序第三小结点的值为4。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    count = 0\n    # 返回对应节点TreeNode\n    def KthNode(self, pRoot, k):\n        # write code here\n        if not pRoot or k <= 0:\n            return None\n        else:\n            res = self.KthNode(pRoot.left, k)\n            if res:\n                return res\n            self.count += 1\n            if self.count == k:\n                return pRoot\n            res = self.KthNode(pRoot.right, k)\n            if res:\n                return res\n            return None\n```\n\n## 数据流中的中位数\n题目描述\n\n> 如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def __init__(self):\n        self.data=[]\n    def Insert(self, num):\n        # write code here\n        self.data.append(num)\n        self.data.sort()\n    def GetMedian(self, data):\n        # write code here\n        n = len(self.data)\n        if n % 2 == 0:\n            return (self.data[n/2] + self.data[n/2-1]) / 2.0\n        else:\n            return self.data[n/2]\n```\n\n## 滑动窗口的最大值\n题目描述\n\n> 给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def maxInWindows(self, num, size):\n        # write code here\n        if size <= 0:\n            return []\n        res = []\n        for i in xrange(0, len(num)-size+1):\n            res.append(max(num[i:i+size]))\n        return res\n```\n\n## 矩阵中的路径\n题目描述\n\n> 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。 例如 a b c e s f c s a d e e 这样的3 X 4 矩阵中包含一条字符串”bcced”的路径，但是矩阵中不包含”abcb”路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def hasPath(self, matrix, rows, cols, path):\n        # write code here\n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i*cols+j] == path[0]:\n                    if self.find(list(matrix), rows, cols, path[1:], i, j):\n                        return True\n        return False\n    def find(self, matrix, rows, cols, path, i, j):\n        if not path:\n            return True\n        matrix[i*cols+j] = '0'\n        if j+1 < cols and matrix[i*cols+j+1] == path[0]:\n            return self.find(matrix, rows, cols, path[1:], i, j+1)\n        elif j-1 >= 0 and matrix[i*cols+j-1] == path[0]:\n            return self.find(matrix, rows, cols, path[1:], i, j-1)\n        elif i+1 < rows and matrix[(i+1)*cols+j] == path[0]:\n            return self.find(matrix, rows, cols, path[1:], i+1, j)\n        elif i-1 >= 0 and matrix[(i-1)*cols+j] == path[0]:\n            return self.find(matrix, rows, cols, path[1:], i-1, j)\n        else:\n            return False\n```\n\n## 机器人的运动范围\n题目描述\n\n> 地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    result = 0\n    \n    def movingCount(self, threshold, rows, cols):\n        # write code here\n        record = [[True] * cols for _ in range(rows)]\n        \n        def compute_index_sum(number):\n            return sum(map(int, [_ for _ in str(number)]))\n        \n        def is_valid(i, j):\n            if 0 <= i < rows and 0 <= j < cols and record[i][j] and compute_index_sum(i) + compute_index_sum(j) <= threshold:\n                return True\n            else:\n                return False\n            \n        def dfs(i, j):\n            if is_valid(i, j):\n                record[i][j] = False\n                self.result += 1\n                dfs(i - 1, j)\n                dfs(i + 1, j)\n                dfs(i, j - 1)\n                dfs(i, j + 1)\n                \n        dfs(0, 0)\n        \n        return self.result\n```","source":"_posts/剑指Offer.md","raw":"---\ntitle: 剑指Offer\ndate: 2023-09-12 16:26:00\ntags: Algorithm\ncategories: Algorithm\n---\n\n[牛客网剑指Offer编程题](https://www.nowcoder.com/exam/oj/ta?page=1&tpId=13&type=13)\n\n## 二维数组中的查找\n题目描述\n\n> 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    # array 二维列表\n    def Find(self, target, array):\n        # write code here\n        if not array:\n            return False\n        else:\n            rows, cols = len(array), len(array[0])\n            r, c = 0, cols - 1\n            while r <= rows - 1 and c >= 0:\n                if array[r][c] == target:\n                    return True\n                elif array[r][c] < target:\n                    r += 1\n                else:\n                    c -= 1\n            else:\n                return False\n```\n\n## 替换空格\n题目描述\n\n> 请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    # s 源字符串\n    def replaceSpace(self, s):\n        # write code here\n        r = ''\n        for c in s:\n            if c != ' ':\n                r += c\n            else:\n                r += '%20'\n        return r\n```\n\n## 从尾到头打印链表\n题目描述\n\n> 输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    # 返回从尾部到头部的列表值序列，例如[1,2,3]\n    def printListFromTailToHead(self, listNode):\n        # write code here\n        h = listNode\n        r = []\n        while h:\n            r.insert(0, h.val)\n            h = h.next\n        return r\n```\n\n## 重建二叉树\n题目描述\n\n> 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    # 返回构造的TreeNode根节点\n    def reConstructBinaryTree(self, pre, tin):\n        # write code here\n        if not pre:\n            return None\n        else:\n            value = pre[0]\n            root = TreeNode(value)\n            try:\n                rindex = tin.index(value)\n            except:\n                return None\n            left = self.reConstructBinaryTree(pre[1:rindex+1], tin[:rindex])\n            right = self.reConstructBinaryTree(pre[rindex+1:], tin[rindex+1:])\n            root.left, root.right = left, right\n            return root\n```\n\n## 用两个栈实现队列\n题目描述\n\n> 用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def __init__(self):\n        self.stack_first = []\n        self.stack_second = []\n    def push(self, node):\n        # write code here\n        self.stack_first.append(node)\n    def pop(self):\n        # return xx\n        if not self.stack_first and not self.stack_second:\n            return None\n        elif self.stack_second:\n            return self.stack_second.pop()\n        else:\n            while self.stack_first:\n                self.stack_second.append(self.stack_first.pop())\n            return self.stack_second.pop()\n```\n\n## 旋转数组的最小数字\n题目描述\n\n> 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def minNumberInRotateArray(self, rotateArray):\n        # write code here\n        if not rotateArray:\n            return 0\n        else:\n            left, right = 0, len(rotateArray) - 1\n            value = rotateArray[-1]\n            while left <= right:\n                mid = (left + right) / 2\n                if rotateArray[mid] > value:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            return rotateArray[left]\n```\n\n## 斐波那契数列\n题目描述\n\n> 大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。n<=39\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def Fibonacci(self, n):\n        # write code here\n        x, y = 0, 1\n        for _ in range(n):\n            x, y = y, x + y\n        return x\n```\n\n## 跳台阶\n题目描述\n\n>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def jumpFloor(self, number):\n        # write code here\n        x, y = 1, 1\n        for _ in range(number):\n            x, y = y, x + y\n        return x\n```\n\n## 变态跳台阶\n题目描述\n\n>  一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def jumpFloorII(self, number):\n        # write code here\n        return 1 << (number - 1)\n```\n\n## 矩形覆盖\n题目描述\n\n> 我们可以用21的小矩形横着或者竖着去覆盖更大的矩形。请问用n个21的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def rectCover(self, number):\n        # write code here\n        if number == 0:\n            return 0\n        else:\n            x, y = 1, 1\n            for _ in range(number):\n                x, y = y, x + y\n            return x\n```\n\n## 二进制中1的个数\n题目描述\n\n> 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def NumberOf1(self, n):\n        # write code here\n        return sum([(n>>i & 1) for i in range(32)])\n```\n\n## 数值的整数次方\n题目描述\n\n> 给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def Power(self, base, exponent):\n        # write code here\n        if exponent == 0:\n            return 1\n        elif exponent > 0:\n            if exponent & 1:\n                return base * self.Power(base, exponent/2) ** 2\n            else:\n                return self.Power(base, exponent/2) ** 2\n        else:\n            return 1.0 / self.Power(base, -exponent)\n```\n\n## 调整数组顺序使奇数位于偶数前面\n题目描述\n\n> 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def reOrderArray(self, array):\n        # write code here\n        odd, even = [], []\n        for a in array:\n            if a & 1:\n                odd.append(a)\n            else:\n                even.append(a)\n        return odd + even\n```\n\n## 链表中倒数第k个结点\n题目描述\n\n> 输入一个链表，输出该链表中倒数第k个结点。\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def FindKthToTail(self, head, k):\n        # write code here\n        if k <= 0:\n            return None\n        else:\n            p = head\n            q = head\n            while k and q:\n                q = q.next\n                k -= 1\n            if k > 0:\n                return None\n            else:\n                while q:\n                    p = p.next\n                    q = q.next\n                return p\n```\n\n## 反转链表\n题目描述\n\n> 输入一个链表，反转链表后，输出新链表的表头。\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution:\n    # 返回ListNode\n    def ReverseList(self, pHead):\n        # write code here\n        if not pHead:\n            return None\n        else:\n            q, r = pHead, pHead.next\n            q.next = None\n            while r:\n                p = q\n                q = r\n                r = r.next\n                q.next = p\n            return q\n```\n\n## 合并两个排序的链表\n题目描述\n\n> 输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution:\n    # 返回合并后列表\n    def Merge(self, pHead1, pHead2):\n        # write code here\n        if not pHead1 and not pHead2:\n            return None\n        else:\n            if not pHead1:\n                return pHead2\n            elif not pHead2:\n                return pHead1\n            else:\n                if pHead1.val <= pHead2.val:\n                    head = pHead1\n                    head.next = self.Merge(pHead1.next, pHead2)\n                else:\n                    head = pHead2\n                    head.next = self.Merge(pHead1, pHead2.next)\n                return head\n```\n\n## 树的子结构\n题目描述\n\n> 输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    def dfs(self, r1, r2):\n        if not r2:\n            return True\n        elif not r1:\n            return False\n        else:\n            if r1.val != r2.val:\n                return False\n            else:\n                return self.dfs(r1.left, r2.left) and self.dfs(r1.right, r2.right)\n    \n    def HasSubtree(self, pRoot1, pRoot2):\n        # write code here\n        if not pRoot1:\n            return False\n        elif not pRoot2:\n            return False\n        else:\n            return self.dfs(pRoot1, pRoot2) or self.HasSubtree(pRoot1.left, pRoot2) or self.HasSubtree(pRoot1.right, pRoot2)\n```\n\n## 二叉树的镜像\n题目描述\n\n> 操作给定的二叉树，将其变换为源二叉树的镜像。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    # 返回镜像树的根节点\n    def Mirror(self, root):\n        # write code here\n        if not root:\n            return None\n        else:\n            left = self.Mirror(root.left)\n            right = self.Mirror(root.right)\n            root.left, root.right = right, left\n            return root\n```\n\n## 顺时针打印矩阵\n题目描述\n\n> 输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    # matrix类型为二维列表，需要返回列表\n    def printMatrix(self, matrix):\n        # write code here\n        if not matrix:\n            return []\n        else:\n            res = []\n            rows, cols = len(matrix), len(matrix[0])\n            l, r, t, b = 0, cols - 1, 0, rows - 1\n            while l <= r and t <= b:\n                for i in range(l, r+1):\n                    res.append(matrix[t][i])\n                if t < b:\n                    for i in range(t+1, b+1):\n                        res.append(matrix[i][r])\n                    if r > l:\n                        for i in range(r-1, l-1, -1):\n                            res.append(matrix[b][i])\n                        if t < b - 1:\n                            for i in range(b-1, t, -1):\n                                res.append(matrix[i][l])\n                            l += 1\n                            r -= 1\n                            t += 1\n                            b -= 1\n                        else:\n                            break\n                    else:\n                        break\n                else:\n                    break\n            return res\n```\n\n## 包含min函数的栈\n题目描述\n\n> 定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def __init__(self):\n        self.stack_first = []\n        self.stack_second = []\n    def push(self, node):\n        # write code here\n        self.stack_first.append(node)\n        if not self.stack_second:\n            self.stack_second.append(node)\n        else:\n            value = self.stack_second[-1]\n            if node <= value:\n                self.stack_second.append(node)\n            else:\n                self.stack_second.append(value)\n    def pop(self):\n        # write code here\n        self.stack_first.pop()\n        self.stack_second.pop()\n    def top(self):\n        # write code here\n        return self.stack_first[-1]\n    def min(self):\n        # write code here\n        return self.stack_second[-1]\n```\n\n## 栈的压入、弹出序列\n题目描述\n\n> 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def IsPopOrder(self, pushV, popV):\n        # write code here\n        n = len(pushV)\n        if n == 0:\n            return False\n        else:\n            res = []\n            j = 0\n            for i in range(n):\n                res.append(pushV[i])\n                while j < n and res[-1] == popV[j]:\n                    res.pop()\n                    j += 1\n            if not res:\n                return True\n            else:\n                return False\n```\n\n## 从上往下打印二叉树\n题目描述\n\n> 从上往下打印出二叉树的每个节点，同层节点从左至右打印。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    # 返回从上到下每个节点值列表，例：[1,2,3]\n    def PrintFromTopToBottom(self, root):\n        # write code here\n        if not root:\n            return []\n        else:\n            res = []\n            q = [root]\n            while q:\n                v = q.pop(0)\n                res.append(v.val)\n                if v.left:\n                    q.append(v.left)\n                if v.right:\n                    q.append(v.right)\n            return res\n```\n\n## 二叉搜索树的后序遍历序列\n题目描述\n\n> 输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def VerifySquenceOfBST(self, sequence):\n        # write code here\n        if not sequence:\n            return False\n        else:\n            value = sequence[-1]\n            n = len(sequence)\n            i = 0\n            while i < n and sequence[i] < value:\n                i += 1\n            while i < n and sequence[i] > value:\n                i += 1\n            if i == n - 1:\n                return True\n            else:\n                return False\n```\n\n## 二叉树中和为某一值的路径\n题目描述\n\n> 输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    # 返回二维列表，内部每个列表表示找到的路径\n    def FindPath(self, root, expectNumber):\n        # write code here\n        if not root:\n            return []\n        else:\n            if root.val == expectNumber and not root.left and not root.right:\n                return [[root.val]]\n            else:\n                left = self.FindPath(root.left, expectNumber - root.val)\n                right = self.FindPath(root.right, expectNumber - root.val)\n                return [[root.val] + l for l in left if l] + [[root.val] + r for r in right if r]\n```\n\n## 复杂链表的复制\n题目描述\n\n> 输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）\n```\n# -*- coding:utf-8 -*-\n# class RandomListNode:\n#     def __init__(self, x):\n#         self.label = x\n#         self.next = None\n#         self.random = None\nclass Solution:\n    # 返回 RandomListNode\n    def Clone(self, pHead):\n        # write code here\n        if not pHead:\n            return None\n        else:\n            p = pHead\n            while p:\n                q = RandomListNode(p.label)\n                q.next = p.next\n                p.next = q\n                p = q.next\n                \n            p = pHead\n            while p:\n                q = p.next\n                if p.random:\n                    q.random = p.random.next\n                else:\n                    pass\n                p = q.next\n                \n            p = pHead\n            h = p.next\n            while p.next:\n                q = p.next\n                p.next = q.next\n                p = q\n            return h\n```\n\n## 二叉搜索树与双向链表\n题目描述\n\n> 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    def Convert(self, pRootOfTree):\n        root = pRootOfTree\n        if not root:\n            return None\n        else:\n            self.Convert(root.left)\n            left = root.left\n            if left:\n                while left.right:\n                    left = left.right\n                root.left, left.right = left, root\n                \n            self.Convert(root.right)\n            right = root.right\n            if right:\n                while right.left:\n                    right = right.left\n                root.right, right.left = right, root\n                \n            while root.left:\n                root = root.left\n                \n            return root\n```\n\n## 字符串的排列\n题目描述\n\n> 输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。\n```\n# -*- coding:utf-8 -*-\nimport itertools\nclass Solution:\n    def Permutation(self, ss):\n        # write code here\n        if not ss:\n            return []\n        else:\n            return sorted(list(set(map(''.join, itertools.permutations(ss)))))\n```\n\n## 数组中出现次数超过一半的数字\n题目描述\n\n> 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。\n```\nimport collections\n# -*- coding:utf-8 -*-\nclass Solution:\n    def MoreThanHalfNum_Solution(self, numbers):\n        # write code here\n        counter = collections.Counter(numbers)\n        for k, v in counter.items():\n            if v > len(numbers)/2:\n                return k\n        return 0\n```\n\n## 最小的K个数\n题目描述\n\n> 输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def GetLeastNumbers_Solution(self, tinput, k):\n        # write code here\n        if k <= 0 or k > len(tinput):\n            return []\n        else:\n            tinput.sort()\n            return tinput[:k]\n```\n\n## 连续子数组的最大和\n题目描述\n\n> HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def FindGreatestSumOfSubArray(self, array):\n        # write code here\n        n = len(array)\n        if n == 0:\n            return 0\n        else:\n            dp = [0] * n\n            dp[0] = array[0]\n            for i in range(1, n):\n                dp[i] = max(dp[i-1]+array[i], array[i])\n            return max(dp)\n```\n\n## 整数中1出现的次数（从1到n整数中1出现的次数）\n题目描述\n\n> 求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def NumberOf1Between1AndN_Solution(self, n):\n        # write code here\n        def nOf1(q):\n            index = 0\n            for i in str(q):\n                if i == '1':\n                    index += 1\n            return index\n        sum = 0\n        for q in range(1, n + 1):\n            sum += nOf1(q)\n        return sum\n```\n\n## 把数组排成最小的数\n题目描述\n\n> 输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def PrintMinNumber(self, numbers):\n        # write code here\n        def compare(x, y):\n            a = int(str(x) + str(y))\n            b = int(str(y) + str(x))\n            if a > b:\n                return 1\n            elif a < b:\n                return -1\n            else:\n                return 0\n            \n        numbers.sort(cmp=compare)\n        res = ''\n        for n in numbers:\n            res += str(n)\n        return res\n```\n\n## 丑数\n题目描述\n\n> 把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def GetUglyNumber_Solution(self, index):\n        # write code here\n        if index < 1:\n            return 0\n        UglyNum = [1]\n        indexTwo = 0\n        indexThree = 0\n        indexFive = 0\n        for i in range(index - 1):\n            NewUgly = min(UglyNum[indexTwo] * 2, UglyNum[indexThree] * 3, UglyNum[indexFive] * 5)\n            UglyNum.append(NewUgly)\n            if NewUgly % 2 == 0:\n                indexTwo += 1\n            if NewUgly % 3 == 0:\n                indexThree += 1\n            if NewUgly % 5 == 0:\n                indexFive += 1\n        return UglyNum[-1]\n```\n\n## 第一个只出现一次的字符位置\n题目描述\n\n> 在一个字符串(0<=字符串长度<=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.\n```\n# -*- coding:utf-8 -*-\nimport collections\nclass Solution:\n    def FirstNotRepeatingChar(self, s):\n        # write code here\n        if not s:\n            return -1\n        counter = collections.Counter(s)\n        for i, c in enumerate(s):\n            if counter[c] == 1:\n                return i\n```\n\n## 数组中的逆序对\n题目描述\n\n> 在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def InversePairsCore(self, data, copy, start, end):\n        if start == end:\n            return 0\n        else:\n            mid = (start + end) / 2\n            left = self.InversePairsCore(copy, data, start, mid)\n            right = self.InversePairsCore(copy, data, mid+1, end)\n            i, j = mid, end\n            count = 0\n            copyIndex = end\n            while i >= start and j >= mid + 1:\n                if data[i] > data[j]:\n                    count += j - mid\n                    copy[copyIndex] = data[i]\n                    copyIndex -= 1\n                    i -= 1\n                else:\n                    copy[copyIndex] = data[j]\n                    copyIndex -= 1\n                    j -= 1\n            while i >= start:\n                copy[copyIndex] = data[i]\n                copyIndex -= 1\n                i -= 1\n            while j >= mid + 1:\n                copy[copyIndex] = data[j]\n                copyIndex -= 1\n                j -= 1\n            return left + right + count\n                    \n    def InversePairs(self, data):\n        # write code here\n        return self.InversePairsCore(data[:], data[:], 0, len(data) - 1) % 1000000007\n```\n\n## 两个链表的第一个公共结点\n题目描述\n\n> 输入两个链表，找出它们的第一个公共结点。\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution:\n    def FindFirstCommonNode(self, pHead1, pHead2):\n        # write code here\n        s1 = []\n        s2 = []\n        p = pHead1\n        q = pHead2\n        while p:\n            s1.append(p)\n            p = p.next\n        while q:\n            s2.append(q)\n            q = q.next\n            \n        c = None\n        while s1 and s2:\n            if s1[-1] == s2[-1]:\n                c = s1.pop()\n                s2.pop()\n            else:\n                break\n        return c\n```\n\n## 数字在排序数组中出现的次数\n题目描述\n\n> 统计一个数字在排序数组中出现的次数。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def GetNumberOfK(self, data, k):\n        # write code here\n        left, right = 0, len(data) - 1\n        while left <= right:\n            mid = (left + right) / 2\n            if data[mid] < k:\n                left = mid + 1\n            else:\n                right = mid - 1\n        i = left\n        left, right = 0, len(data) - 1\n        while left <= right:\n            mid = (left + right) / 2\n            if data[mid] <= k:\n                left = mid + 1\n            else:\n                right = mid - 1\n        j = left\n        return j - i\n```\n\n## 二叉树的深度\n题目描述\n\n> 输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    def TreeDepth(self, pRoot):\n        # write code here\n        if not pRoot:\n            return 0\n        else:\n            return max(self.TreeDepth(pRoot.left), self.TreeDepth(pRoot.right)) + 1\n```\n\n## 平衡二叉树\n题目描述\n\n> 输入一棵二叉树，判断该二叉树是否是平衡二叉树。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    def depth(self, pRoot):\n        if not pRoot:\n            return 0\n        else:\n            return max(self.depth(pRoot.left), self.depth(pRoot.right)) + 1\n    def IsBalanced_Solution(self, pRoot):\n        # write code here\n        if not pRoot:\n            return True\n        else:\n            left = self.depth(pRoot.left)\n            right = self.depth(pRoot.right)\n            if left == right or abs(left - right) == 1:\n                return self.IsBalanced_Solution(pRoot.left) and self.IsBalanced_Solution(pRoot.right)\n            else:\n                return False\n```\n\n## 数组中只出现一次的数字\n题目描述\n\n> 一个整型数组里除了两个数字之外，其他的数字都出现了偶数次。请写程序找出这两个只出现一次的数字。\n```\n# -*- coding:utf-8 -*-\nimport collections\nclass Solution:\n    # 返回[a,b] 其中ab是出现一次的两个数字\n    def FindNumsAppearOnce(self, array):\n        # write code here\n        counter = collections.Counter(array)\n        res = []\n        for a in array:\n            if counter[a] == 1:\n                res.append(a)\n        return res\n```\n\n## 和为S的连续正数序列\n题目描述\n\n> 小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!\n```\nimport math\n# -*- coding:utf-8 -*-\nclass Solution:\n    def FindContinuousSequence(self, tsum):\n        # write code here\n        res = []\n        i, j = 2, int(math.sqrt(2*tsum))\n        for n in range(j, i-1, -1):\n            if n & 1 and tsum % n == 0:\n                r = []\n                m = tsum / n\n                for x in range(m - (n-1)/2, m + (n-1)/2 + 1):\n                    r.append(x)\n                res.append(r)\n            elif n & 1 == 0 and (tsum % n) * 2 == n:\n                r = []\n                m = ((2 * tsum) / n) / 2\n                for x in range(m-n/2+1, m+n/2 + 1):\n                    r.append(x)\n                res.append(r)\n        return res\n```\n\n## 和为S的两个数字\n题目描述\n\n> 输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def FindNumbersWithSum(self, array, tsum):\n        # write code here\n        d = {}\n        for i, a in enumerate(array):\n            d[a] = i\n        r = []\n        m = float('inf')\n        for v in d:\n            if (tsum-v) in d:\n                if v * (tsum-v) < m:\n                    m = v * (tsum-v)\n                    r = [v, tsum-v]\n        return r\n```\n\n## 左旋转字符串\n题目描述\n\n> 汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def LeftRotateString(self, s, n):\n        # write code here\n        if n <= 0:\n            return s\n        if not s:\n            return \"\"\n        n = n % len(s)\n        a = s[:n][::-1]\n        b = s[n:][::-1]\n        return (a + b)[::-1]\n```\n\n## 翻转单词顺序列\n题目描述\n\n> 牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def ReverseSentence(self, s):\n        # write code here\n        r = \"\"\n        i = 0\n        start = 0\n        count = 0\n        while i < len(s):\n            while i < len(s) and s[i] is not ' ':\n                count += 1\n                i += 1\n            r += s[start:start + count][::-1]\n            while i < len(s) and s[i] is ' ':\n                r += ' '\n                i += 1\n            start = i\n            count = 0\n        return r[::-1]\n```\n\n## 扑克牌顺子\n题目描述\n\n> LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)…他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def IsContinuous(self, numbers):\n        # write code here\n        if not numbers:\n            return False\n        else:\n            numbers.sort()\n            n = len(numbers)\n            i = 0\n            zeros = 0\n            while i < n:\n                if numbers[i] == 0:\n                    zeros += 1\n                i += 1\n            if zeros == n - 1:\n                return True\n            else:\n                i = zeros\n                while i < n - 1:\n                    gap = numbers[i + 1] - numbers[i] - 1\n                    if gap > zeros or gap < 0:\n                        return False\n                    else:\n                        zeros -= gap\n                    i += 1\n                return True\n```\n\n## 孩子们的游戏(圆圈中最后剩下的数)\n题目描述\n\n> 每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0…m-1报数….这样下去….直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)\n```\n# -*- coding:utf-8 -*-\nclass ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\nclass Solution:\n    def LastRemaining_Solution(self, n, m):\n        # write code here\n        if n == 0:\n            return -1\n        h = ListNode(0)\n        p = h\n        for i in range(1, n):\n            p.next = ListNode(i)\n            p = p.next\n        p.next = h\n        while h != h.next:\n            for i in range(1, m):\n                p = p.next\n                h = h.next\n            h = h.next\n            p.next = h\n        return h.val\n```\n\n## 求1+2+3+…+n\n题目描述\n\n> 求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def __init__(self):\n        self.r = 0\n    def Sum_Solution(self, n):\n        # write code here\n        def recursive(n):\n            self.r += n\n            n -= 1\n            return (n>0) and recursive(n)\n        recursive(n)\n        return self.r\n```\n\n## 不用加减乘除做加法\n题目描述\n\n> 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def Add(self, num1, num2):\n        # write code here\n        return sum([num1, num2])\n```\n\n## 把字符串转换成整数\n题目描述\n\n> 将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def StrToInt(self, s):\n        # write code here\n        if not s:\n            return 0\n        if not s[0].isdigit() and s[0] is not '+' and s[0] is not '-':\n            return 0\n        if s[0] is '+' and len(s) == 1 or s[0] is '-' and len(s) == 1:\n            return 0\n        for i in range(1, len(s)):\n            if not s[i].isdigit():\n                return 0\n        if s[0] == '-':\n            return -int(s[1:])\n        elif s[0] == '+':\n            return int(s[1:])\n        else:\n            return int(s)\n```\n\n## 数组中重复的数字\n题目描述\n\n> 在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。\n```\n# -*- coding:utf-8 -*-\nimport collections\nclass Solution:\n    # 这里要特别注意~找到任意重复的一个值并赋值到duplication[0]\n    # 函数返回True/False\n    def duplicate(self, numbers, duplication):\n        # write code here\n        if not numbers:\n            return False\n        else:\n            counter = collections.Counter(numbers)\n            for n in numbers:\n                if counter[n] != 1:\n                    duplication[0] = n\n                    return True\n            return False\n```\n\n## 构建乘积数组\n题目描述\n\n> 给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]=A[0]A[1]…A[i-1]A[i+1]…A[n-1]。不能使用除法。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def multiply(self, A):\n        # write code here\n        if not A:\n            return []\n        else:\n            n = len(A)\n            B = [0] * n\n            B[0] = 1\n            for i in range(1, n):\n                B[i] = B[i - 1] * A[i - 1]\n            temp = 1\n            for j in range(n - 2, -1, -1):\n                temp *= A[j + 1]\n                B[j] *= temp\n            return B\n```\n\n## 正则表达式匹配\n题目描述\n\n> 请实现一个函数用来匹配包括’.’和’‘的正则表达式。模式中的字符’.’表示任意一个字符，而’‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”abaca”匹配，但是与”aa.a”和”ab*a”均不匹配\n```\nclass Solution(object):\n    def match(self, text, pattern):\n        if not pattern:\n            return not text\n        first_match = bool(text) and pattern[0] in {text[0], '.'}\n        if len(pattern) >= 2 and pattern[1] == '*':\n            return (self.match(text, pattern[2:]) or\n                    first_match and self.match(text[1:], pattern))\n        else:\n            return first_match and self.match(text[1:], pattern[1:])\n```\n\n## 表示数值的字符串\n题目描述\n\n> 请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    # s字符串\n    def isNumeric(self, s):\n        # write code here\n        try:\n            p = float(s)\n            return True\n        except:\n            return False\n```\n\n## 字符流中第一个不重复的字符\n题目描述\n\n> 请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是”g”。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是”l”。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def __init__(self):\n        self.buffer = ''\n    # 返回对应char\n    def FirstAppearingOnce(self):\n        # write code here\n        appear = [False for _ in range(256)]\n        for b in self.buffer:\n            if appear[ord(b)] is False:\n                appear[ord(b)] = True\n            else:\n                appear[ord(b)] = False\n        for b in self.buffer:\n            if appear[ord(b)] is True:\n                return b\n        return '#'\n\n    def Insert(self, char):\n        # write code here\n        self.buffer += char\n```\n\n## 链表中环的入口结点\n题目描述\n\n> 给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution:\n    def EntryNodeOfLoop(self, pHead):\n        # write code here\n        if not pHead or not pHead.next or not pHead.next.next:\n            return None\n        else:\n            slow = pHead.next\n            fast = pHead.next.next\n            while slow != fast:\n                if fast and fast.next:\n                    slow = slow.next\n                    fast = fast.next.next\n                else:\n                    return None\n            slow = pHead\n            while slow != fast:\n                slow = slow.next\n                fast = fast.next\n            return slow\n```\n\n## 删除链表中重复的结点\n题目描述\n\n> 在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1->2->3->3->4->4->5 处理后为 1->2->5\n```\n# -*- coding:utf-8 -*-\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution:\n    def deleteDuplication(self, pHead):\n        # write code here\n        p, q, r = None, pHead, None\n        while q:\n            if q.next and q.next.val == q.val:\n                r = q.next\n                while r.next and r.next.val == q.val:\n                    r = r.next\n                if q == pHead:\n                    pHead = r.next\n                else:\n                    p.next = r.next\n                q = r.next\n            else:\n                p = q\n                q = q.next\n        return pHead\n```\n\n## 二叉树的下一个结点\n题目描述\n\n> 给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。\n```\n# -*- coding:utf-8 -*-\n# class TreeLinkNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n#         self.next = None\nclass Solution:\n    def GetNext(self, pNode):\n        # write code here\n        if not pNode:\n            return None\n        else:\n            if pNode.right:\n                res = pNode.right\n                while res.left:\n                    res = res.left\n                return res\n            else:\n                parent = pNode.next\n                current = pNode\n                while parent and parent.left != current:\n                    current = parent\n                    parent = parent.next\n                return parent\n```\n\n## 对称的二叉树\n题目描述\n\n> 请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    def mirror(self, pRoot):\n        if not pRoot:\n            return None\n        else:\n            left = self.mirror(pRoot.left)\n            right = self.mirror(pRoot.right)\n            pRoot.left, pRoot.right = right, left\n            return pRoot\n        \n    def sample(self, r1, r2):\n        if not r1 and not r2:\n            return True\n        else:\n            return (r1 and r2) and (r1.val == r2.val) and self.sample(r1.left, r2.left) and self.sample(r1.right, r2.right)\n    \n    def isSymmetrical(self, pRoot):\n        # write code here\n        if not pRoot:\n            return True\n        else:\n            left, right = pRoot.left, pRoot.right\n            right = self.mirror(right)\n            return self.sample(left, right)\n```\n\n## 按之字形顺序打印二叉树\n题目描述\n\n> 请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    def Print(self, pRoot):\n        # write code here\n        if not pRoot:\n            return []\n        else:\n            res = []\n            s1, s2 = [pRoot], []\n            while s1 or s2:\n                if s1:\n                    r = []\n                    while s1:\n                        v = s1.pop()\n                        r.append(v.val)\n                        if v.left:\n                            s2.append(v.left)\n                        if v.right:\n                            s2.append(v.right)\n                    res.append(r)\n                if s2:\n                    r = []\n                    while s2:\n                        v = s2.pop()\n                        r.append(v.val)\n                        if v.right:\n                            s1.append(v.right)\n                        if v.left:\n                            s1.append(v.left)\n                    res.append(r)\n            return res\n```\n\n## 把二叉树打印成多行\n题目描述\n\n> 从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    # 返回二维列表[[1,2],[4,5]]\n    def Print(self, pRoot):\n        # write code here\n        if not pRoot:\n            return []\n        else:\n            res = []\n            q1, q2 = [pRoot], []\n            while q1 or q2:\n                if q1:\n                    r = []\n                    while q1:\n                        v = q1.pop(0)\n                        r.append(v.val)\n                        if v.left:\n                            q2.append(v.left)\n                        if v.right:\n                            q2.append(v.right)\n                    res.append(r)\n                if q2:\n                    r = []\n                    while q2:\n                        v = q2.pop(0)\n                        r.append(v.val)\n                        if v.left:\n                            q1.append(v.left)\n                        if v.right:\n                            q1.append(v.right)\n                    res.append(r)\n            return res\n```\n\n## 序列化二叉树\n题目描述\n\n> 请实现两个函数，分别用来序列化和反序列化二叉树\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    flag = -1\n    \n    def Serialize(self, root):\n        # write code here\n        if not root:\n            return '#'\n        else:\n            return str(root.val) + ',' + self.Serialize(root.left) + ',' + self.Serialize(root.right)\n\n    def Deserialize(self, s):\n        # write code here\n        self.flag += 1\n        if self.flag >= len(s):\n            return None\n        root = None\n        l = s.split(',')\n        if l[self.flag] != '#':\n            root = TreeNode(int(l[self.flag]))\n            root.left = self.Deserialize(s)\n            root.right = self.Deserialize(s)\n        return root\n```\n\n## 二叉搜索树的第k个结点\n题目描述\n\n> 给定一棵二叉搜索树，请找出其中的第k小的结点。例如， （5，3，7，2，4，6，8） 中，按结点数值大小顺序第三小结点的值为4。\n```\n# -*- coding:utf-8 -*-\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\nclass Solution:\n    count = 0\n    # 返回对应节点TreeNode\n    def KthNode(self, pRoot, k):\n        # write code here\n        if not pRoot or k <= 0:\n            return None\n        else:\n            res = self.KthNode(pRoot.left, k)\n            if res:\n                return res\n            self.count += 1\n            if self.count == k:\n                return pRoot\n            res = self.KthNode(pRoot.right, k)\n            if res:\n                return res\n            return None\n```\n\n## 数据流中的中位数\n题目描述\n\n> 如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def __init__(self):\n        self.data=[]\n    def Insert(self, num):\n        # write code here\n        self.data.append(num)\n        self.data.sort()\n    def GetMedian(self, data):\n        # write code here\n        n = len(self.data)\n        if n % 2 == 0:\n            return (self.data[n/2] + self.data[n/2-1]) / 2.0\n        else:\n            return self.data[n/2]\n```\n\n## 滑动窗口的最大值\n题目描述\n\n> 给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def maxInWindows(self, num, size):\n        # write code here\n        if size <= 0:\n            return []\n        res = []\n        for i in xrange(0, len(num)-size+1):\n            res.append(max(num[i:i+size]))\n        return res\n```\n\n## 矩阵中的路径\n题目描述\n\n> 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。 例如 a b c e s f c s a d e e 这样的3 X 4 矩阵中包含一条字符串”bcced”的路径，但是矩阵中不包含”abcb”路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    def hasPath(self, matrix, rows, cols, path):\n        # write code here\n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i*cols+j] == path[0]:\n                    if self.find(list(matrix), rows, cols, path[1:], i, j):\n                        return True\n        return False\n    def find(self, matrix, rows, cols, path, i, j):\n        if not path:\n            return True\n        matrix[i*cols+j] = '0'\n        if j+1 < cols and matrix[i*cols+j+1] == path[0]:\n            return self.find(matrix, rows, cols, path[1:], i, j+1)\n        elif j-1 >= 0 and matrix[i*cols+j-1] == path[0]:\n            return self.find(matrix, rows, cols, path[1:], i, j-1)\n        elif i+1 < rows and matrix[(i+1)*cols+j] == path[0]:\n            return self.find(matrix, rows, cols, path[1:], i+1, j)\n        elif i-1 >= 0 and matrix[(i-1)*cols+j] == path[0]:\n            return self.find(matrix, rows, cols, path[1:], i-1, j)\n        else:\n            return False\n```\n\n## 机器人的运动范围\n题目描述\n\n> 地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？\n```\n# -*- coding:utf-8 -*-\nclass Solution:\n    result = 0\n    \n    def movingCount(self, threshold, rows, cols):\n        # write code here\n        record = [[True] * cols for _ in range(rows)]\n        \n        def compute_index_sum(number):\n            return sum(map(int, [_ for _ in str(number)]))\n        \n        def is_valid(i, j):\n            if 0 <= i < rows and 0 <= j < cols and record[i][j] and compute_index_sum(i) + compute_index_sum(j) <= threshold:\n                return True\n            else:\n                return False\n            \n        def dfs(i, j):\n            if is_valid(i, j):\n                record[i][j] = False\n                self.result += 1\n                dfs(i - 1, j)\n                dfs(i + 1, j)\n                dfs(i, j - 1)\n                dfs(i, j + 1)\n                \n        dfs(0, 0)\n        \n        return self.result\n```","slug":"剑指Offer","published":1,"updated":"2023-09-12T10:55:05.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln2n3nx2000pyuzqbjte21ps","content":"<p><a href=\"https://www.nowcoder.com/exam/oj/ta?page=1&tpId=13&type=13\">牛客网剑指Offer编程题</a></p>\n<h2 id=\"二维数组中的查找\"><a href=\"#二维数组中的查找\" class=\"headerlink\" title=\"二维数组中的查找\"></a>二维数组中的查找</h2><p>题目描述</p>\n<blockquote>\n<p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # array 二维列表</span><br><span class=\"line\">    def Find(self, target, array):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not array:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            rows, cols = len(array), len(array[0])</span><br><span class=\"line\">            r, c = 0, cols - 1</span><br><span class=\"line\">            while r &lt;= rows - 1 and c &gt;= 0:</span><br><span class=\"line\">                if array[r][c] == target:</span><br><span class=\"line\">                    return True</span><br><span class=\"line\">                elif array[r][c] &lt; target:</span><br><span class=\"line\">                    r += 1</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    c -= 1</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"替换空格\"><a href=\"#替换空格\" class=\"headerlink\" title=\"替换空格\"></a>替换空格</h2><p>题目描述</p>\n<blockquote>\n<p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # s 源字符串</span><br><span class=\"line\">    def replaceSpace(self, s):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        r = &#x27;&#x27;</span><br><span class=\"line\">        for c in s:</span><br><span class=\"line\">            if c != &#x27; &#x27;:</span><br><span class=\"line\">                r += c</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                r += &#x27;%20&#x27;</span><br><span class=\"line\">        return r</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从尾到头打印链表\"><a href=\"#从尾到头打印链表\" class=\"headerlink\" title=\"从尾到头打印链表\"></a>从尾到头打印链表</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回从尾部到头部的列表值序列，例如[1,2,3]</span><br><span class=\"line\">    def printListFromTailToHead(self, listNode):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        h = listNode</span><br><span class=\"line\">        r = []</span><br><span class=\"line\">        while h:</span><br><span class=\"line\">            r.insert(0, h.val)</span><br><span class=\"line\">            h = h.next</span><br><span class=\"line\">        return r</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重建二叉树\"><a href=\"#重建二叉树\" class=\"headerlink\" title=\"重建二叉树\"></a>重建二叉树</h2><p>题目描述</p>\n<blockquote>\n<p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回构造的TreeNode根节点</span><br><span class=\"line\">    def reConstructBinaryTree(self, pre, tin):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pre:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            value = pre[0]</span><br><span class=\"line\">            root = TreeNode(value)</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                rindex = tin.index(value)</span><br><span class=\"line\">            except:</span><br><span class=\"line\">                return None</span><br><span class=\"line\">            left = self.reConstructBinaryTree(pre[1:rindex+1], tin[:rindex])</span><br><span class=\"line\">            right = self.reConstructBinaryTree(pre[rindex+1:], tin[rindex+1:])</span><br><span class=\"line\">            root.left, root.right = left, right</span><br><span class=\"line\">            return root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用两个栈实现队列\"><a href=\"#用两个栈实现队列\" class=\"headerlink\" title=\"用两个栈实现队列\"></a>用两个栈实现队列</h2><p>题目描述</p>\n<blockquote>\n<p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.stack_first = []</span><br><span class=\"line\">        self.stack_second = []</span><br><span class=\"line\">    def push(self, node):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        self.stack_first.append(node)</span><br><span class=\"line\">    def pop(self):</span><br><span class=\"line\">        # return xx</span><br><span class=\"line\">        if not self.stack_first and not self.stack_second:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        elif self.stack_second:</span><br><span class=\"line\">            return self.stack_second.pop()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            while self.stack_first:</span><br><span class=\"line\">                self.stack_second.append(self.stack_first.pop())</span><br><span class=\"line\">            return self.stack_second.pop()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"旋转数组的最小数字\"><a href=\"#旋转数组的最小数字\" class=\"headerlink\" title=\"旋转数组的最小数字\"></a>旋转数组的最小数字</h2><p>题目描述</p>\n<blockquote>\n<p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def minNumberInRotateArray(self, rotateArray):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not rotateArray:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left, right = 0, len(rotateArray) - 1</span><br><span class=\"line\">            value = rotateArray[-1]</span><br><span class=\"line\">            while left &lt;= right:</span><br><span class=\"line\">                mid = (left + right) / 2</span><br><span class=\"line\">                if rotateArray[mid] &gt; value:</span><br><span class=\"line\">                    left = mid + 1</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    right = mid - 1</span><br><span class=\"line\">            return rotateArray[left]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h2><p>题目描述</p>\n<blockquote>\n<p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。n&lt;&#x3D;39</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def Fibonacci(self, n):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        x, y = 0, 1</span><br><span class=\"line\">        for _ in range(n):</span><br><span class=\"line\">            x, y = y, x + y</span><br><span class=\"line\">        return x</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"跳台阶\"><a href=\"#跳台阶\" class=\"headerlink\" title=\"跳台阶\"></a>跳台阶</h2><p>题目描述</p>\n<blockquote>\n<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def jumpFloor(self, number):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        x, y = 1, 1</span><br><span class=\"line\">        for _ in range(number):</span><br><span class=\"line\">            x, y = y, x + y</span><br><span class=\"line\">        return x</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变态跳台阶\"><a href=\"#变态跳台阶\" class=\"headerlink\" title=\"变态跳台阶\"></a>变态跳台阶</h2><p>题目描述</p>\n<blockquote>\n<p> 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def jumpFloorII(self, number):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        return 1 &lt;&lt; (number - 1)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩形覆盖\"><a href=\"#矩形覆盖\" class=\"headerlink\" title=\"矩形覆盖\"></a>矩形覆盖</h2><p>题目描述</p>\n<blockquote>\n<p>我们可以用21的小矩形横着或者竖着去覆盖更大的矩形。请问用n个21的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def rectCover(self, number):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if number == 0:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            x, y = 1, 1</span><br><span class=\"line\">            for _ in range(number):</span><br><span class=\"line\">                x, y = y, x + y</span><br><span class=\"line\">            return x</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二进制中1的个数\"><a href=\"#二进制中1的个数\" class=\"headerlink\" title=\"二进制中1的个数\"></a>二进制中1的个数</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def NumberOf1(self, n):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        return sum([(n&gt;&gt;i &amp; 1) for i in range(32)])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数值的整数次方\"><a href=\"#数值的整数次方\" class=\"headerlink\" title=\"数值的整数次方\"></a>数值的整数次方</h2><p>题目描述</p>\n<blockquote>\n<p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def Power(self, base, exponent):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if exponent == 0:</span><br><span class=\"line\">            return 1</span><br><span class=\"line\">        elif exponent &gt; 0:</span><br><span class=\"line\">            if exponent &amp; 1:</span><br><span class=\"line\">                return base * self.Power(base, exponent/2) ** 2</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return self.Power(base, exponent/2) ** 2</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return 1.0 / self.Power(base, -exponent)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调整数组顺序使奇数位于偶数前面\"><a href=\"#调整数组顺序使奇数位于偶数前面\" class=\"headerlink\" title=\"调整数组顺序使奇数位于偶数前面\"></a>调整数组顺序使奇数位于偶数前面</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def reOrderArray(self, array):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        odd, even = [], []</span><br><span class=\"line\">        for a in array:</span><br><span class=\"line\">            if a &amp; 1:</span><br><span class=\"line\">                odd.append(a)</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                even.append(a)</span><br><span class=\"line\">        return odd + even</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表中倒数第k个结点\"><a href=\"#链表中倒数第k个结点\" class=\"headerlink\" title=\"链表中倒数第k个结点\"></a>链表中倒数第k个结点</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个链表，输出该链表中倒数第k个结点。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def FindKthToTail(self, head, k):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if k &lt;= 0:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            p = head</span><br><span class=\"line\">            q = head</span><br><span class=\"line\">            while k and q:</span><br><span class=\"line\">                q = q.next</span><br><span class=\"line\">                k -= 1</span><br><span class=\"line\">            if k &gt; 0:</span><br><span class=\"line\">                return None</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                while q:</span><br><span class=\"line\">                    p = p.next</span><br><span class=\"line\">                    q = q.next</span><br><span class=\"line\">                return p</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个链表，反转链表后，输出新链表的表头。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回ListNode</span><br><span class=\"line\">    def ReverseList(self, pHead):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pHead:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            q, r = pHead, pHead.next</span><br><span class=\"line\">            q.next = None</span><br><span class=\"line\">            while r:</span><br><span class=\"line\">                p = q</span><br><span class=\"line\">                q = r</span><br><span class=\"line\">                r = r.next</span><br><span class=\"line\">                q.next = p</span><br><span class=\"line\">            return q</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并两个排序的链表\"><a href=\"#合并两个排序的链表\" class=\"headerlink\" title=\"合并两个排序的链表\"></a>合并两个排序的链表</h2><p>题目描述</p>\n<blockquote>\n<p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回合并后列表</span><br><span class=\"line\">    def Merge(self, pHead1, pHead2):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pHead1 and not pHead2:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            if not pHead1:</span><br><span class=\"line\">                return pHead2</span><br><span class=\"line\">            elif not pHead2:</span><br><span class=\"line\">                return pHead1</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                if pHead1.val &lt;= pHead2.val:</span><br><span class=\"line\">                    head = pHead1</span><br><span class=\"line\">                    head.next = self.Merge(pHead1.next, pHead2)</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    head = pHead2</span><br><span class=\"line\">                    head.next = self.Merge(pHead1, pHead2.next)</span><br><span class=\"line\">                return head</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"树的子结构\"><a href=\"#树的子结构\" class=\"headerlink\" title=\"树的子结构\"></a>树的子结构</h2><p>题目描述</p>\n<blockquote>\n<p>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def dfs(self, r1, r2):</span><br><span class=\"line\">        if not r2:</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        elif not r1:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            if r1.val != r2.val:</span><br><span class=\"line\">                return False</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return self.dfs(r1.left, r2.left) and self.dfs(r1.right, r2.right)</span><br><span class=\"line\">    </span><br><span class=\"line\">    def HasSubtree(self, pRoot1, pRoot2):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot1:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        elif not pRoot2:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return self.dfs(pRoot1, pRoot2) or self.HasSubtree(pRoot1.left, pRoot2) or self.HasSubtree(pRoot1.right, pRoot2)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的镜像\"><a href=\"#二叉树的镜像\" class=\"headerlink\" title=\"二叉树的镜像\"></a>二叉树的镜像</h2><p>题目描述</p>\n<blockquote>\n<p>操作给定的二叉树，将其变换为源二叉树的镜像。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回镜像树的根节点</span><br><span class=\"line\">    def Mirror(self, root):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not root:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = self.Mirror(root.left)</span><br><span class=\"line\">            right = self.Mirror(root.right)</span><br><span class=\"line\">            root.left, root.right = right, left</span><br><span class=\"line\">            return root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顺时针打印矩阵\"><a href=\"#顺时针打印矩阵\" class=\"headerlink\" title=\"顺时针打印矩阵\"></a>顺时针打印矩阵</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # matrix类型为二维列表，需要返回列表</span><br><span class=\"line\">    def printMatrix(self, matrix):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not matrix:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            res = []</span><br><span class=\"line\">            rows, cols = len(matrix), len(matrix[0])</span><br><span class=\"line\">            l, r, t, b = 0, cols - 1, 0, rows - 1</span><br><span class=\"line\">            while l &lt;= r and t &lt;= b:</span><br><span class=\"line\">                for i in range(l, r+1):</span><br><span class=\"line\">                    res.append(matrix[t][i])</span><br><span class=\"line\">                if t &lt; b:</span><br><span class=\"line\">                    for i in range(t+1, b+1):</span><br><span class=\"line\">                        res.append(matrix[i][r])</span><br><span class=\"line\">                    if r &gt; l:</span><br><span class=\"line\">                        for i in range(r-1, l-1, -1):</span><br><span class=\"line\">                            res.append(matrix[b][i])</span><br><span class=\"line\">                        if t &lt; b - 1:</span><br><span class=\"line\">                            for i in range(b-1, t, -1):</span><br><span class=\"line\">                                res.append(matrix[i][l])</span><br><span class=\"line\">                            l += 1</span><br><span class=\"line\">                            r -= 1</span><br><span class=\"line\">                            t += 1</span><br><span class=\"line\">                            b -= 1</span><br><span class=\"line\">                        else:</span><br><span class=\"line\">                            break</span><br><span class=\"line\">                    else:</span><br><span class=\"line\">                        break</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    break</span><br><span class=\"line\">            return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包含min函数的栈\"><a href=\"#包含min函数的栈\" class=\"headerlink\" title=\"包含min函数的栈\"></a>包含min函数的栈</h2><p>题目描述</p>\n<blockquote>\n<p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.stack_first = []</span><br><span class=\"line\">        self.stack_second = []</span><br><span class=\"line\">    def push(self, node):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        self.stack_first.append(node)</span><br><span class=\"line\">        if not self.stack_second:</span><br><span class=\"line\">            self.stack_second.append(node)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            value = self.stack_second[-1]</span><br><span class=\"line\">            if node &lt;= value:</span><br><span class=\"line\">                self.stack_second.append(node)</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                self.stack_second.append(value)</span><br><span class=\"line\">    def pop(self):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        self.stack_first.pop()</span><br><span class=\"line\">        self.stack_second.pop()</span><br><span class=\"line\">    def top(self):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        return self.stack_first[-1]</span><br><span class=\"line\">    def min(self):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        return self.stack_second[-1]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"栈的压入、弹出序列\"><a href=\"#栈的压入、弹出序列\" class=\"headerlink\" title=\"栈的压入、弹出序列\"></a>栈的压入、弹出序列</h2><p>题目描述</p>\n<blockquote>\n<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def IsPopOrder(self, pushV, popV):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        n = len(pushV)</span><br><span class=\"line\">        if n == 0:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            res = []</span><br><span class=\"line\">            j = 0</span><br><span class=\"line\">            for i in range(n):</span><br><span class=\"line\">                res.append(pushV[i])</span><br><span class=\"line\">                while j &lt; n and res[-1] == popV[j]:</span><br><span class=\"line\">                    res.pop()</span><br><span class=\"line\">                    j += 1</span><br><span class=\"line\">            if not res:</span><br><span class=\"line\">                return True</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从上往下打印二叉树\"><a href=\"#从上往下打印二叉树\" class=\"headerlink\" title=\"从上往下打印二叉树\"></a>从上往下打印二叉树</h2><p>题目描述</p>\n<blockquote>\n<p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回从上到下每个节点值列表，例：[1,2,3]</span><br><span class=\"line\">    def PrintFromTopToBottom(self, root):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not root:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            res = []</span><br><span class=\"line\">            q = [root]</span><br><span class=\"line\">            while q:</span><br><span class=\"line\">                v = q.pop(0)</span><br><span class=\"line\">                res.append(v.val)</span><br><span class=\"line\">                if v.left:</span><br><span class=\"line\">                    q.append(v.left)</span><br><span class=\"line\">                if v.right:</span><br><span class=\"line\">                    q.append(v.right)</span><br><span class=\"line\">            return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树的后序遍历序列\"><a href=\"#二叉搜索树的后序遍历序列\" class=\"headerlink\" title=\"二叉搜索树的后序遍历序列\"></a>二叉搜索树的后序遍历序列</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def VerifySquenceOfBST(self, sequence):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not sequence:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            value = sequence[-1]</span><br><span class=\"line\">            n = len(sequence)</span><br><span class=\"line\">            i = 0</span><br><span class=\"line\">            while i &lt; n and sequence[i] &lt; value:</span><br><span class=\"line\">                i += 1</span><br><span class=\"line\">            while i &lt; n and sequence[i] &gt; value:</span><br><span class=\"line\">                i += 1</span><br><span class=\"line\">            if i == n - 1:</span><br><span class=\"line\">                return True</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树中和为某一值的路径\"><a href=\"#二叉树中和为某一值的路径\" class=\"headerlink\" title=\"二叉树中和为某一值的路径\"></a>二叉树中和为某一值的路径</h2><p>题目描述</p>\n<blockquote>\n<p>输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回二维列表，内部每个列表表示找到的路径</span><br><span class=\"line\">    def FindPath(self, root, expectNumber):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not root:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            if root.val == expectNumber and not root.left and not root.right:</span><br><span class=\"line\">                return [[root.val]]</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                left = self.FindPath(root.left, expectNumber - root.val)</span><br><span class=\"line\">                right = self.FindPath(root.right, expectNumber - root.val)</span><br><span class=\"line\">                return [[root.val] + l for l in left if l] + [[root.val] + r for r in right if r]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂链表的复制\"><a href=\"#复杂链表的复制\" class=\"headerlink\" title=\"复杂链表的复制\"></a>复杂链表的复制</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class RandomListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.label = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">#         self.random = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回 RandomListNode</span><br><span class=\"line\">    def Clone(self, pHead):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pHead:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            p = pHead</span><br><span class=\"line\">            while p:</span><br><span class=\"line\">                q = RandomListNode(p.label)</span><br><span class=\"line\">                q.next = p.next</span><br><span class=\"line\">                p.next = q</span><br><span class=\"line\">                p = q.next</span><br><span class=\"line\">                </span><br><span class=\"line\">            p = pHead</span><br><span class=\"line\">            while p:</span><br><span class=\"line\">                q = p.next</span><br><span class=\"line\">                if p.random:</span><br><span class=\"line\">                    q.random = p.random.next</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    pass</span><br><span class=\"line\">                p = q.next</span><br><span class=\"line\">                </span><br><span class=\"line\">            p = pHead</span><br><span class=\"line\">            h = p.next</span><br><span class=\"line\">            while p.next:</span><br><span class=\"line\">                q = p.next</span><br><span class=\"line\">                p.next = q.next</span><br><span class=\"line\">                p = q</span><br><span class=\"line\">            return h</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树与双向链表\"><a href=\"#二叉搜索树与双向链表\" class=\"headerlink\" title=\"二叉搜索树与双向链表\"></a>二叉搜索树与双向链表</h2><p>题目描述</p>\n<blockquote>\n<p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def Convert(self, pRootOfTree):</span><br><span class=\"line\">        root = pRootOfTree</span><br><span class=\"line\">        if not root:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self.Convert(root.left)</span><br><span class=\"line\">            left = root.left</span><br><span class=\"line\">            if left:</span><br><span class=\"line\">                while left.right:</span><br><span class=\"line\">                    left = left.right</span><br><span class=\"line\">                root.left, left.right = left, root</span><br><span class=\"line\">                </span><br><span class=\"line\">            self.Convert(root.right)</span><br><span class=\"line\">            right = root.right</span><br><span class=\"line\">            if right:</span><br><span class=\"line\">                while right.left:</span><br><span class=\"line\">                    right = right.left</span><br><span class=\"line\">                root.right, right.left = right, root</span><br><span class=\"line\">                </span><br><span class=\"line\">            while root.left:</span><br><span class=\"line\">                root = root.left</span><br><span class=\"line\">                </span><br><span class=\"line\">            return root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的排列\"><a href=\"#字符串的排列\" class=\"headerlink\" title=\"字符串的排列\"></a>字符串的排列</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">import itertools</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def Permutation(self, ss):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not ss:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return sorted(list(set(map(&#x27;&#x27;.join, itertools.permutations(ss)))))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组中出现次数超过一半的数字\"><a href=\"#数组中出现次数超过一半的数字\" class=\"headerlink\" title=\"数组中出现次数超过一半的数字\"></a>数组中出现次数超过一半的数字</h2><p>题目描述</p>\n<blockquote>\n<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import collections</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def MoreThanHalfNum_Solution(self, numbers):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        counter = collections.Counter(numbers)</span><br><span class=\"line\">        for k, v in counter.items():</span><br><span class=\"line\">            if v &gt; len(numbers)/2:</span><br><span class=\"line\">                return k</span><br><span class=\"line\">        return 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最小的K个数\"><a href=\"#最小的K个数\" class=\"headerlink\" title=\"最小的K个数\"></a>最小的K个数</h2><p>题目描述</p>\n<blockquote>\n<p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def GetLeastNumbers_Solution(self, tinput, k):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if k &lt;= 0 or k &gt; len(tinput):</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            tinput.sort()</span><br><span class=\"line\">            return tinput[:k]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连续子数组的最大和\"><a href=\"#连续子数组的最大和\" class=\"headerlink\" title=\"连续子数组的最大和\"></a>连续子数组的最大和</h2><p>题目描述</p>\n<blockquote>\n<p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def FindGreatestSumOfSubArray(self, array):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        n = len(array)</span><br><span class=\"line\">        if n == 0:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            dp = [0] * n</span><br><span class=\"line\">            dp[0] = array[0]</span><br><span class=\"line\">            for i in range(1, n):</span><br><span class=\"line\">                dp[i] = max(dp[i-1]+array[i], array[i])</span><br><span class=\"line\">            return max(dp)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整数中1出现的次数（从1到n整数中1出现的次数）\"><a href=\"#整数中1出现的次数（从1到n整数中1出现的次数）\" class=\"headerlink\" title=\"整数中1出现的次数（从1到n整数中1出现的次数）\"></a>整数中1出现的次数（从1到n整数中1出现的次数）</h2><p>题目描述</p>\n<blockquote>\n<p>求出1<del>13的整数中1出现的次数,并算出100</del>1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def NumberOf1Between1AndN_Solution(self, n):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        def nOf1(q):</span><br><span class=\"line\">            index = 0</span><br><span class=\"line\">            for i in str(q):</span><br><span class=\"line\">                if i == &#x27;1&#x27;:</span><br><span class=\"line\">                    index += 1</span><br><span class=\"line\">            return index</span><br><span class=\"line\">        sum = 0</span><br><span class=\"line\">        for q in range(1, n + 1):</span><br><span class=\"line\">            sum += nOf1(q)</span><br><span class=\"line\">        return sum</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把数组排成最小的数\"><a href=\"#把数组排成最小的数\" class=\"headerlink\" title=\"把数组排成最小的数\"></a>把数组排成最小的数</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def PrintMinNumber(self, numbers):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        def compare(x, y):</span><br><span class=\"line\">            a = int(str(x) + str(y))</span><br><span class=\"line\">            b = int(str(y) + str(x))</span><br><span class=\"line\">            if a &gt; b:</span><br><span class=\"line\">                return 1</span><br><span class=\"line\">            elif a &lt; b:</span><br><span class=\"line\">                return -1</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return 0</span><br><span class=\"line\">            </span><br><span class=\"line\">        numbers.sort(cmp=compare)</span><br><span class=\"line\">        res = &#x27;&#x27;</span><br><span class=\"line\">        for n in numbers:</span><br><span class=\"line\">            res += str(n)</span><br><span class=\"line\">        return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"丑数\"><a href=\"#丑数\" class=\"headerlink\" title=\"丑数\"></a>丑数</h2><p>题目描述</p>\n<blockquote>\n<p>把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def GetUglyNumber_Solution(self, index):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if index &lt; 1:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        UglyNum = [1]</span><br><span class=\"line\">        indexTwo = 0</span><br><span class=\"line\">        indexThree = 0</span><br><span class=\"line\">        indexFive = 0</span><br><span class=\"line\">        for i in range(index - 1):</span><br><span class=\"line\">            NewUgly = min(UglyNum[indexTwo] * 2, UglyNum[indexThree] * 3, UglyNum[indexFive] * 5)</span><br><span class=\"line\">            UglyNum.append(NewUgly)</span><br><span class=\"line\">            if NewUgly % 2 == 0:</span><br><span class=\"line\">                indexTwo += 1</span><br><span class=\"line\">            if NewUgly % 3 == 0:</span><br><span class=\"line\">                indexThree += 1</span><br><span class=\"line\">            if NewUgly % 5 == 0:</span><br><span class=\"line\">                indexFive += 1</span><br><span class=\"line\">        return UglyNum[-1]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第一个只出现一次的字符位置\"><a href=\"#第一个只出现一次的字符位置\" class=\"headerlink\" title=\"第一个只出现一次的字符位置\"></a>第一个只出现一次的字符位置</h2><p>题目描述</p>\n<blockquote>\n<p>在一个字符串(0&lt;&#x3D;字符串长度&lt;&#x3D;10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">import collections</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def FirstNotRepeatingChar(self, s):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not s:</span><br><span class=\"line\">            return -1</span><br><span class=\"line\">        counter = collections.Counter(s)</span><br><span class=\"line\">        for i, c in enumerate(s):</span><br><span class=\"line\">            if counter[c] == 1:</span><br><span class=\"line\">                return i</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组中的逆序对\"><a href=\"#数组中的逆序对\" class=\"headerlink\" title=\"数组中的逆序对\"></a>数组中的逆序对</h2><p>题目描述</p>\n<blockquote>\n<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def InversePairsCore(self, data, copy, start, end):</span><br><span class=\"line\">        if start == end:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            mid = (start + end) / 2</span><br><span class=\"line\">            left = self.InversePairsCore(copy, data, start, mid)</span><br><span class=\"line\">            right = self.InversePairsCore(copy, data, mid+1, end)</span><br><span class=\"line\">            i, j = mid, end</span><br><span class=\"line\">            count = 0</span><br><span class=\"line\">            copyIndex = end</span><br><span class=\"line\">            while i &gt;= start and j &gt;= mid + 1:</span><br><span class=\"line\">                if data[i] &gt; data[j]:</span><br><span class=\"line\">                    count += j - mid</span><br><span class=\"line\">                    copy[copyIndex] = data[i]</span><br><span class=\"line\">                    copyIndex -= 1</span><br><span class=\"line\">                    i -= 1</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    copy[copyIndex] = data[j]</span><br><span class=\"line\">                    copyIndex -= 1</span><br><span class=\"line\">                    j -= 1</span><br><span class=\"line\">            while i &gt;= start:</span><br><span class=\"line\">                copy[copyIndex] = data[i]</span><br><span class=\"line\">                copyIndex -= 1</span><br><span class=\"line\">                i -= 1</span><br><span class=\"line\">            while j &gt;= mid + 1:</span><br><span class=\"line\">                copy[copyIndex] = data[j]</span><br><span class=\"line\">                copyIndex -= 1</span><br><span class=\"line\">                j -= 1</span><br><span class=\"line\">            return left + right + count</span><br><span class=\"line\">                    </span><br><span class=\"line\">    def InversePairs(self, data):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        return self.InversePairsCore(data[:], data[:], 0, len(data) - 1) % 1000000007</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两个链表的第一个公共结点\"><a href=\"#两个链表的第一个公共结点\" class=\"headerlink\" title=\"两个链表的第一个公共结点\"></a>两个链表的第一个公共结点</h2><p>题目描述</p>\n<blockquote>\n<p>输入两个链表，找出它们的第一个公共结点。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def FindFirstCommonNode(self, pHead1, pHead2):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        s1 = []</span><br><span class=\"line\">        s2 = []</span><br><span class=\"line\">        p = pHead1</span><br><span class=\"line\">        q = pHead2</span><br><span class=\"line\">        while p:</span><br><span class=\"line\">            s1.append(p)</span><br><span class=\"line\">            p = p.next</span><br><span class=\"line\">        while q:</span><br><span class=\"line\">            s2.append(q)</span><br><span class=\"line\">            q = q.next</span><br><span class=\"line\">            </span><br><span class=\"line\">        c = None</span><br><span class=\"line\">        while s1 and s2:</span><br><span class=\"line\">            if s1[-1] == s2[-1]:</span><br><span class=\"line\">                c = s1.pop()</span><br><span class=\"line\">                s2.pop()</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                break</span><br><span class=\"line\">        return c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字在排序数组中出现的次数\"><a href=\"#数字在排序数组中出现的次数\" class=\"headerlink\" title=\"数字在排序数组中出现的次数\"></a>数字在排序数组中出现的次数</h2><p>题目描述</p>\n<blockquote>\n<p>统计一个数字在排序数组中出现的次数。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def GetNumberOfK(self, data, k):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        left, right = 0, len(data) - 1</span><br><span class=\"line\">        while left &lt;= right:</span><br><span class=\"line\">            mid = (left + right) / 2</span><br><span class=\"line\">            if data[mid] &lt; k:</span><br><span class=\"line\">                left = mid + 1</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                right = mid - 1</span><br><span class=\"line\">        i = left</span><br><span class=\"line\">        left, right = 0, len(data) - 1</span><br><span class=\"line\">        while left &lt;= right:</span><br><span class=\"line\">            mid = (left + right) / 2</span><br><span class=\"line\">            if data[mid] &lt;= k:</span><br><span class=\"line\">                left = mid + 1</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                right = mid - 1</span><br><span class=\"line\">        j = left</span><br><span class=\"line\">        return j - i</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的深度\"><a href=\"#二叉树的深度\" class=\"headerlink\" title=\"二叉树的深度\"></a>二叉树的深度</h2><p>题目描述</p>\n<blockquote>\n<p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def TreeDepth(self, pRoot):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return max(self.TreeDepth(pRoot.left), self.TreeDepth(pRoot.right)) + 1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h2><p>题目描述</p>\n<blockquote>\n<p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def depth(self, pRoot):</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return max(self.depth(pRoot.left), self.depth(pRoot.right)) + 1</span><br><span class=\"line\">    def IsBalanced_Solution(self, pRoot):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = self.depth(pRoot.left)</span><br><span class=\"line\">            right = self.depth(pRoot.right)</span><br><span class=\"line\">            if left == right or abs(left - right) == 1:</span><br><span class=\"line\">                return self.IsBalanced_Solution(pRoot.left) and self.IsBalanced_Solution(pRoot.right)</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组中只出现一次的数字\"><a href=\"#数组中只出现一次的数字\" class=\"headerlink\" title=\"数组中只出现一次的数字\"></a>数组中只出现一次的数字</h2><p>题目描述</p>\n<blockquote>\n<p>一个整型数组里除了两个数字之外，其他的数字都出现了偶数次。请写程序找出这两个只出现一次的数字。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">import collections</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回[a,b] 其中ab是出现一次的两个数字</span><br><span class=\"line\">    def FindNumsAppearOnce(self, array):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        counter = collections.Counter(array)</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        for a in array:</span><br><span class=\"line\">            if counter[a] == 1:</span><br><span class=\"line\">                res.append(a)</span><br><span class=\"line\">        return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"和为S的连续正数序列\"><a href=\"#和为S的连续正数序列\" class=\"headerlink\" title=\"和为S的连续正数序列\"></a>和为S的连续正数序列</h2><p>题目描述</p>\n<blockquote>\n<p>小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def FindContinuousSequence(self, tsum):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        i, j = 2, int(math.sqrt(2*tsum))</span><br><span class=\"line\">        for n in range(j, i-1, -1):</span><br><span class=\"line\">            if n &amp; 1 and tsum % n == 0:</span><br><span class=\"line\">                r = []</span><br><span class=\"line\">                m = tsum / n</span><br><span class=\"line\">                for x in range(m - (n-1)/2, m + (n-1)/2 + 1):</span><br><span class=\"line\">                    r.append(x)</span><br><span class=\"line\">                res.append(r)</span><br><span class=\"line\">            elif n &amp; 1 == 0 and (tsum % n) * 2 == n:</span><br><span class=\"line\">                r = []</span><br><span class=\"line\">                m = ((2 * tsum) / n) / 2</span><br><span class=\"line\">                for x in range(m-n/2+1, m+n/2 + 1):</span><br><span class=\"line\">                    r.append(x)</span><br><span class=\"line\">                res.append(r)</span><br><span class=\"line\">        return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"和为S的两个数字\"><a href=\"#和为S的两个数字\" class=\"headerlink\" title=\"和为S的两个数字\"></a>和为S的两个数字</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def FindNumbersWithSum(self, array, tsum):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        d = &#123;&#125;</span><br><span class=\"line\">        for i, a in enumerate(array):</span><br><span class=\"line\">            d[a] = i</span><br><span class=\"line\">        r = []</span><br><span class=\"line\">        m = float(&#x27;inf&#x27;)</span><br><span class=\"line\">        for v in d:</span><br><span class=\"line\">            if (tsum-v) in d:</span><br><span class=\"line\">                if v * (tsum-v) &lt; m:</span><br><span class=\"line\">                    m = v * (tsum-v)</span><br><span class=\"line\">                    r = [v, tsum-v]</span><br><span class=\"line\">        return r</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"左旋转字符串\"><a href=\"#左旋转字符串\" class=\"headerlink\" title=\"左旋转字符串\"></a>左旋转字符串</h2><p>题目描述</p>\n<blockquote>\n<p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S&#x3D;”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def LeftRotateString(self, s, n):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if n &lt;= 0:</span><br><span class=\"line\">            return s</span><br><span class=\"line\">        if not s:</span><br><span class=\"line\">            return &quot;&quot;</span><br><span class=\"line\">        n = n % len(s)</span><br><span class=\"line\">        a = s[:n][::-1]</span><br><span class=\"line\">        b = s[n:][::-1]</span><br><span class=\"line\">        return (a + b)[::-1]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"翻转单词顺序列\"><a href=\"#翻转单词顺序列\" class=\"headerlink\" title=\"翻转单词顺序列\"></a>翻转单词顺序列</h2><p>题目描述</p>\n<blockquote>\n<p>牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def ReverseSentence(self, s):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        r = &quot;&quot;</span><br><span class=\"line\">        i = 0</span><br><span class=\"line\">        start = 0</span><br><span class=\"line\">        count = 0</span><br><span class=\"line\">        while i &lt; len(s):</span><br><span class=\"line\">            while i &lt; len(s) and s[i] is not &#x27; &#x27;:</span><br><span class=\"line\">                count += 1</span><br><span class=\"line\">                i += 1</span><br><span class=\"line\">            r += s[start:start + count][::-1]</span><br><span class=\"line\">            while i &lt; len(s) and s[i] is &#x27; &#x27;:</span><br><span class=\"line\">                r += &#x27; &#x27;</span><br><span class=\"line\">                i += 1</span><br><span class=\"line\">            start = i</span><br><span class=\"line\">            count = 0</span><br><span class=\"line\">        return r[::-1]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扑克牌顺子\"><a href=\"#扑克牌顺子\" class=\"headerlink\" title=\"扑克牌顺子\"></a>扑克牌顺子</h2><p>题目描述</p>\n<blockquote>\n<p>LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)…他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def IsContinuous(self, numbers):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not numbers:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            numbers.sort()</span><br><span class=\"line\">            n = len(numbers)</span><br><span class=\"line\">            i = 0</span><br><span class=\"line\">            zeros = 0</span><br><span class=\"line\">            while i &lt; n:</span><br><span class=\"line\">                if numbers[i] == 0:</span><br><span class=\"line\">                    zeros += 1</span><br><span class=\"line\">                i += 1</span><br><span class=\"line\">            if zeros == n - 1:</span><br><span class=\"line\">                return True</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                i = zeros</span><br><span class=\"line\">                while i &lt; n - 1:</span><br><span class=\"line\">                    gap = numbers[i + 1] - numbers[i] - 1</span><br><span class=\"line\">                    if gap &gt; zeros or gap &lt; 0:</span><br><span class=\"line\">                        return False</span><br><span class=\"line\">                    else:</span><br><span class=\"line\">                        zeros -= gap</span><br><span class=\"line\">                    i += 1</span><br><span class=\"line\">                return True</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"孩子们的游戏-圆圈中最后剩下的数\"><a href=\"#孩子们的游戏-圆圈中最后剩下的数\" class=\"headerlink\" title=\"孩子们的游戏(圆圈中最后剩下的数)\"></a>孩子们的游戏(圆圈中最后剩下的数)</h2><p>题目描述</p>\n<blockquote>\n<p>每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0…m-1报数….这样下去….直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class ListNode:</span><br><span class=\"line\">    def __init__(self, val):</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def LastRemaining_Solution(self, n, m):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if n == 0:</span><br><span class=\"line\">            return -1</span><br><span class=\"line\">        h = ListNode(0)</span><br><span class=\"line\">        p = h</span><br><span class=\"line\">        for i in range(1, n):</span><br><span class=\"line\">            p.next = ListNode(i)</span><br><span class=\"line\">            p = p.next</span><br><span class=\"line\">        p.next = h</span><br><span class=\"line\">        while h != h.next:</span><br><span class=\"line\">            for i in range(1, m):</span><br><span class=\"line\">                p = p.next</span><br><span class=\"line\">                h = h.next</span><br><span class=\"line\">            h = h.next</span><br><span class=\"line\">            p.next = h</span><br><span class=\"line\">        return h.val</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"求1-2-3-…-n\"><a href=\"#求1-2-3-…-n\" class=\"headerlink\" title=\"求1+2+3+…+n\"></a>求1+2+3+…+n</h2><p>题目描述</p>\n<blockquote>\n<p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.r = 0</span><br><span class=\"line\">    def Sum_Solution(self, n):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        def recursive(n):</span><br><span class=\"line\">            self.r += n</span><br><span class=\"line\">            n -= 1</span><br><span class=\"line\">            return (n&gt;0) and recursive(n)</span><br><span class=\"line\">        recursive(n)</span><br><span class=\"line\">        return self.r</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不用加减乘除做加法\"><a href=\"#不用加减乘除做加法\" class=\"headerlink\" title=\"不用加减乘除做加法\"></a>不用加减乘除做加法</h2><p>题目描述</p>\n<blockquote>\n<p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、&#x2F;四则运算符号。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def Add(self, num1, num2):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        return sum([num1, num2])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把字符串转换成整数\"><a href=\"#把字符串转换成整数\" class=\"headerlink\" title=\"把字符串转换成整数\"></a>把字符串转换成整数</h2><p>题目描述</p>\n<blockquote>\n<p>将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def StrToInt(self, s):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not s:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        if not s[0].isdigit() and s[0] is not &#x27;+&#x27; and s[0] is not &#x27;-&#x27;:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        if s[0] is &#x27;+&#x27; and len(s) == 1 or s[0] is &#x27;-&#x27; and len(s) == 1:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        for i in range(1, len(s)):</span><br><span class=\"line\">            if not s[i].isdigit():</span><br><span class=\"line\">                return 0</span><br><span class=\"line\">        if s[0] == &#x27;-&#x27;:</span><br><span class=\"line\">            return -int(s[1:])</span><br><span class=\"line\">        elif s[0] == &#x27;+&#x27;:</span><br><span class=\"line\">            return int(s[1:])</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return int(s)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组中重复的数字\"><a href=\"#数组中重复的数字\" class=\"headerlink\" title=\"数组中重复的数字\"></a>数组中重复的数字</h2><p>题目描述</p>\n<blockquote>\n<p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">import collections</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 这里要特别注意~找到任意重复的一个值并赋值到duplication[0]</span><br><span class=\"line\">    # 函数返回True/False</span><br><span class=\"line\">    def duplicate(self, numbers, duplication):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not numbers:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            counter = collections.Counter(numbers)</span><br><span class=\"line\">            for n in numbers:</span><br><span class=\"line\">                if counter[n] != 1:</span><br><span class=\"line\">                    duplication[0] = n</span><br><span class=\"line\">                    return True</span><br><span class=\"line\">            return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建乘积数组\"><a href=\"#构建乘积数组\" class=\"headerlink\" title=\"构建乘积数组\"></a>构建乘积数组</h2><p>题目描述</p>\n<blockquote>\n<p>给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]&#x3D;A[0]A[1]…A[i-1]A[i+1]…A[n-1]。不能使用除法。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def multiply(self, A):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not A:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            n = len(A)</span><br><span class=\"line\">            B = [0] * n</span><br><span class=\"line\">            B[0] = 1</span><br><span class=\"line\">            for i in range(1, n):</span><br><span class=\"line\">                B[i] = B[i - 1] * A[i - 1]</span><br><span class=\"line\">            temp = 1</span><br><span class=\"line\">            for j in range(n - 2, -1, -1):</span><br><span class=\"line\">                temp *= A[j + 1]</span><br><span class=\"line\">                B[j] *= temp</span><br><span class=\"line\">            return B</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正则表达式匹配\"><a href=\"#正则表达式匹配\" class=\"headerlink\" title=\"正则表达式匹配\"></a>正则表达式匹配</h2><p>题目描述</p>\n<blockquote>\n<p>请实现一个函数用来匹配包括’.’和’‘的正则表达式。模式中的字符’.’表示任意一个字符，而’‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”abaca”匹配，但是与”aa.a”和”ab*a”均不匹配</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution(object):</span><br><span class=\"line\">    def match(self, text, pattern):</span><br><span class=\"line\">        if not pattern:</span><br><span class=\"line\">            return not text</span><br><span class=\"line\">        first_match = bool(text) and pattern[0] in &#123;text[0], &#x27;.&#x27;&#125;</span><br><span class=\"line\">        if len(pattern) &gt;= 2 and pattern[1] == &#x27;*&#x27;:</span><br><span class=\"line\">            return (self.match(text, pattern[2:]) or</span><br><span class=\"line\">                    first_match and self.match(text[1:], pattern))</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return first_match and self.match(text[1:], pattern[1:])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表示数值的字符串\"><a href=\"#表示数值的字符串\" class=\"headerlink\" title=\"表示数值的字符串\"></a>表示数值的字符串</h2><p>题目描述</p>\n<blockquote>\n<p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # s字符串</span><br><span class=\"line\">    def isNumeric(self, s):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            p = float(s)</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符流中第一个不重复的字符\"><a href=\"#字符流中第一个不重复的字符\" class=\"headerlink\" title=\"字符流中第一个不重复的字符\"></a>字符流中第一个不重复的字符</h2><p>题目描述</p>\n<blockquote>\n<p>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是”g”。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是”l”。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.buffer = &#x27;&#x27;</span><br><span class=\"line\">    # 返回对应char</span><br><span class=\"line\">    def FirstAppearingOnce(self):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        appear = [False for _ in range(256)]</span><br><span class=\"line\">        for b in self.buffer:</span><br><span class=\"line\">            if appear[ord(b)] is False:</span><br><span class=\"line\">                appear[ord(b)] = True</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                appear[ord(b)] = False</span><br><span class=\"line\">        for b in self.buffer:</span><br><span class=\"line\">            if appear[ord(b)] is True:</span><br><span class=\"line\">                return b</span><br><span class=\"line\">        return &#x27;#&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    def Insert(self, char):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        self.buffer += char</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表中环的入口结点\"><a href=\"#链表中环的入口结点\" class=\"headerlink\" title=\"链表中环的入口结点\"></a>链表中环的入口结点</h2><p>题目描述</p>\n<blockquote>\n<p>给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def EntryNodeOfLoop(self, pHead):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pHead or not pHead.next or not pHead.next.next:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            slow = pHead.next</span><br><span class=\"line\">            fast = pHead.next.next</span><br><span class=\"line\">            while slow != fast:</span><br><span class=\"line\">                if fast and fast.next:</span><br><span class=\"line\">                    slow = slow.next</span><br><span class=\"line\">                    fast = fast.next.next</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    return None</span><br><span class=\"line\">            slow = pHead</span><br><span class=\"line\">            while slow != fast:</span><br><span class=\"line\">                slow = slow.next</span><br><span class=\"line\">                fast = fast.next</span><br><span class=\"line\">            return slow</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除链表中重复的结点\"><a href=\"#删除链表中重复的结点\" class=\"headerlink\" title=\"删除链表中重复的结点\"></a>删除链表中重复的结点</h2><p>题目描述</p>\n<blockquote>\n<p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def deleteDuplication(self, pHead):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        p, q, r = None, pHead, None</span><br><span class=\"line\">        while q:</span><br><span class=\"line\">            if q.next and q.next.val == q.val:</span><br><span class=\"line\">                r = q.next</span><br><span class=\"line\">                while r.next and r.next.val == q.val:</span><br><span class=\"line\">                    r = r.next</span><br><span class=\"line\">                if q == pHead:</span><br><span class=\"line\">                    pHead = r.next</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    p.next = r.next</span><br><span class=\"line\">                q = r.next</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                p = q</span><br><span class=\"line\">                q = q.next</span><br><span class=\"line\">        return pHead</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的下一个结点\"><a href=\"#二叉树的下一个结点\" class=\"headerlink\" title=\"二叉树的下一个结点\"></a>二叉树的下一个结点</h2><p>题目描述</p>\n<blockquote>\n<p>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeLinkNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def GetNext(self, pNode):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pNode:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            if pNode.right:</span><br><span class=\"line\">                res = pNode.right</span><br><span class=\"line\">                while res.left:</span><br><span class=\"line\">                    res = res.left</span><br><span class=\"line\">                return res</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                parent = pNode.next</span><br><span class=\"line\">                current = pNode</span><br><span class=\"line\">                while parent and parent.left != current:</span><br><span class=\"line\">                    current = parent</span><br><span class=\"line\">                    parent = parent.next</span><br><span class=\"line\">                return parent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对称的二叉树\"><a href=\"#对称的二叉树\" class=\"headerlink\" title=\"对称的二叉树\"></a>对称的二叉树</h2><p>题目描述</p>\n<blockquote>\n<p>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def mirror(self, pRoot):</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = self.mirror(pRoot.left)</span><br><span class=\"line\">            right = self.mirror(pRoot.right)</span><br><span class=\"line\">            pRoot.left, pRoot.right = right, left</span><br><span class=\"line\">            return pRoot</span><br><span class=\"line\">        </span><br><span class=\"line\">    def sample(self, r1, r2):</span><br><span class=\"line\">        if not r1 and not r2:</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return (r1 and r2) and (r1.val == r2.val) and self.sample(r1.left, r2.left) and self.sample(r1.right, r2.right)</span><br><span class=\"line\">    </span><br><span class=\"line\">    def isSymmetrical(self, pRoot):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left, right = pRoot.left, pRoot.right</span><br><span class=\"line\">            right = self.mirror(right)</span><br><span class=\"line\">            return self.sample(left, right)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按之字形顺序打印二叉树\"><a href=\"#按之字形顺序打印二叉树\" class=\"headerlink\" title=\"按之字形顺序打印二叉树\"></a>按之字形顺序打印二叉树</h2><p>题目描述</p>\n<blockquote>\n<p>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def Print(self, pRoot):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            res = []</span><br><span class=\"line\">            s1, s2 = [pRoot], []</span><br><span class=\"line\">            while s1 or s2:</span><br><span class=\"line\">                if s1:</span><br><span class=\"line\">                    r = []</span><br><span class=\"line\">                    while s1:</span><br><span class=\"line\">                        v = s1.pop()</span><br><span class=\"line\">                        r.append(v.val)</span><br><span class=\"line\">                        if v.left:</span><br><span class=\"line\">                            s2.append(v.left)</span><br><span class=\"line\">                        if v.right:</span><br><span class=\"line\">                            s2.append(v.right)</span><br><span class=\"line\">                    res.append(r)</span><br><span class=\"line\">                if s2:</span><br><span class=\"line\">                    r = []</span><br><span class=\"line\">                    while s2:</span><br><span class=\"line\">                        v = s2.pop()</span><br><span class=\"line\">                        r.append(v.val)</span><br><span class=\"line\">                        if v.right:</span><br><span class=\"line\">                            s1.append(v.right)</span><br><span class=\"line\">                        if v.left:</span><br><span class=\"line\">                            s1.append(v.left)</span><br><span class=\"line\">                    res.append(r)</span><br><span class=\"line\">            return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把二叉树打印成多行\"><a href=\"#把二叉树打印成多行\" class=\"headerlink\" title=\"把二叉树打印成多行\"></a>把二叉树打印成多行</h2><p>题目描述</p>\n<blockquote>\n<p>从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回二维列表[[1,2],[4,5]]</span><br><span class=\"line\">    def Print(self, pRoot):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            res = []</span><br><span class=\"line\">            q1, q2 = [pRoot], []</span><br><span class=\"line\">            while q1 or q2:</span><br><span class=\"line\">                if q1:</span><br><span class=\"line\">                    r = []</span><br><span class=\"line\">                    while q1:</span><br><span class=\"line\">                        v = q1.pop(0)</span><br><span class=\"line\">                        r.append(v.val)</span><br><span class=\"line\">                        if v.left:</span><br><span class=\"line\">                            q2.append(v.left)</span><br><span class=\"line\">                        if v.right:</span><br><span class=\"line\">                            q2.append(v.right)</span><br><span class=\"line\">                    res.append(r)</span><br><span class=\"line\">                if q2:</span><br><span class=\"line\">                    r = []</span><br><span class=\"line\">                    while q2:</span><br><span class=\"line\">                        v = q2.pop(0)</span><br><span class=\"line\">                        r.append(v.val)</span><br><span class=\"line\">                        if v.left:</span><br><span class=\"line\">                            q1.append(v.left)</span><br><span class=\"line\">                        if v.right:</span><br><span class=\"line\">                            q1.append(v.right)</span><br><span class=\"line\">                    res.append(r)</span><br><span class=\"line\">            return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"序列化二叉树\"><a href=\"#序列化二叉树\" class=\"headerlink\" title=\"序列化二叉树\"></a>序列化二叉树</h2><p>题目描述</p>\n<blockquote>\n<p>请实现两个函数，分别用来序列化和反序列化二叉树</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    flag = -1</span><br><span class=\"line\">    </span><br><span class=\"line\">    def Serialize(self, root):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not root:</span><br><span class=\"line\">            return &#x27;#&#x27;</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return str(root.val) + &#x27;,&#x27; + self.Serialize(root.left) + &#x27;,&#x27; + self.Serialize(root.right)</span><br><span class=\"line\"></span><br><span class=\"line\">    def Deserialize(self, s):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        self.flag += 1</span><br><span class=\"line\">        if self.flag &gt;= len(s):</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        root = None</span><br><span class=\"line\">        l = s.split(&#x27;,&#x27;)</span><br><span class=\"line\">        if l[self.flag] != &#x27;#&#x27;:</span><br><span class=\"line\">            root = TreeNode(int(l[self.flag]))</span><br><span class=\"line\">            root.left = self.Deserialize(s)</span><br><span class=\"line\">            root.right = self.Deserialize(s)</span><br><span class=\"line\">        return root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树的第k个结点\"><a href=\"#二叉搜索树的第k个结点\" class=\"headerlink\" title=\"二叉搜索树的第k个结点\"></a>二叉搜索树的第k个结点</h2><p>题目描述</p>\n<blockquote>\n<p>给定一棵二叉搜索树，请找出其中的第k小的结点。例如， （5，3，7，2，4，6，8） 中，按结点数值大小顺序第三小结点的值为4。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    count = 0</span><br><span class=\"line\">    # 返回对应节点TreeNode</span><br><span class=\"line\">    def KthNode(self, pRoot, k):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot or k &lt;= 0:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            res = self.KthNode(pRoot.left, k)</span><br><span class=\"line\">            if res:</span><br><span class=\"line\">                return res</span><br><span class=\"line\">            self.count += 1</span><br><span class=\"line\">            if self.count == k:</span><br><span class=\"line\">                return pRoot</span><br><span class=\"line\">            res = self.KthNode(pRoot.right, k)</span><br><span class=\"line\">            if res:</span><br><span class=\"line\">                return res</span><br><span class=\"line\">            return None</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据流中的中位数\"><a href=\"#数据流中的中位数\" class=\"headerlink\" title=\"数据流中的中位数\"></a>数据流中的中位数</h2><p>题目描述</p>\n<blockquote>\n<p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.data=[]</span><br><span class=\"line\">    def Insert(self, num):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        self.data.append(num)</span><br><span class=\"line\">        self.data.sort()</span><br><span class=\"line\">    def GetMedian(self, data):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        n = len(self.data)</span><br><span class=\"line\">        if n % 2 == 0:</span><br><span class=\"line\">            return (self.data[n/2] + self.data[n/2-1]) / 2.0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return self.data[n/2]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"滑动窗口的最大值\"><a href=\"#滑动窗口的最大值\" class=\"headerlink\" title=\"滑动窗口的最大值\"></a>滑动窗口的最大值</h2><p>题目描述</p>\n<blockquote>\n<p>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def maxInWindows(self, num, size):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if size &lt;= 0:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        for i in xrange(0, len(num)-size+1):</span><br><span class=\"line\">            res.append(max(num[i:i+size]))</span><br><span class=\"line\">        return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩阵中的路径\"><a href=\"#矩阵中的路径\" class=\"headerlink\" title=\"矩阵中的路径\"></a>矩阵中的路径</h2><p>题目描述</p>\n<blockquote>\n<p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。 例如 a b c e s f c s a d e e 这样的3 X 4 矩阵中包含一条字符串”bcced”的路径，但是矩阵中不包含”abcb”路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def hasPath(self, matrix, rows, cols, path):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        for i in range(rows):</span><br><span class=\"line\">            for j in range(cols):</span><br><span class=\"line\">                if matrix[i*cols+j] == path[0]:</span><br><span class=\"line\">                    if self.find(list(matrix), rows, cols, path[1:], i, j):</span><br><span class=\"line\">                        return True</span><br><span class=\"line\">        return False</span><br><span class=\"line\">    def find(self, matrix, rows, cols, path, i, j):</span><br><span class=\"line\">        if not path:</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        matrix[i*cols+j] = &#x27;0&#x27;</span><br><span class=\"line\">        if j+1 &lt; cols and matrix[i*cols+j+1] == path[0]:</span><br><span class=\"line\">            return self.find(matrix, rows, cols, path[1:], i, j+1)</span><br><span class=\"line\">        elif j-1 &gt;= 0 and matrix[i*cols+j-1] == path[0]:</span><br><span class=\"line\">            return self.find(matrix, rows, cols, path[1:], i, j-1)</span><br><span class=\"line\">        elif i+1 &lt; rows and matrix[(i+1)*cols+j] == path[0]:</span><br><span class=\"line\">            return self.find(matrix, rows, cols, path[1:], i+1, j)</span><br><span class=\"line\">        elif i-1 &gt;= 0 and matrix[(i-1)*cols+j] == path[0]:</span><br><span class=\"line\">            return self.find(matrix, rows, cols, path[1:], i-1, j)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"机器人的运动范围\"><a href=\"#机器人的运动范围\" class=\"headerlink\" title=\"机器人的运动范围\"></a>机器人的运动范围</h2><p>题目描述</p>\n<blockquote>\n<p>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 &#x3D; 18。但是，它不能进入方格（35,38），因为3+5+3+8 &#x3D; 19。请问该机器人能够达到多少个格子？</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    result = 0</span><br><span class=\"line\">    </span><br><span class=\"line\">    def movingCount(self, threshold, rows, cols):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        record = [[True] * cols for _ in range(rows)]</span><br><span class=\"line\">        </span><br><span class=\"line\">        def compute_index_sum(number):</span><br><span class=\"line\">            return sum(map(int, [_ for _ in str(number)]))</span><br><span class=\"line\">        </span><br><span class=\"line\">        def is_valid(i, j):</span><br><span class=\"line\">            if 0 &lt;= i &lt; rows and 0 &lt;= j &lt; cols and record[i][j] and compute_index_sum(i) + compute_index_sum(j) &lt;= threshold:</span><br><span class=\"line\">                return True</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br><span class=\"line\">            </span><br><span class=\"line\">        def dfs(i, j):</span><br><span class=\"line\">            if is_valid(i, j):</span><br><span class=\"line\">                record[i][j] = False</span><br><span class=\"line\">                self.result += 1</span><br><span class=\"line\">                dfs(i - 1, j)</span><br><span class=\"line\">                dfs(i + 1, j)</span><br><span class=\"line\">                dfs(i, j - 1)</span><br><span class=\"line\">                dfs(i, j + 1)</span><br><span class=\"line\">                </span><br><span class=\"line\">        dfs(0, 0)</span><br><span class=\"line\">        </span><br><span class=\"line\">        return self.result</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.nowcoder.com/exam/oj/ta?page=1&tpId=13&type=13\">牛客网剑指Offer编程题</a></p>\n<h2 id=\"二维数组中的查找\"><a href=\"#二维数组中的查找\" class=\"headerlink\" title=\"二维数组中的查找\"></a>二维数组中的查找</h2><p>题目描述</p>\n<blockquote>\n<p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # array 二维列表</span><br><span class=\"line\">    def Find(self, target, array):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not array:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            rows, cols = len(array), len(array[0])</span><br><span class=\"line\">            r, c = 0, cols - 1</span><br><span class=\"line\">            while r &lt;= rows - 1 and c &gt;= 0:</span><br><span class=\"line\">                if array[r][c] == target:</span><br><span class=\"line\">                    return True</span><br><span class=\"line\">                elif array[r][c] &lt; target:</span><br><span class=\"line\">                    r += 1</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    c -= 1</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"替换空格\"><a href=\"#替换空格\" class=\"headerlink\" title=\"替换空格\"></a>替换空格</h2><p>题目描述</p>\n<blockquote>\n<p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # s 源字符串</span><br><span class=\"line\">    def replaceSpace(self, s):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        r = &#x27;&#x27;</span><br><span class=\"line\">        for c in s:</span><br><span class=\"line\">            if c != &#x27; &#x27;:</span><br><span class=\"line\">                r += c</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                r += &#x27;%20&#x27;</span><br><span class=\"line\">        return r</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从尾到头打印链表\"><a href=\"#从尾到头打印链表\" class=\"headerlink\" title=\"从尾到头打印链表\"></a>从尾到头打印链表</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回从尾部到头部的列表值序列，例如[1,2,3]</span><br><span class=\"line\">    def printListFromTailToHead(self, listNode):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        h = listNode</span><br><span class=\"line\">        r = []</span><br><span class=\"line\">        while h:</span><br><span class=\"line\">            r.insert(0, h.val)</span><br><span class=\"line\">            h = h.next</span><br><span class=\"line\">        return r</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重建二叉树\"><a href=\"#重建二叉树\" class=\"headerlink\" title=\"重建二叉树\"></a>重建二叉树</h2><p>题目描述</p>\n<blockquote>\n<p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回构造的TreeNode根节点</span><br><span class=\"line\">    def reConstructBinaryTree(self, pre, tin):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pre:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            value = pre[0]</span><br><span class=\"line\">            root = TreeNode(value)</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                rindex = tin.index(value)</span><br><span class=\"line\">            except:</span><br><span class=\"line\">                return None</span><br><span class=\"line\">            left = self.reConstructBinaryTree(pre[1:rindex+1], tin[:rindex])</span><br><span class=\"line\">            right = self.reConstructBinaryTree(pre[rindex+1:], tin[rindex+1:])</span><br><span class=\"line\">            root.left, root.right = left, right</span><br><span class=\"line\">            return root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用两个栈实现队列\"><a href=\"#用两个栈实现队列\" class=\"headerlink\" title=\"用两个栈实现队列\"></a>用两个栈实现队列</h2><p>题目描述</p>\n<blockquote>\n<p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.stack_first = []</span><br><span class=\"line\">        self.stack_second = []</span><br><span class=\"line\">    def push(self, node):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        self.stack_first.append(node)</span><br><span class=\"line\">    def pop(self):</span><br><span class=\"line\">        # return xx</span><br><span class=\"line\">        if not self.stack_first and not self.stack_second:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        elif self.stack_second:</span><br><span class=\"line\">            return self.stack_second.pop()</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            while self.stack_first:</span><br><span class=\"line\">                self.stack_second.append(self.stack_first.pop())</span><br><span class=\"line\">            return self.stack_second.pop()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"旋转数组的最小数字\"><a href=\"#旋转数组的最小数字\" class=\"headerlink\" title=\"旋转数组的最小数字\"></a>旋转数组的最小数字</h2><p>题目描述</p>\n<blockquote>\n<p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def minNumberInRotateArray(self, rotateArray):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not rotateArray:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left, right = 0, len(rotateArray) - 1</span><br><span class=\"line\">            value = rotateArray[-1]</span><br><span class=\"line\">            while left &lt;= right:</span><br><span class=\"line\">                mid = (left + right) / 2</span><br><span class=\"line\">                if rotateArray[mid] &gt; value:</span><br><span class=\"line\">                    left = mid + 1</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    right = mid - 1</span><br><span class=\"line\">            return rotateArray[left]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h2><p>题目描述</p>\n<blockquote>\n<p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。n&lt;&#x3D;39</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def Fibonacci(self, n):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        x, y = 0, 1</span><br><span class=\"line\">        for _ in range(n):</span><br><span class=\"line\">            x, y = y, x + y</span><br><span class=\"line\">        return x</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"跳台阶\"><a href=\"#跳台阶\" class=\"headerlink\" title=\"跳台阶\"></a>跳台阶</h2><p>题目描述</p>\n<blockquote>\n<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def jumpFloor(self, number):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        x, y = 1, 1</span><br><span class=\"line\">        for _ in range(number):</span><br><span class=\"line\">            x, y = y, x + y</span><br><span class=\"line\">        return x</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变态跳台阶\"><a href=\"#变态跳台阶\" class=\"headerlink\" title=\"变态跳台阶\"></a>变态跳台阶</h2><p>题目描述</p>\n<blockquote>\n<p> 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def jumpFloorII(self, number):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        return 1 &lt;&lt; (number - 1)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩形覆盖\"><a href=\"#矩形覆盖\" class=\"headerlink\" title=\"矩形覆盖\"></a>矩形覆盖</h2><p>题目描述</p>\n<blockquote>\n<p>我们可以用21的小矩形横着或者竖着去覆盖更大的矩形。请问用n个21的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def rectCover(self, number):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if number == 0:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            x, y = 1, 1</span><br><span class=\"line\">            for _ in range(number):</span><br><span class=\"line\">                x, y = y, x + y</span><br><span class=\"line\">            return x</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二进制中1的个数\"><a href=\"#二进制中1的个数\" class=\"headerlink\" title=\"二进制中1的个数\"></a>二进制中1的个数</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def NumberOf1(self, n):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        return sum([(n&gt;&gt;i &amp; 1) for i in range(32)])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数值的整数次方\"><a href=\"#数值的整数次方\" class=\"headerlink\" title=\"数值的整数次方\"></a>数值的整数次方</h2><p>题目描述</p>\n<blockquote>\n<p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def Power(self, base, exponent):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if exponent == 0:</span><br><span class=\"line\">            return 1</span><br><span class=\"line\">        elif exponent &gt; 0:</span><br><span class=\"line\">            if exponent &amp; 1:</span><br><span class=\"line\">                return base * self.Power(base, exponent/2) ** 2</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return self.Power(base, exponent/2) ** 2</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return 1.0 / self.Power(base, -exponent)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调整数组顺序使奇数位于偶数前面\"><a href=\"#调整数组顺序使奇数位于偶数前面\" class=\"headerlink\" title=\"调整数组顺序使奇数位于偶数前面\"></a>调整数组顺序使奇数位于偶数前面</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def reOrderArray(self, array):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        odd, even = [], []</span><br><span class=\"line\">        for a in array:</span><br><span class=\"line\">            if a &amp; 1:</span><br><span class=\"line\">                odd.append(a)</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                even.append(a)</span><br><span class=\"line\">        return odd + even</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表中倒数第k个结点\"><a href=\"#链表中倒数第k个结点\" class=\"headerlink\" title=\"链表中倒数第k个结点\"></a>链表中倒数第k个结点</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个链表，输出该链表中倒数第k个结点。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def FindKthToTail(self, head, k):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if k &lt;= 0:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            p = head</span><br><span class=\"line\">            q = head</span><br><span class=\"line\">            while k and q:</span><br><span class=\"line\">                q = q.next</span><br><span class=\"line\">                k -= 1</span><br><span class=\"line\">            if k &gt; 0:</span><br><span class=\"line\">                return None</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                while q:</span><br><span class=\"line\">                    p = p.next</span><br><span class=\"line\">                    q = q.next</span><br><span class=\"line\">                return p</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个链表，反转链表后，输出新链表的表头。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回ListNode</span><br><span class=\"line\">    def ReverseList(self, pHead):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pHead:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            q, r = pHead, pHead.next</span><br><span class=\"line\">            q.next = None</span><br><span class=\"line\">            while r:</span><br><span class=\"line\">                p = q</span><br><span class=\"line\">                q = r</span><br><span class=\"line\">                r = r.next</span><br><span class=\"line\">                q.next = p</span><br><span class=\"line\">            return q</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并两个排序的链表\"><a href=\"#合并两个排序的链表\" class=\"headerlink\" title=\"合并两个排序的链表\"></a>合并两个排序的链表</h2><p>题目描述</p>\n<blockquote>\n<p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回合并后列表</span><br><span class=\"line\">    def Merge(self, pHead1, pHead2):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pHead1 and not pHead2:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            if not pHead1:</span><br><span class=\"line\">                return pHead2</span><br><span class=\"line\">            elif not pHead2:</span><br><span class=\"line\">                return pHead1</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                if pHead1.val &lt;= pHead2.val:</span><br><span class=\"line\">                    head = pHead1</span><br><span class=\"line\">                    head.next = self.Merge(pHead1.next, pHead2)</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    head = pHead2</span><br><span class=\"line\">                    head.next = self.Merge(pHead1, pHead2.next)</span><br><span class=\"line\">                return head</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"树的子结构\"><a href=\"#树的子结构\" class=\"headerlink\" title=\"树的子结构\"></a>树的子结构</h2><p>题目描述</p>\n<blockquote>\n<p>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def dfs(self, r1, r2):</span><br><span class=\"line\">        if not r2:</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        elif not r1:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            if r1.val != r2.val:</span><br><span class=\"line\">                return False</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return self.dfs(r1.left, r2.left) and self.dfs(r1.right, r2.right)</span><br><span class=\"line\">    </span><br><span class=\"line\">    def HasSubtree(self, pRoot1, pRoot2):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot1:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        elif not pRoot2:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return self.dfs(pRoot1, pRoot2) or self.HasSubtree(pRoot1.left, pRoot2) or self.HasSubtree(pRoot1.right, pRoot2)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的镜像\"><a href=\"#二叉树的镜像\" class=\"headerlink\" title=\"二叉树的镜像\"></a>二叉树的镜像</h2><p>题目描述</p>\n<blockquote>\n<p>操作给定的二叉树，将其变换为源二叉树的镜像。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回镜像树的根节点</span><br><span class=\"line\">    def Mirror(self, root):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not root:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = self.Mirror(root.left)</span><br><span class=\"line\">            right = self.Mirror(root.right)</span><br><span class=\"line\">            root.left, root.right = right, left</span><br><span class=\"line\">            return root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顺时针打印矩阵\"><a href=\"#顺时针打印矩阵\" class=\"headerlink\" title=\"顺时针打印矩阵\"></a>顺时针打印矩阵</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # matrix类型为二维列表，需要返回列表</span><br><span class=\"line\">    def printMatrix(self, matrix):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not matrix:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            res = []</span><br><span class=\"line\">            rows, cols = len(matrix), len(matrix[0])</span><br><span class=\"line\">            l, r, t, b = 0, cols - 1, 0, rows - 1</span><br><span class=\"line\">            while l &lt;= r and t &lt;= b:</span><br><span class=\"line\">                for i in range(l, r+1):</span><br><span class=\"line\">                    res.append(matrix[t][i])</span><br><span class=\"line\">                if t &lt; b:</span><br><span class=\"line\">                    for i in range(t+1, b+1):</span><br><span class=\"line\">                        res.append(matrix[i][r])</span><br><span class=\"line\">                    if r &gt; l:</span><br><span class=\"line\">                        for i in range(r-1, l-1, -1):</span><br><span class=\"line\">                            res.append(matrix[b][i])</span><br><span class=\"line\">                        if t &lt; b - 1:</span><br><span class=\"line\">                            for i in range(b-1, t, -1):</span><br><span class=\"line\">                                res.append(matrix[i][l])</span><br><span class=\"line\">                            l += 1</span><br><span class=\"line\">                            r -= 1</span><br><span class=\"line\">                            t += 1</span><br><span class=\"line\">                            b -= 1</span><br><span class=\"line\">                        else:</span><br><span class=\"line\">                            break</span><br><span class=\"line\">                    else:</span><br><span class=\"line\">                        break</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    break</span><br><span class=\"line\">            return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包含min函数的栈\"><a href=\"#包含min函数的栈\" class=\"headerlink\" title=\"包含min函数的栈\"></a>包含min函数的栈</h2><p>题目描述</p>\n<blockquote>\n<p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.stack_first = []</span><br><span class=\"line\">        self.stack_second = []</span><br><span class=\"line\">    def push(self, node):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        self.stack_first.append(node)</span><br><span class=\"line\">        if not self.stack_second:</span><br><span class=\"line\">            self.stack_second.append(node)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            value = self.stack_second[-1]</span><br><span class=\"line\">            if node &lt;= value:</span><br><span class=\"line\">                self.stack_second.append(node)</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                self.stack_second.append(value)</span><br><span class=\"line\">    def pop(self):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        self.stack_first.pop()</span><br><span class=\"line\">        self.stack_second.pop()</span><br><span class=\"line\">    def top(self):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        return self.stack_first[-1]</span><br><span class=\"line\">    def min(self):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        return self.stack_second[-1]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"栈的压入、弹出序列\"><a href=\"#栈的压入、弹出序列\" class=\"headerlink\" title=\"栈的压入、弹出序列\"></a>栈的压入、弹出序列</h2><p>题目描述</p>\n<blockquote>\n<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def IsPopOrder(self, pushV, popV):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        n = len(pushV)</span><br><span class=\"line\">        if n == 0:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            res = []</span><br><span class=\"line\">            j = 0</span><br><span class=\"line\">            for i in range(n):</span><br><span class=\"line\">                res.append(pushV[i])</span><br><span class=\"line\">                while j &lt; n and res[-1] == popV[j]:</span><br><span class=\"line\">                    res.pop()</span><br><span class=\"line\">                    j += 1</span><br><span class=\"line\">            if not res:</span><br><span class=\"line\">                return True</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从上往下打印二叉树\"><a href=\"#从上往下打印二叉树\" class=\"headerlink\" title=\"从上往下打印二叉树\"></a>从上往下打印二叉树</h2><p>题目描述</p>\n<blockquote>\n<p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回从上到下每个节点值列表，例：[1,2,3]</span><br><span class=\"line\">    def PrintFromTopToBottom(self, root):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not root:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            res = []</span><br><span class=\"line\">            q = [root]</span><br><span class=\"line\">            while q:</span><br><span class=\"line\">                v = q.pop(0)</span><br><span class=\"line\">                res.append(v.val)</span><br><span class=\"line\">                if v.left:</span><br><span class=\"line\">                    q.append(v.left)</span><br><span class=\"line\">                if v.right:</span><br><span class=\"line\">                    q.append(v.right)</span><br><span class=\"line\">            return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树的后序遍历序列\"><a href=\"#二叉搜索树的后序遍历序列\" class=\"headerlink\" title=\"二叉搜索树的后序遍历序列\"></a>二叉搜索树的后序遍历序列</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def VerifySquenceOfBST(self, sequence):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not sequence:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            value = sequence[-1]</span><br><span class=\"line\">            n = len(sequence)</span><br><span class=\"line\">            i = 0</span><br><span class=\"line\">            while i &lt; n and sequence[i] &lt; value:</span><br><span class=\"line\">                i += 1</span><br><span class=\"line\">            while i &lt; n and sequence[i] &gt; value:</span><br><span class=\"line\">                i += 1</span><br><span class=\"line\">            if i == n - 1:</span><br><span class=\"line\">                return True</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树中和为某一值的路径\"><a href=\"#二叉树中和为某一值的路径\" class=\"headerlink\" title=\"二叉树中和为某一值的路径\"></a>二叉树中和为某一值的路径</h2><p>题目描述</p>\n<blockquote>\n<p>输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回二维列表，内部每个列表表示找到的路径</span><br><span class=\"line\">    def FindPath(self, root, expectNumber):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not root:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            if root.val == expectNumber and not root.left and not root.right:</span><br><span class=\"line\">                return [[root.val]]</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                left = self.FindPath(root.left, expectNumber - root.val)</span><br><span class=\"line\">                right = self.FindPath(root.right, expectNumber - root.val)</span><br><span class=\"line\">                return [[root.val] + l for l in left if l] + [[root.val] + r for r in right if r]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂链表的复制\"><a href=\"#复杂链表的复制\" class=\"headerlink\" title=\"复杂链表的复制\"></a>复杂链表的复制</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class RandomListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.label = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">#         self.random = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回 RandomListNode</span><br><span class=\"line\">    def Clone(self, pHead):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pHead:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            p = pHead</span><br><span class=\"line\">            while p:</span><br><span class=\"line\">                q = RandomListNode(p.label)</span><br><span class=\"line\">                q.next = p.next</span><br><span class=\"line\">                p.next = q</span><br><span class=\"line\">                p = q.next</span><br><span class=\"line\">                </span><br><span class=\"line\">            p = pHead</span><br><span class=\"line\">            while p:</span><br><span class=\"line\">                q = p.next</span><br><span class=\"line\">                if p.random:</span><br><span class=\"line\">                    q.random = p.random.next</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    pass</span><br><span class=\"line\">                p = q.next</span><br><span class=\"line\">                </span><br><span class=\"line\">            p = pHead</span><br><span class=\"line\">            h = p.next</span><br><span class=\"line\">            while p.next:</span><br><span class=\"line\">                q = p.next</span><br><span class=\"line\">                p.next = q.next</span><br><span class=\"line\">                p = q</span><br><span class=\"line\">            return h</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树与双向链表\"><a href=\"#二叉搜索树与双向链表\" class=\"headerlink\" title=\"二叉搜索树与双向链表\"></a>二叉搜索树与双向链表</h2><p>题目描述</p>\n<blockquote>\n<p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def Convert(self, pRootOfTree):</span><br><span class=\"line\">        root = pRootOfTree</span><br><span class=\"line\">        if not root:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            self.Convert(root.left)</span><br><span class=\"line\">            left = root.left</span><br><span class=\"line\">            if left:</span><br><span class=\"line\">                while left.right:</span><br><span class=\"line\">                    left = left.right</span><br><span class=\"line\">                root.left, left.right = left, root</span><br><span class=\"line\">                </span><br><span class=\"line\">            self.Convert(root.right)</span><br><span class=\"line\">            right = root.right</span><br><span class=\"line\">            if right:</span><br><span class=\"line\">                while right.left:</span><br><span class=\"line\">                    right = right.left</span><br><span class=\"line\">                root.right, right.left = right, root</span><br><span class=\"line\">                </span><br><span class=\"line\">            while root.left:</span><br><span class=\"line\">                root = root.left</span><br><span class=\"line\">                </span><br><span class=\"line\">            return root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的排列\"><a href=\"#字符串的排列\" class=\"headerlink\" title=\"字符串的排列\"></a>字符串的排列</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">import itertools</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def Permutation(self, ss):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not ss:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return sorted(list(set(map(&#x27;&#x27;.join, itertools.permutations(ss)))))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组中出现次数超过一半的数字\"><a href=\"#数组中出现次数超过一半的数字\" class=\"headerlink\" title=\"数组中出现次数超过一半的数字\"></a>数组中出现次数超过一半的数字</h2><p>题目描述</p>\n<blockquote>\n<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import collections</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def MoreThanHalfNum_Solution(self, numbers):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        counter = collections.Counter(numbers)</span><br><span class=\"line\">        for k, v in counter.items():</span><br><span class=\"line\">            if v &gt; len(numbers)/2:</span><br><span class=\"line\">                return k</span><br><span class=\"line\">        return 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最小的K个数\"><a href=\"#最小的K个数\" class=\"headerlink\" title=\"最小的K个数\"></a>最小的K个数</h2><p>题目描述</p>\n<blockquote>\n<p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def GetLeastNumbers_Solution(self, tinput, k):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if k &lt;= 0 or k &gt; len(tinput):</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            tinput.sort()</span><br><span class=\"line\">            return tinput[:k]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连续子数组的最大和\"><a href=\"#连续子数组的最大和\" class=\"headerlink\" title=\"连续子数组的最大和\"></a>连续子数组的最大和</h2><p>题目描述</p>\n<blockquote>\n<p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def FindGreatestSumOfSubArray(self, array):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        n = len(array)</span><br><span class=\"line\">        if n == 0:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            dp = [0] * n</span><br><span class=\"line\">            dp[0] = array[0]</span><br><span class=\"line\">            for i in range(1, n):</span><br><span class=\"line\">                dp[i] = max(dp[i-1]+array[i], array[i])</span><br><span class=\"line\">            return max(dp)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整数中1出现的次数（从1到n整数中1出现的次数）\"><a href=\"#整数中1出现的次数（从1到n整数中1出现的次数）\" class=\"headerlink\" title=\"整数中1出现的次数（从1到n整数中1出现的次数）\"></a>整数中1出现的次数（从1到n整数中1出现的次数）</h2><p>题目描述</p>\n<blockquote>\n<p>求出1<del>13的整数中1出现的次数,并算出100</del>1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def NumberOf1Between1AndN_Solution(self, n):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        def nOf1(q):</span><br><span class=\"line\">            index = 0</span><br><span class=\"line\">            for i in str(q):</span><br><span class=\"line\">                if i == &#x27;1&#x27;:</span><br><span class=\"line\">                    index += 1</span><br><span class=\"line\">            return index</span><br><span class=\"line\">        sum = 0</span><br><span class=\"line\">        for q in range(1, n + 1):</span><br><span class=\"line\">            sum += nOf1(q)</span><br><span class=\"line\">        return sum</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把数组排成最小的数\"><a href=\"#把数组排成最小的数\" class=\"headerlink\" title=\"把数组排成最小的数\"></a>把数组排成最小的数</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def PrintMinNumber(self, numbers):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        def compare(x, y):</span><br><span class=\"line\">            a = int(str(x) + str(y))</span><br><span class=\"line\">            b = int(str(y) + str(x))</span><br><span class=\"line\">            if a &gt; b:</span><br><span class=\"line\">                return 1</span><br><span class=\"line\">            elif a &lt; b:</span><br><span class=\"line\">                return -1</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return 0</span><br><span class=\"line\">            </span><br><span class=\"line\">        numbers.sort(cmp=compare)</span><br><span class=\"line\">        res = &#x27;&#x27;</span><br><span class=\"line\">        for n in numbers:</span><br><span class=\"line\">            res += str(n)</span><br><span class=\"line\">        return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"丑数\"><a href=\"#丑数\" class=\"headerlink\" title=\"丑数\"></a>丑数</h2><p>题目描述</p>\n<blockquote>\n<p>把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def GetUglyNumber_Solution(self, index):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if index &lt; 1:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        UglyNum = [1]</span><br><span class=\"line\">        indexTwo = 0</span><br><span class=\"line\">        indexThree = 0</span><br><span class=\"line\">        indexFive = 0</span><br><span class=\"line\">        for i in range(index - 1):</span><br><span class=\"line\">            NewUgly = min(UglyNum[indexTwo] * 2, UglyNum[indexThree] * 3, UglyNum[indexFive] * 5)</span><br><span class=\"line\">            UglyNum.append(NewUgly)</span><br><span class=\"line\">            if NewUgly % 2 == 0:</span><br><span class=\"line\">                indexTwo += 1</span><br><span class=\"line\">            if NewUgly % 3 == 0:</span><br><span class=\"line\">                indexThree += 1</span><br><span class=\"line\">            if NewUgly % 5 == 0:</span><br><span class=\"line\">                indexFive += 1</span><br><span class=\"line\">        return UglyNum[-1]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第一个只出现一次的字符位置\"><a href=\"#第一个只出现一次的字符位置\" class=\"headerlink\" title=\"第一个只出现一次的字符位置\"></a>第一个只出现一次的字符位置</h2><p>题目描述</p>\n<blockquote>\n<p>在一个字符串(0&lt;&#x3D;字符串长度&lt;&#x3D;10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">import collections</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def FirstNotRepeatingChar(self, s):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not s:</span><br><span class=\"line\">            return -1</span><br><span class=\"line\">        counter = collections.Counter(s)</span><br><span class=\"line\">        for i, c in enumerate(s):</span><br><span class=\"line\">            if counter[c] == 1:</span><br><span class=\"line\">                return i</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组中的逆序对\"><a href=\"#数组中的逆序对\" class=\"headerlink\" title=\"数组中的逆序对\"></a>数组中的逆序对</h2><p>题目描述</p>\n<blockquote>\n<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def InversePairsCore(self, data, copy, start, end):</span><br><span class=\"line\">        if start == end:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            mid = (start + end) / 2</span><br><span class=\"line\">            left = self.InversePairsCore(copy, data, start, mid)</span><br><span class=\"line\">            right = self.InversePairsCore(copy, data, mid+1, end)</span><br><span class=\"line\">            i, j = mid, end</span><br><span class=\"line\">            count = 0</span><br><span class=\"line\">            copyIndex = end</span><br><span class=\"line\">            while i &gt;= start and j &gt;= mid + 1:</span><br><span class=\"line\">                if data[i] &gt; data[j]:</span><br><span class=\"line\">                    count += j - mid</span><br><span class=\"line\">                    copy[copyIndex] = data[i]</span><br><span class=\"line\">                    copyIndex -= 1</span><br><span class=\"line\">                    i -= 1</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    copy[copyIndex] = data[j]</span><br><span class=\"line\">                    copyIndex -= 1</span><br><span class=\"line\">                    j -= 1</span><br><span class=\"line\">            while i &gt;= start:</span><br><span class=\"line\">                copy[copyIndex] = data[i]</span><br><span class=\"line\">                copyIndex -= 1</span><br><span class=\"line\">                i -= 1</span><br><span class=\"line\">            while j &gt;= mid + 1:</span><br><span class=\"line\">                copy[copyIndex] = data[j]</span><br><span class=\"line\">                copyIndex -= 1</span><br><span class=\"line\">                j -= 1</span><br><span class=\"line\">            return left + right + count</span><br><span class=\"line\">                    </span><br><span class=\"line\">    def InversePairs(self, data):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        return self.InversePairsCore(data[:], data[:], 0, len(data) - 1) % 1000000007</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两个链表的第一个公共结点\"><a href=\"#两个链表的第一个公共结点\" class=\"headerlink\" title=\"两个链表的第一个公共结点\"></a>两个链表的第一个公共结点</h2><p>题目描述</p>\n<blockquote>\n<p>输入两个链表，找出它们的第一个公共结点。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def FindFirstCommonNode(self, pHead1, pHead2):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        s1 = []</span><br><span class=\"line\">        s2 = []</span><br><span class=\"line\">        p = pHead1</span><br><span class=\"line\">        q = pHead2</span><br><span class=\"line\">        while p:</span><br><span class=\"line\">            s1.append(p)</span><br><span class=\"line\">            p = p.next</span><br><span class=\"line\">        while q:</span><br><span class=\"line\">            s2.append(q)</span><br><span class=\"line\">            q = q.next</span><br><span class=\"line\">            </span><br><span class=\"line\">        c = None</span><br><span class=\"line\">        while s1 and s2:</span><br><span class=\"line\">            if s1[-1] == s2[-1]:</span><br><span class=\"line\">                c = s1.pop()</span><br><span class=\"line\">                s2.pop()</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                break</span><br><span class=\"line\">        return c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字在排序数组中出现的次数\"><a href=\"#数字在排序数组中出现的次数\" class=\"headerlink\" title=\"数字在排序数组中出现的次数\"></a>数字在排序数组中出现的次数</h2><p>题目描述</p>\n<blockquote>\n<p>统计一个数字在排序数组中出现的次数。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def GetNumberOfK(self, data, k):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        left, right = 0, len(data) - 1</span><br><span class=\"line\">        while left &lt;= right:</span><br><span class=\"line\">            mid = (left + right) / 2</span><br><span class=\"line\">            if data[mid] &lt; k:</span><br><span class=\"line\">                left = mid + 1</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                right = mid - 1</span><br><span class=\"line\">        i = left</span><br><span class=\"line\">        left, right = 0, len(data) - 1</span><br><span class=\"line\">        while left &lt;= right:</span><br><span class=\"line\">            mid = (left + right) / 2</span><br><span class=\"line\">            if data[mid] &lt;= k:</span><br><span class=\"line\">                left = mid + 1</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                right = mid - 1</span><br><span class=\"line\">        j = left</span><br><span class=\"line\">        return j - i</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的深度\"><a href=\"#二叉树的深度\" class=\"headerlink\" title=\"二叉树的深度\"></a>二叉树的深度</h2><p>题目描述</p>\n<blockquote>\n<p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def TreeDepth(self, pRoot):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return max(self.TreeDepth(pRoot.left), self.TreeDepth(pRoot.right)) + 1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"平衡二叉树\"><a href=\"#平衡二叉树\" class=\"headerlink\" title=\"平衡二叉树\"></a>平衡二叉树</h2><p>题目描述</p>\n<blockquote>\n<p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def depth(self, pRoot):</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return max(self.depth(pRoot.left), self.depth(pRoot.right)) + 1</span><br><span class=\"line\">    def IsBalanced_Solution(self, pRoot):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = self.depth(pRoot.left)</span><br><span class=\"line\">            right = self.depth(pRoot.right)</span><br><span class=\"line\">            if left == right or abs(left - right) == 1:</span><br><span class=\"line\">                return self.IsBalanced_Solution(pRoot.left) and self.IsBalanced_Solution(pRoot.right)</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组中只出现一次的数字\"><a href=\"#数组中只出现一次的数字\" class=\"headerlink\" title=\"数组中只出现一次的数字\"></a>数组中只出现一次的数字</h2><p>题目描述</p>\n<blockquote>\n<p>一个整型数组里除了两个数字之外，其他的数字都出现了偶数次。请写程序找出这两个只出现一次的数字。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">import collections</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回[a,b] 其中ab是出现一次的两个数字</span><br><span class=\"line\">    def FindNumsAppearOnce(self, array):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        counter = collections.Counter(array)</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        for a in array:</span><br><span class=\"line\">            if counter[a] == 1:</span><br><span class=\"line\">                res.append(a)</span><br><span class=\"line\">        return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"和为S的连续正数序列\"><a href=\"#和为S的连续正数序列\" class=\"headerlink\" title=\"和为S的连续正数序列\"></a>和为S的连续正数序列</h2><p>题目描述</p>\n<blockquote>\n<p>小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def FindContinuousSequence(self, tsum):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        i, j = 2, int(math.sqrt(2*tsum))</span><br><span class=\"line\">        for n in range(j, i-1, -1):</span><br><span class=\"line\">            if n &amp; 1 and tsum % n == 0:</span><br><span class=\"line\">                r = []</span><br><span class=\"line\">                m = tsum / n</span><br><span class=\"line\">                for x in range(m - (n-1)/2, m + (n-1)/2 + 1):</span><br><span class=\"line\">                    r.append(x)</span><br><span class=\"line\">                res.append(r)</span><br><span class=\"line\">            elif n &amp; 1 == 0 and (tsum % n) * 2 == n:</span><br><span class=\"line\">                r = []</span><br><span class=\"line\">                m = ((2 * tsum) / n) / 2</span><br><span class=\"line\">                for x in range(m-n/2+1, m+n/2 + 1):</span><br><span class=\"line\">                    r.append(x)</span><br><span class=\"line\">                res.append(r)</span><br><span class=\"line\">        return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"和为S的两个数字\"><a href=\"#和为S的两个数字\" class=\"headerlink\" title=\"和为S的两个数字\"></a>和为S的两个数字</h2><p>题目描述</p>\n<blockquote>\n<p>输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def FindNumbersWithSum(self, array, tsum):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        d = &#123;&#125;</span><br><span class=\"line\">        for i, a in enumerate(array):</span><br><span class=\"line\">            d[a] = i</span><br><span class=\"line\">        r = []</span><br><span class=\"line\">        m = float(&#x27;inf&#x27;)</span><br><span class=\"line\">        for v in d:</span><br><span class=\"line\">            if (tsum-v) in d:</span><br><span class=\"line\">                if v * (tsum-v) &lt; m:</span><br><span class=\"line\">                    m = v * (tsum-v)</span><br><span class=\"line\">                    r = [v, tsum-v]</span><br><span class=\"line\">        return r</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"左旋转字符串\"><a href=\"#左旋转字符串\" class=\"headerlink\" title=\"左旋转字符串\"></a>左旋转字符串</h2><p>题目描述</p>\n<blockquote>\n<p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S&#x3D;”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def LeftRotateString(self, s, n):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if n &lt;= 0:</span><br><span class=\"line\">            return s</span><br><span class=\"line\">        if not s:</span><br><span class=\"line\">            return &quot;&quot;</span><br><span class=\"line\">        n = n % len(s)</span><br><span class=\"line\">        a = s[:n][::-1]</span><br><span class=\"line\">        b = s[n:][::-1]</span><br><span class=\"line\">        return (a + b)[::-1]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"翻转单词顺序列\"><a href=\"#翻转单词顺序列\" class=\"headerlink\" title=\"翻转单词顺序列\"></a>翻转单词顺序列</h2><p>题目描述</p>\n<blockquote>\n<p>牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def ReverseSentence(self, s):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        r = &quot;&quot;</span><br><span class=\"line\">        i = 0</span><br><span class=\"line\">        start = 0</span><br><span class=\"line\">        count = 0</span><br><span class=\"line\">        while i &lt; len(s):</span><br><span class=\"line\">            while i &lt; len(s) and s[i] is not &#x27; &#x27;:</span><br><span class=\"line\">                count += 1</span><br><span class=\"line\">                i += 1</span><br><span class=\"line\">            r += s[start:start + count][::-1]</span><br><span class=\"line\">            while i &lt; len(s) and s[i] is &#x27; &#x27;:</span><br><span class=\"line\">                r += &#x27; &#x27;</span><br><span class=\"line\">                i += 1</span><br><span class=\"line\">            start = i</span><br><span class=\"line\">            count = 0</span><br><span class=\"line\">        return r[::-1]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扑克牌顺子\"><a href=\"#扑克牌顺子\" class=\"headerlink\" title=\"扑克牌顺子\"></a>扑克牌顺子</h2><p>题目描述</p>\n<blockquote>\n<p>LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)…他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def IsContinuous(self, numbers):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not numbers:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            numbers.sort()</span><br><span class=\"line\">            n = len(numbers)</span><br><span class=\"line\">            i = 0</span><br><span class=\"line\">            zeros = 0</span><br><span class=\"line\">            while i &lt; n:</span><br><span class=\"line\">                if numbers[i] == 0:</span><br><span class=\"line\">                    zeros += 1</span><br><span class=\"line\">                i += 1</span><br><span class=\"line\">            if zeros == n - 1:</span><br><span class=\"line\">                return True</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                i = zeros</span><br><span class=\"line\">                while i &lt; n - 1:</span><br><span class=\"line\">                    gap = numbers[i + 1] - numbers[i] - 1</span><br><span class=\"line\">                    if gap &gt; zeros or gap &lt; 0:</span><br><span class=\"line\">                        return False</span><br><span class=\"line\">                    else:</span><br><span class=\"line\">                        zeros -= gap</span><br><span class=\"line\">                    i += 1</span><br><span class=\"line\">                return True</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"孩子们的游戏-圆圈中最后剩下的数\"><a href=\"#孩子们的游戏-圆圈中最后剩下的数\" class=\"headerlink\" title=\"孩子们的游戏(圆圈中最后剩下的数)\"></a>孩子们的游戏(圆圈中最后剩下的数)</h2><p>题目描述</p>\n<blockquote>\n<p>每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0…m-1报数….这样下去….直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class ListNode:</span><br><span class=\"line\">    def __init__(self, val):</span><br><span class=\"line\">        self.val = val</span><br><span class=\"line\">        self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def LastRemaining_Solution(self, n, m):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if n == 0:</span><br><span class=\"line\">            return -1</span><br><span class=\"line\">        h = ListNode(0)</span><br><span class=\"line\">        p = h</span><br><span class=\"line\">        for i in range(1, n):</span><br><span class=\"line\">            p.next = ListNode(i)</span><br><span class=\"line\">            p = p.next</span><br><span class=\"line\">        p.next = h</span><br><span class=\"line\">        while h != h.next:</span><br><span class=\"line\">            for i in range(1, m):</span><br><span class=\"line\">                p = p.next</span><br><span class=\"line\">                h = h.next</span><br><span class=\"line\">            h = h.next</span><br><span class=\"line\">            p.next = h</span><br><span class=\"line\">        return h.val</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"求1-2-3-…-n\"><a href=\"#求1-2-3-…-n\" class=\"headerlink\" title=\"求1+2+3+…+n\"></a>求1+2+3+…+n</h2><p>题目描述</p>\n<blockquote>\n<p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.r = 0</span><br><span class=\"line\">    def Sum_Solution(self, n):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        def recursive(n):</span><br><span class=\"line\">            self.r += n</span><br><span class=\"line\">            n -= 1</span><br><span class=\"line\">            return (n&gt;0) and recursive(n)</span><br><span class=\"line\">        recursive(n)</span><br><span class=\"line\">        return self.r</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不用加减乘除做加法\"><a href=\"#不用加减乘除做加法\" class=\"headerlink\" title=\"不用加减乘除做加法\"></a>不用加减乘除做加法</h2><p>题目描述</p>\n<blockquote>\n<p>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、&#x2F;四则运算符号。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def Add(self, num1, num2):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        return sum([num1, num2])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把字符串转换成整数\"><a href=\"#把字符串转换成整数\" class=\"headerlink\" title=\"把字符串转换成整数\"></a>把字符串转换成整数</h2><p>题目描述</p>\n<blockquote>\n<p>将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def StrToInt(self, s):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not s:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        if not s[0].isdigit() and s[0] is not &#x27;+&#x27; and s[0] is not &#x27;-&#x27;:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        if s[0] is &#x27;+&#x27; and len(s) == 1 or s[0] is &#x27;-&#x27; and len(s) == 1:</span><br><span class=\"line\">            return 0</span><br><span class=\"line\">        for i in range(1, len(s)):</span><br><span class=\"line\">            if not s[i].isdigit():</span><br><span class=\"line\">                return 0</span><br><span class=\"line\">        if s[0] == &#x27;-&#x27;:</span><br><span class=\"line\">            return -int(s[1:])</span><br><span class=\"line\">        elif s[0] == &#x27;+&#x27;:</span><br><span class=\"line\">            return int(s[1:])</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return int(s)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组中重复的数字\"><a href=\"#数组中重复的数字\" class=\"headerlink\" title=\"数组中重复的数字\"></a>数组中重复的数字</h2><p>题目描述</p>\n<blockquote>\n<p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">import collections</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 这里要特别注意~找到任意重复的一个值并赋值到duplication[0]</span><br><span class=\"line\">    # 函数返回True/False</span><br><span class=\"line\">    def duplicate(self, numbers, duplication):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not numbers:</span><br><span class=\"line\">            return False</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            counter = collections.Counter(numbers)</span><br><span class=\"line\">            for n in numbers:</span><br><span class=\"line\">                if counter[n] != 1:</span><br><span class=\"line\">                    duplication[0] = n</span><br><span class=\"line\">                    return True</span><br><span class=\"line\">            return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建乘积数组\"><a href=\"#构建乘积数组\" class=\"headerlink\" title=\"构建乘积数组\"></a>构建乘积数组</h2><p>题目描述</p>\n<blockquote>\n<p>给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]&#x3D;A[0]A[1]…A[i-1]A[i+1]…A[n-1]。不能使用除法。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def multiply(self, A):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not A:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            n = len(A)</span><br><span class=\"line\">            B = [0] * n</span><br><span class=\"line\">            B[0] = 1</span><br><span class=\"line\">            for i in range(1, n):</span><br><span class=\"line\">                B[i] = B[i - 1] * A[i - 1]</span><br><span class=\"line\">            temp = 1</span><br><span class=\"line\">            for j in range(n - 2, -1, -1):</span><br><span class=\"line\">                temp *= A[j + 1]</span><br><span class=\"line\">                B[j] *= temp</span><br><span class=\"line\">            return B</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正则表达式匹配\"><a href=\"#正则表达式匹配\" class=\"headerlink\" title=\"正则表达式匹配\"></a>正则表达式匹配</h2><p>题目描述</p>\n<blockquote>\n<p>请实现一个函数用来匹配包括’.’和’‘的正则表达式。模式中的字符’.’表示任意一个字符，而’‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”abaca”匹配，但是与”aa.a”和”ab*a”均不匹配</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution(object):</span><br><span class=\"line\">    def match(self, text, pattern):</span><br><span class=\"line\">        if not pattern:</span><br><span class=\"line\">            return not text</span><br><span class=\"line\">        first_match = bool(text) and pattern[0] in &#123;text[0], &#x27;.&#x27;&#125;</span><br><span class=\"line\">        if len(pattern) &gt;= 2 and pattern[1] == &#x27;*&#x27;:</span><br><span class=\"line\">            return (self.match(text, pattern[2:]) or</span><br><span class=\"line\">                    first_match and self.match(text[1:], pattern))</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return first_match and self.match(text[1:], pattern[1:])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表示数值的字符串\"><a href=\"#表示数值的字符串\" class=\"headerlink\" title=\"表示数值的字符串\"></a>表示数值的字符串</h2><p>题目描述</p>\n<blockquote>\n<p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # s字符串</span><br><span class=\"line\">    def isNumeric(self, s):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            p = float(s)</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符流中第一个不重复的字符\"><a href=\"#字符流中第一个不重复的字符\" class=\"headerlink\" title=\"字符流中第一个不重复的字符\"></a>字符流中第一个不重复的字符</h2><p>题目描述</p>\n<blockquote>\n<p>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是”g”。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是”l”。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.buffer = &#x27;&#x27;</span><br><span class=\"line\">    # 返回对应char</span><br><span class=\"line\">    def FirstAppearingOnce(self):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        appear = [False for _ in range(256)]</span><br><span class=\"line\">        for b in self.buffer:</span><br><span class=\"line\">            if appear[ord(b)] is False:</span><br><span class=\"line\">                appear[ord(b)] = True</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                appear[ord(b)] = False</span><br><span class=\"line\">        for b in self.buffer:</span><br><span class=\"line\">            if appear[ord(b)] is True:</span><br><span class=\"line\">                return b</span><br><span class=\"line\">        return &#x27;#&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">    def Insert(self, char):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        self.buffer += char</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表中环的入口结点\"><a href=\"#链表中环的入口结点\" class=\"headerlink\" title=\"链表中环的入口结点\"></a>链表中环的入口结点</h2><p>题目描述</p>\n<blockquote>\n<p>给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def EntryNodeOfLoop(self, pHead):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pHead or not pHead.next or not pHead.next.next:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            slow = pHead.next</span><br><span class=\"line\">            fast = pHead.next.next</span><br><span class=\"line\">            while slow != fast:</span><br><span class=\"line\">                if fast and fast.next:</span><br><span class=\"line\">                    slow = slow.next</span><br><span class=\"line\">                    fast = fast.next.next</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    return None</span><br><span class=\"line\">            slow = pHead</span><br><span class=\"line\">            while slow != fast:</span><br><span class=\"line\">                slow = slow.next</span><br><span class=\"line\">                fast = fast.next</span><br><span class=\"line\">            return slow</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除链表中重复的结点\"><a href=\"#删除链表中重复的结点\" class=\"headerlink\" title=\"删除链表中重复的结点\"></a>删除链表中重复的结点</h2><p>题目描述</p>\n<blockquote>\n<p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class ListNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def deleteDuplication(self, pHead):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        p, q, r = None, pHead, None</span><br><span class=\"line\">        while q:</span><br><span class=\"line\">            if q.next and q.next.val == q.val:</span><br><span class=\"line\">                r = q.next</span><br><span class=\"line\">                while r.next and r.next.val == q.val:</span><br><span class=\"line\">                    r = r.next</span><br><span class=\"line\">                if q == pHead:</span><br><span class=\"line\">                    pHead = r.next</span><br><span class=\"line\">                else:</span><br><span class=\"line\">                    p.next = r.next</span><br><span class=\"line\">                q = r.next</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                p = q</span><br><span class=\"line\">                q = q.next</span><br><span class=\"line\">        return pHead</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的下一个结点\"><a href=\"#二叉树的下一个结点\" class=\"headerlink\" title=\"二叉树的下一个结点\"></a>二叉树的下一个结点</h2><p>题目描述</p>\n<blockquote>\n<p>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeLinkNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">#         self.next = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def GetNext(self, pNode):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pNode:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            if pNode.right:</span><br><span class=\"line\">                res = pNode.right</span><br><span class=\"line\">                while res.left:</span><br><span class=\"line\">                    res = res.left</span><br><span class=\"line\">                return res</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                parent = pNode.next</span><br><span class=\"line\">                current = pNode</span><br><span class=\"line\">                while parent and parent.left != current:</span><br><span class=\"line\">                    current = parent</span><br><span class=\"line\">                    parent = parent.next</span><br><span class=\"line\">                return parent</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对称的二叉树\"><a href=\"#对称的二叉树\" class=\"headerlink\" title=\"对称的二叉树\"></a>对称的二叉树</h2><p>题目描述</p>\n<blockquote>\n<p>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def mirror(self, pRoot):</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = self.mirror(pRoot.left)</span><br><span class=\"line\">            right = self.mirror(pRoot.right)</span><br><span class=\"line\">            pRoot.left, pRoot.right = right, left</span><br><span class=\"line\">            return pRoot</span><br><span class=\"line\">        </span><br><span class=\"line\">    def sample(self, r1, r2):</span><br><span class=\"line\">        if not r1 and not r2:</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return (r1 and r2) and (r1.val == r2.val) and self.sample(r1.left, r2.left) and self.sample(r1.right, r2.right)</span><br><span class=\"line\">    </span><br><span class=\"line\">    def isSymmetrical(self, pRoot):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left, right = pRoot.left, pRoot.right</span><br><span class=\"line\">            right = self.mirror(right)</span><br><span class=\"line\">            return self.sample(left, right)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按之字形顺序打印二叉树\"><a href=\"#按之字形顺序打印二叉树\" class=\"headerlink\" title=\"按之字形顺序打印二叉树\"></a>按之字形顺序打印二叉树</h2><p>题目描述</p>\n<blockquote>\n<p>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def Print(self, pRoot):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            res = []</span><br><span class=\"line\">            s1, s2 = [pRoot], []</span><br><span class=\"line\">            while s1 or s2:</span><br><span class=\"line\">                if s1:</span><br><span class=\"line\">                    r = []</span><br><span class=\"line\">                    while s1:</span><br><span class=\"line\">                        v = s1.pop()</span><br><span class=\"line\">                        r.append(v.val)</span><br><span class=\"line\">                        if v.left:</span><br><span class=\"line\">                            s2.append(v.left)</span><br><span class=\"line\">                        if v.right:</span><br><span class=\"line\">                            s2.append(v.right)</span><br><span class=\"line\">                    res.append(r)</span><br><span class=\"line\">                if s2:</span><br><span class=\"line\">                    r = []</span><br><span class=\"line\">                    while s2:</span><br><span class=\"line\">                        v = s2.pop()</span><br><span class=\"line\">                        r.append(v.val)</span><br><span class=\"line\">                        if v.right:</span><br><span class=\"line\">                            s1.append(v.right)</span><br><span class=\"line\">                        if v.left:</span><br><span class=\"line\">                            s1.append(v.left)</span><br><span class=\"line\">                    res.append(r)</span><br><span class=\"line\">            return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把二叉树打印成多行\"><a href=\"#把二叉树打印成多行\" class=\"headerlink\" title=\"把二叉树打印成多行\"></a>把二叉树打印成多行</h2><p>题目描述</p>\n<blockquote>\n<p>从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    # 返回二维列表[[1,2],[4,5]]</span><br><span class=\"line\">    def Print(self, pRoot):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            res = []</span><br><span class=\"line\">            q1, q2 = [pRoot], []</span><br><span class=\"line\">            while q1 or q2:</span><br><span class=\"line\">                if q1:</span><br><span class=\"line\">                    r = []</span><br><span class=\"line\">                    while q1:</span><br><span class=\"line\">                        v = q1.pop(0)</span><br><span class=\"line\">                        r.append(v.val)</span><br><span class=\"line\">                        if v.left:</span><br><span class=\"line\">                            q2.append(v.left)</span><br><span class=\"line\">                        if v.right:</span><br><span class=\"line\">                            q2.append(v.right)</span><br><span class=\"line\">                    res.append(r)</span><br><span class=\"line\">                if q2:</span><br><span class=\"line\">                    r = []</span><br><span class=\"line\">                    while q2:</span><br><span class=\"line\">                        v = q2.pop(0)</span><br><span class=\"line\">                        r.append(v.val)</span><br><span class=\"line\">                        if v.left:</span><br><span class=\"line\">                            q1.append(v.left)</span><br><span class=\"line\">                        if v.right:</span><br><span class=\"line\">                            q1.append(v.right)</span><br><span class=\"line\">                    res.append(r)</span><br><span class=\"line\">            return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"序列化二叉树\"><a href=\"#序列化二叉树\" class=\"headerlink\" title=\"序列化二叉树\"></a>序列化二叉树</h2><p>题目描述</p>\n<blockquote>\n<p>请实现两个函数，分别用来序列化和反序列化二叉树</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    flag = -1</span><br><span class=\"line\">    </span><br><span class=\"line\">    def Serialize(self, root):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not root:</span><br><span class=\"line\">            return &#x27;#&#x27;</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return str(root.val) + &#x27;,&#x27; + self.Serialize(root.left) + &#x27;,&#x27; + self.Serialize(root.right)</span><br><span class=\"line\"></span><br><span class=\"line\">    def Deserialize(self, s):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        self.flag += 1</span><br><span class=\"line\">        if self.flag &gt;= len(s):</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        root = None</span><br><span class=\"line\">        l = s.split(&#x27;,&#x27;)</span><br><span class=\"line\">        if l[self.flag] != &#x27;#&#x27;:</span><br><span class=\"line\">            root = TreeNode(int(l[self.flag]))</span><br><span class=\"line\">            root.left = self.Deserialize(s)</span><br><span class=\"line\">            root.right = self.Deserialize(s)</span><br><span class=\"line\">        return root</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树的第k个结点\"><a href=\"#二叉搜索树的第k个结点\" class=\"headerlink\" title=\"二叉搜索树的第k个结点\"></a>二叉搜索树的第k个结点</h2><p>题目描述</p>\n<blockquote>\n<p>给定一棵二叉搜索树，请找出其中的第k小的结点。例如， （5，3，7，2，4，6，8） 中，按结点数值大小顺序第三小结点的值为4。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"># class TreeNode:</span><br><span class=\"line\">#     def __init__(self, x):</span><br><span class=\"line\">#         self.val = x</span><br><span class=\"line\">#         self.left = None</span><br><span class=\"line\">#         self.right = None</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    count = 0</span><br><span class=\"line\">    # 返回对应节点TreeNode</span><br><span class=\"line\">    def KthNode(self, pRoot, k):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if not pRoot or k &lt;= 0:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            res = self.KthNode(pRoot.left, k)</span><br><span class=\"line\">            if res:</span><br><span class=\"line\">                return res</span><br><span class=\"line\">            self.count += 1</span><br><span class=\"line\">            if self.count == k:</span><br><span class=\"line\">                return pRoot</span><br><span class=\"line\">            res = self.KthNode(pRoot.right, k)</span><br><span class=\"line\">            if res:</span><br><span class=\"line\">                return res</span><br><span class=\"line\">            return None</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据流中的中位数\"><a href=\"#数据流中的中位数\" class=\"headerlink\" title=\"数据流中的中位数\"></a>数据流中的中位数</h2><p>题目描述</p>\n<blockquote>\n<p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。我们使用Insert()方法读取数据流，使用GetMedian()方法获取当前读取数据的中位数。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.data=[]</span><br><span class=\"line\">    def Insert(self, num):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        self.data.append(num)</span><br><span class=\"line\">        self.data.sort()</span><br><span class=\"line\">    def GetMedian(self, data):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        n = len(self.data)</span><br><span class=\"line\">        if n % 2 == 0:</span><br><span class=\"line\">            return (self.data[n/2] + self.data[n/2-1]) / 2.0</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return self.data[n/2]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"滑动窗口的最大值\"><a href=\"#滑动窗口的最大值\" class=\"headerlink\" title=\"滑动窗口的最大值\"></a>滑动窗口的最大值</h2><p>题目描述</p>\n<blockquote>\n<p>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def maxInWindows(self, num, size):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        if size &lt;= 0:</span><br><span class=\"line\">            return []</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        for i in xrange(0, len(num)-size+1):</span><br><span class=\"line\">            res.append(max(num[i:i+size]))</span><br><span class=\"line\">        return res</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"矩阵中的路径\"><a href=\"#矩阵中的路径\" class=\"headerlink\" title=\"矩阵中的路径\"></a>矩阵中的路径</h2><p>题目描述</p>\n<blockquote>\n<p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。 例如 a b c e s f c s a d e e 这样的3 X 4 矩阵中包含一条字符串”bcced”的路径，但是矩阵中不包含”abcb”路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    def hasPath(self, matrix, rows, cols, path):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        for i in range(rows):</span><br><span class=\"line\">            for j in range(cols):</span><br><span class=\"line\">                if matrix[i*cols+j] == path[0]:</span><br><span class=\"line\">                    if self.find(list(matrix), rows, cols, path[1:], i, j):</span><br><span class=\"line\">                        return True</span><br><span class=\"line\">        return False</span><br><span class=\"line\">    def find(self, matrix, rows, cols, path, i, j):</span><br><span class=\"line\">        if not path:</span><br><span class=\"line\">            return True</span><br><span class=\"line\">        matrix[i*cols+j] = &#x27;0&#x27;</span><br><span class=\"line\">        if j+1 &lt; cols and matrix[i*cols+j+1] == path[0]:</span><br><span class=\"line\">            return self.find(matrix, rows, cols, path[1:], i, j+1)</span><br><span class=\"line\">        elif j-1 &gt;= 0 and matrix[i*cols+j-1] == path[0]:</span><br><span class=\"line\">            return self.find(matrix, rows, cols, path[1:], i, j-1)</span><br><span class=\"line\">        elif i+1 &lt; rows and matrix[(i+1)*cols+j] == path[0]:</span><br><span class=\"line\">            return self.find(matrix, rows, cols, path[1:], i+1, j)</span><br><span class=\"line\">        elif i-1 &gt;= 0 and matrix[(i-1)*cols+j] == path[0]:</span><br><span class=\"line\">            return self.find(matrix, rows, cols, path[1:], i-1, j)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return False</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"机器人的运动范围\"><a href=\"#机器人的运动范围\" class=\"headerlink\" title=\"机器人的运动范围\"></a>机器人的运动范围</h2><p>题目描述</p>\n<blockquote>\n<p>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 &#x3D; 18。但是，它不能进入方格（35,38），因为3+5+3+8 &#x3D; 19。请问该机器人能够达到多少个格子？</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">class Solution:</span><br><span class=\"line\">    result = 0</span><br><span class=\"line\">    </span><br><span class=\"line\">    def movingCount(self, threshold, rows, cols):</span><br><span class=\"line\">        # write code here</span><br><span class=\"line\">        record = [[True] * cols for _ in range(rows)]</span><br><span class=\"line\">        </span><br><span class=\"line\">        def compute_index_sum(number):</span><br><span class=\"line\">            return sum(map(int, [_ for _ in str(number)]))</span><br><span class=\"line\">        </span><br><span class=\"line\">        def is_valid(i, j):</span><br><span class=\"line\">            if 0 &lt;= i &lt; rows and 0 &lt;= j &lt; cols and record[i][j] and compute_index_sum(i) + compute_index_sum(j) &lt;= threshold:</span><br><span class=\"line\">                return True</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                return False</span><br><span class=\"line\">            </span><br><span class=\"line\">        def dfs(i, j):</span><br><span class=\"line\">            if is_valid(i, j):</span><br><span class=\"line\">                record[i][j] = False</span><br><span class=\"line\">                self.result += 1</span><br><span class=\"line\">                dfs(i - 1, j)</span><br><span class=\"line\">                dfs(i + 1, j)</span><br><span class=\"line\">                dfs(i, j - 1)</span><br><span class=\"line\">                dfs(i, j + 1)</span><br><span class=\"line\">                </span><br><span class=\"line\">        dfs(0, 0)</span><br><span class=\"line\">        </span><br><span class=\"line\">        return self.result</span><br></pre></td></tr></table></figure>"},{"title":"剖析spark-shell","date":"2019-09-14T03:22:44.000Z","_content":"剖析spark-shell\n\n## spark-shell\n\n* spark-shell -> spark-submit -> spark-class -> SparkSubmit\n\n## VisualVM\n\n* [VisualVM](http://visualvm.github.io/)\n\n```\ncd /usr/local/spark/spark-1.2.0-bin-hadoop1/conf\ncp spark-defaults.conf.template spark-defaults.conf\nvim spark-defaults.conf\n/* Input:\n# Set jmx\n# Driver\nspark.driver.extraJavaOptions=-XX:+UnlockCommercialFeatures -XX:+FlightRecorder -Djava.rmi.server.hostname=192.168.1.107 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=10207 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false\n# Executor\n# spark.executor.extraJavaOptions=-XX:+UnlockCommercialFeatures -XX:+FlightRecorder -Djava.rmi.server.hostname=192.168.1.107 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=0 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\n*///:~\ncd /usr/local/spark/spark-1.2.0-bin-hadoop1/bin\nspark-shell\n```\n\n* lsof\n\n```\nyum install -y lsof\nlsof -i:10207\n/* Output:\nCOMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    5442 root   17u  IPv6  34715      0t0  TCP *:10207 (LISTEN)\n*///:~\n```\n\n## Homebrew\n\n* [Homebrew](https://brew.sh/)\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n* telnet\n\n```\nbrew install telnet\ntelnet 192.168.1.107 10207\n/* Output:\nTrying 192.168.1.107...\ntelnet: connect to address 192.168.1.107: Connection refused\ntelnet: Unable to connect to remote host\n*///:~\ntelnet 192.168.1.107 22\n/* Output:\nTrying 192.168.1.107...\nConnected to 192.168.1.107.\nEscape character is '^]'.\nSSH-2.0-OpenSSH_7.4\n*///:~\n```\n\n* firewalld\n\n```\nsystemctl status firewalld\n/* Output:\n...\nActive: active (running)\n...\n*///:~\nsystemctl stop firewalld\nsystemctl disable firewalld\nsystemctl status firewalld\n/* Output:\n...\nActive: inactive (dead)\n...\n*///:~\ntelnet 192.168.1.107 10207\n/* Output:\nTrying 192.168.1.107...\nConnected to 192.168.1.107.\nEscape character is '^]'.\n*///:~\n```\n\n* VisualVM -> Remote -> Host name -> Add JMX Connection -> Connection(192.168.1.107:10207) -> Threads -> main -> Select thread -> Thread Dump\n\n```\n/* Output:\n\"main\" - Thread t@1\n   java.lang.Thread.State: RUNNABLE\n        at java.io.FileInputStream.read0(Native Method)\n        at java.io.FileInputStream.read(FileInputStream.java:210)\n        at scala.tools.jline.TerminalSupport.readCharacter(TerminalSupport.java:152)\n        at scala.tools.jline.UnixTerminal.readVirtualKey(UnixTerminal.java:125)\n        at scala.tools.jline.console.ConsoleReader.readVirtualKey(ConsoleReader.java:933)\n        at scala.tools.jline.console.ConsoleReader.readBinding(ConsoleReader.java:1136)\n        at scala.tools.jline.console.ConsoleReader.readLine(ConsoleReader.java:1218)\n        at scala.tools.jline.console.ConsoleReader.readLine(ConsoleReader.java:1170)\n        at org.apache.spark.repl.SparkJLineReader.readOneLine(SparkJLineReader.scala:80)\n        at scala.tools.nsc.interpreter.InteractiveReader$class.readLine(InteractiveReader.scala:43)\n        at org.apache.spark.repl.SparkJLineReader.readLine(SparkJLineReader.scala:25)\n        at org.apache.spark.repl.SparkILoop.readOneLine$1(SparkILoop.scala:619)\n        at org.apache.spark.repl.SparkILoop.innerLoop$1(SparkILoop.scala:636)\n        at org.apache.spark.repl.SparkILoop.loop(SparkILoop.scala:641)\n        at org.apache.spark.repl.SparkILoop$$anonfun$process$1.apply$mcZ$sp(SparkILoop.scala:968)\n        at org.apache.spark.repl.SparkILoop$$anonfun$process$1.apply(SparkILoop.scala:916)\n        at org.apache.spark.repl.SparkILoop$$anonfun$process$1.apply(SparkILoop.scala:916)\n        at scala.tools.nsc.util.ScalaClassLoader$.savingContextLoader(ScalaClassLoader.scala:135)\n        at org.apache.spark.repl.SparkILoop.process(SparkILoop.scala:916)\n        at org.apache.spark.repl.SparkILoop.process(SparkILoop.scala:1011)\n        at org.apache.spark.repl.Main$.main(Main.scala:31)\n        at org.apache.spark.repl.Main.main(Main.scala)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:606)\n        at org.apache.spark.deploy.SparkSubmit$.launch(SparkSubmit.scala:358)\n        at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:75)\n        at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)\n\n   Locked ownable synchronizers:\n        - None\n*///:~\n```\n\n* SparkSubmit.main -> repl.Main -> SparkILoop.process -> initializeSpark -> createSparkContext","source":"_posts/剖析spark-shell.md","raw":"---\ntitle: 剖析spark-shell\ndate: 2019-09-14 11:22:44\ntags: Spark\ncategories: Spark\n---\n剖析spark-shell\n\n## spark-shell\n\n* spark-shell -> spark-submit -> spark-class -> SparkSubmit\n\n## VisualVM\n\n* [VisualVM](http://visualvm.github.io/)\n\n```\ncd /usr/local/spark/spark-1.2.0-bin-hadoop1/conf\ncp spark-defaults.conf.template spark-defaults.conf\nvim spark-defaults.conf\n/* Input:\n# Set jmx\n# Driver\nspark.driver.extraJavaOptions=-XX:+UnlockCommercialFeatures -XX:+FlightRecorder -Djava.rmi.server.hostname=192.168.1.107 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=10207 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false\n# Executor\n# spark.executor.extraJavaOptions=-XX:+UnlockCommercialFeatures -XX:+FlightRecorder -Djava.rmi.server.hostname=192.168.1.107 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=0 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false\n*///:~\ncd /usr/local/spark/spark-1.2.0-bin-hadoop1/bin\nspark-shell\n```\n\n* lsof\n\n```\nyum install -y lsof\nlsof -i:10207\n/* Output:\nCOMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\njava    5442 root   17u  IPv6  34715      0t0  TCP *:10207 (LISTEN)\n*///:~\n```\n\n## Homebrew\n\n* [Homebrew](https://brew.sh/)\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n* telnet\n\n```\nbrew install telnet\ntelnet 192.168.1.107 10207\n/* Output:\nTrying 192.168.1.107...\ntelnet: connect to address 192.168.1.107: Connection refused\ntelnet: Unable to connect to remote host\n*///:~\ntelnet 192.168.1.107 22\n/* Output:\nTrying 192.168.1.107...\nConnected to 192.168.1.107.\nEscape character is '^]'.\nSSH-2.0-OpenSSH_7.4\n*///:~\n```\n\n* firewalld\n\n```\nsystemctl status firewalld\n/* Output:\n...\nActive: active (running)\n...\n*///:~\nsystemctl stop firewalld\nsystemctl disable firewalld\nsystemctl status firewalld\n/* Output:\n...\nActive: inactive (dead)\n...\n*///:~\ntelnet 192.168.1.107 10207\n/* Output:\nTrying 192.168.1.107...\nConnected to 192.168.1.107.\nEscape character is '^]'.\n*///:~\n```\n\n* VisualVM -> Remote -> Host name -> Add JMX Connection -> Connection(192.168.1.107:10207) -> Threads -> main -> Select thread -> Thread Dump\n\n```\n/* Output:\n\"main\" - Thread t@1\n   java.lang.Thread.State: RUNNABLE\n        at java.io.FileInputStream.read0(Native Method)\n        at java.io.FileInputStream.read(FileInputStream.java:210)\n        at scala.tools.jline.TerminalSupport.readCharacter(TerminalSupport.java:152)\n        at scala.tools.jline.UnixTerminal.readVirtualKey(UnixTerminal.java:125)\n        at scala.tools.jline.console.ConsoleReader.readVirtualKey(ConsoleReader.java:933)\n        at scala.tools.jline.console.ConsoleReader.readBinding(ConsoleReader.java:1136)\n        at scala.tools.jline.console.ConsoleReader.readLine(ConsoleReader.java:1218)\n        at scala.tools.jline.console.ConsoleReader.readLine(ConsoleReader.java:1170)\n        at org.apache.spark.repl.SparkJLineReader.readOneLine(SparkJLineReader.scala:80)\n        at scala.tools.nsc.interpreter.InteractiveReader$class.readLine(InteractiveReader.scala:43)\n        at org.apache.spark.repl.SparkJLineReader.readLine(SparkJLineReader.scala:25)\n        at org.apache.spark.repl.SparkILoop.readOneLine$1(SparkILoop.scala:619)\n        at org.apache.spark.repl.SparkILoop.innerLoop$1(SparkILoop.scala:636)\n        at org.apache.spark.repl.SparkILoop.loop(SparkILoop.scala:641)\n        at org.apache.spark.repl.SparkILoop$$anonfun$process$1.apply$mcZ$sp(SparkILoop.scala:968)\n        at org.apache.spark.repl.SparkILoop$$anonfun$process$1.apply(SparkILoop.scala:916)\n        at org.apache.spark.repl.SparkILoop$$anonfun$process$1.apply(SparkILoop.scala:916)\n        at scala.tools.nsc.util.ScalaClassLoader$.savingContextLoader(ScalaClassLoader.scala:135)\n        at org.apache.spark.repl.SparkILoop.process(SparkILoop.scala:916)\n        at org.apache.spark.repl.SparkILoop.process(SparkILoop.scala:1011)\n        at org.apache.spark.repl.Main$.main(Main.scala:31)\n        at org.apache.spark.repl.Main.main(Main.scala)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:606)\n        at org.apache.spark.deploy.SparkSubmit$.launch(SparkSubmit.scala:358)\n        at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:75)\n        at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)\n\n   Locked ownable synchronizers:\n        - None\n*///:~\n```\n\n* SparkSubmit.main -> repl.Main -> SparkILoop.process -> initializeSpark -> createSparkContext","slug":"剖析spark-shell","published":1,"updated":"2023-09-10T11:51:57.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln2n3nx9000tyuzq49b89jkh","content":"<p>剖析spark-shell</p>\n<h2 id=\"spark-shell\"><a href=\"#spark-shell\" class=\"headerlink\" title=\"spark-shell\"></a>spark-shell</h2><ul>\n<li>spark-shell -&gt; spark-submit -&gt; spark-class -&gt; SparkSubmit</li>\n</ul>\n<h2 id=\"VisualVM\"><a href=\"#VisualVM\" class=\"headerlink\" title=\"VisualVM\"></a>VisualVM</h2><ul>\n<li><a href=\"http://visualvm.github.io/\">VisualVM</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/spark/spark-1.2.0-bin-hadoop1/conf</span><br><span class=\"line\">cp spark-defaults.conf.template spark-defaults.conf</span><br><span class=\"line\">vim spark-defaults.conf</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># Set jmx</span><br><span class=\"line\"># Driver</span><br><span class=\"line\">spark.driver.extraJavaOptions=-XX:+UnlockCommercialFeatures -XX:+FlightRecorder -Djava.rmi.server.hostname=192.168.1.107 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=10207 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false</span><br><span class=\"line\"># Executor</span><br><span class=\"line\"># spark.executor.extraJavaOptions=-XX:+UnlockCommercialFeatures -XX:+FlightRecorder -Djava.rmi.server.hostname=192.168.1.107 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=0 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd /usr/local/spark/spark-1.2.0-bin-hadoop1/bin</span><br><span class=\"line\">spark-shell</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>lsof</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y lsof</span><br><span class=\"line\">lsof -i:10207</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    5442 root   17u  IPv6  34715      0t0  TCP *:10207 (LISTEN)</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h2><ul>\n<li><a href=\"https://brew.sh/\">Homebrew</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>telnet</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install telnet</span><br><span class=\"line\">telnet 192.168.1.107 10207</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Trying 192.168.1.107...</span><br><span class=\"line\">telnet: connect to address 192.168.1.107: Connection refused</span><br><span class=\"line\">telnet: Unable to connect to remote host</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">telnet 192.168.1.107 22</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Trying 192.168.1.107...</span><br><span class=\"line\">Connected to 192.168.1.107.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br><span class=\"line\">SSH-2.0-OpenSSH_7.4</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>firewalld</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">...</span><br><span class=\"line\">Active: active (running)</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">...</span><br><span class=\"line\">Active: inactive (dead)</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">telnet 192.168.1.107 10207</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Trying 192.168.1.107...</span><br><span class=\"line\">Connected to 192.168.1.107.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>VisualVM -&gt; Remote -&gt; Host name -&gt; Add JMX Connection -&gt; Connection(192.168.1.107:10207) -&gt; Threads -&gt; main -&gt; Select thread -&gt; Thread Dump</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">&quot;main&quot; - Thread t@1</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">        at java.io.FileInputStream.read0(Native Method)</span><br><span class=\"line\">        at java.io.FileInputStream.read(FileInputStream.java:210)</span><br><span class=\"line\">        at scala.tools.jline.TerminalSupport.readCharacter(TerminalSupport.java:152)</span><br><span class=\"line\">        at scala.tools.jline.UnixTerminal.readVirtualKey(UnixTerminal.java:125)</span><br><span class=\"line\">        at scala.tools.jline.console.ConsoleReader.readVirtualKey(ConsoleReader.java:933)</span><br><span class=\"line\">        at scala.tools.jline.console.ConsoleReader.readBinding(ConsoleReader.java:1136)</span><br><span class=\"line\">        at scala.tools.jline.console.ConsoleReader.readLine(ConsoleReader.java:1218)</span><br><span class=\"line\">        at scala.tools.jline.console.ConsoleReader.readLine(ConsoleReader.java:1170)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkJLineReader.readOneLine(SparkJLineReader.scala:80)</span><br><span class=\"line\">        at scala.tools.nsc.interpreter.InteractiveReader$class.readLine(InteractiveReader.scala:43)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkJLineReader.readLine(SparkJLineReader.scala:25)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop.readOneLine$1(SparkILoop.scala:619)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop.innerLoop$1(SparkILoop.scala:636)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop.loop(SparkILoop.scala:641)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop$$anonfun$process$1.apply$mcZ$sp(SparkILoop.scala:968)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop$$anonfun$process$1.apply(SparkILoop.scala:916)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop$$anonfun$process$1.apply(SparkILoop.scala:916)</span><br><span class=\"line\">        at scala.tools.nsc.util.ScalaClassLoader$.savingContextLoader(ScalaClassLoader.scala:135)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop.process(SparkILoop.scala:916)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop.process(SparkILoop.scala:1011)</span><br><span class=\"line\">        at org.apache.spark.repl.Main$.main(Main.scala:31)</span><br><span class=\"line\">        at org.apache.spark.repl.Main.main(Main.scala)</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span><br><span class=\"line\">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">        at java.lang.reflect.Method.invoke(Method.java:606)</span><br><span class=\"line\">        at org.apache.spark.deploy.SparkSubmit$.launch(SparkSubmit.scala:358)</span><br><span class=\"line\">        at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:75)</span><br><span class=\"line\">        at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">        - None</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>SparkSubmit.main -&gt; repl.Main -&gt; SparkILoop.process -&gt; initializeSpark -&gt; createSparkContext</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>剖析spark-shell</p>\n<h2 id=\"spark-shell\"><a href=\"#spark-shell\" class=\"headerlink\" title=\"spark-shell\"></a>spark-shell</h2><ul>\n<li>spark-shell -&gt; spark-submit -&gt; spark-class -&gt; SparkSubmit</li>\n</ul>\n<h2 id=\"VisualVM\"><a href=\"#VisualVM\" class=\"headerlink\" title=\"VisualVM\"></a>VisualVM</h2><ul>\n<li><a href=\"http://visualvm.github.io/\">VisualVM</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/spark/spark-1.2.0-bin-hadoop1/conf</span><br><span class=\"line\">cp spark-defaults.conf.template spark-defaults.conf</span><br><span class=\"line\">vim spark-defaults.conf</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># Set jmx</span><br><span class=\"line\"># Driver</span><br><span class=\"line\">spark.driver.extraJavaOptions=-XX:+UnlockCommercialFeatures -XX:+FlightRecorder -Djava.rmi.server.hostname=192.168.1.107 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=10207 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false</span><br><span class=\"line\"># Executor</span><br><span class=\"line\"># spark.executor.extraJavaOptions=-XX:+UnlockCommercialFeatures -XX:+FlightRecorder -Djava.rmi.server.hostname=192.168.1.107 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=0 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd /usr/local/spark/spark-1.2.0-bin-hadoop1/bin</span><br><span class=\"line\">spark-shell</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>lsof</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y lsof</span><br><span class=\"line\">lsof -i:10207</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class=\"line\">java    5442 root   17u  IPv6  34715      0t0  TCP *:10207 (LISTEN)</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h2><ul>\n<li><a href=\"https://brew.sh/\">Homebrew</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>telnet</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install telnet</span><br><span class=\"line\">telnet 192.168.1.107 10207</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Trying 192.168.1.107...</span><br><span class=\"line\">telnet: connect to address 192.168.1.107: Connection refused</span><br><span class=\"line\">telnet: Unable to connect to remote host</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">telnet 192.168.1.107 22</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Trying 192.168.1.107...</span><br><span class=\"line\">Connected to 192.168.1.107.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br><span class=\"line\">SSH-2.0-OpenSSH_7.4</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>firewalld</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">...</span><br><span class=\"line\">Active: active (running)</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">systemctl disable firewalld</span><br><span class=\"line\">systemctl status firewalld</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">...</span><br><span class=\"line\">Active: inactive (dead)</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">telnet 192.168.1.107 10207</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">Trying 192.168.1.107...</span><br><span class=\"line\">Connected to 192.168.1.107.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>VisualVM -&gt; Remote -&gt; Host name -&gt; Add JMX Connection -&gt; Connection(192.168.1.107:10207) -&gt; Threads -&gt; main -&gt; Select thread -&gt; Thread Dump</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Output:</span><br><span class=\"line\">&quot;main&quot; - Thread t@1</span><br><span class=\"line\">   java.lang.Thread.State: RUNNABLE</span><br><span class=\"line\">        at java.io.FileInputStream.read0(Native Method)</span><br><span class=\"line\">        at java.io.FileInputStream.read(FileInputStream.java:210)</span><br><span class=\"line\">        at scala.tools.jline.TerminalSupport.readCharacter(TerminalSupport.java:152)</span><br><span class=\"line\">        at scala.tools.jline.UnixTerminal.readVirtualKey(UnixTerminal.java:125)</span><br><span class=\"line\">        at scala.tools.jline.console.ConsoleReader.readVirtualKey(ConsoleReader.java:933)</span><br><span class=\"line\">        at scala.tools.jline.console.ConsoleReader.readBinding(ConsoleReader.java:1136)</span><br><span class=\"line\">        at scala.tools.jline.console.ConsoleReader.readLine(ConsoleReader.java:1218)</span><br><span class=\"line\">        at scala.tools.jline.console.ConsoleReader.readLine(ConsoleReader.java:1170)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkJLineReader.readOneLine(SparkJLineReader.scala:80)</span><br><span class=\"line\">        at scala.tools.nsc.interpreter.InteractiveReader$class.readLine(InteractiveReader.scala:43)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkJLineReader.readLine(SparkJLineReader.scala:25)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop.readOneLine$1(SparkILoop.scala:619)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop.innerLoop$1(SparkILoop.scala:636)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop.loop(SparkILoop.scala:641)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop$$anonfun$process$1.apply$mcZ$sp(SparkILoop.scala:968)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop$$anonfun$process$1.apply(SparkILoop.scala:916)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop$$anonfun$process$1.apply(SparkILoop.scala:916)</span><br><span class=\"line\">        at scala.tools.nsc.util.ScalaClassLoader$.savingContextLoader(ScalaClassLoader.scala:135)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop.process(SparkILoop.scala:916)</span><br><span class=\"line\">        at org.apache.spark.repl.SparkILoop.process(SparkILoop.scala:1011)</span><br><span class=\"line\">        at org.apache.spark.repl.Main$.main(Main.scala:31)</span><br><span class=\"line\">        at org.apache.spark.repl.Main.main(Main.scala)</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span><br><span class=\"line\">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">        at java.lang.reflect.Method.invoke(Method.java:606)</span><br><span class=\"line\">        at org.apache.spark.deploy.SparkSubmit$.launch(SparkSubmit.scala:358)</span><br><span class=\"line\">        at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:75)</span><br><span class=\"line\">        at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)</span><br><span class=\"line\"></span><br><span class=\"line\">   Locked ownable synchronizers:</span><br><span class=\"line\">        - None</span><br><span class=\"line\">*///:~</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>SparkSubmit.main -&gt; repl.Main -&gt; SparkILoop.process -&gt; initializeSpark -&gt; createSparkContext</li>\n</ul>\n"},{"title":"Mac安装JDK1.7和JDK1.8","date":"2019-09-12T16:00:44.000Z","_content":"Mac安装JDK1.7和JDK1.8\n\n## JDK\n\n* [JDK](https://www.oracle.com/technetwork/java/javase/archive-139210.html)\n\n```\nwhich java\n/* Output:\n/usr/bin/java\n*///:~\ncd /usr/bin\nls -l | grep java$\n/* Output:\nlrwxr-xr-x   1 root   wheel        74 Apr 30 09:30 java -> /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commandsjava\n*///:~\ncd /Library/Java/JavaVirtualMachines\nls -l\n/* Output:\ndrwxr-xr-x  3 root  wheel  96 Sep 20 18:10 jdk1.7.0_80.jdk\ndrwxr-xr-x  3 root  wheel  96 Jun 25 12:41 jdk1.8.0_191.jdk\n*///:~\n/usr/libexec/java_home -v 1.7\n/* Output:\n/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\n*///:~\nvim ~/.bash_profile\n/* Input:\n# JAVA\nexport JAVA_7_HOME=\"$(/usr/libexec/java_home -v 1.7)\"\nexport JAVA_8_HOME=\"$(/usr/libexec/java_home -v 1.8)\"\nalias jdk1.7=\"export JAVA_HOME=$JAVA_7_HOME\"\nalias jdk1.8=\"export JAVA_HOME=$JAVA_8_HOME\"\nexport JAVA_HOME=$JAVA_8_HOME\n*///:~\nsource ~/.bash_profile\njava -version\n/* Output:\njava version \"1.8.0_191\"\n...\n*///:~\njdk1.7\njava -version\n/* Output:\njava version \"1.7.0_80\"\n...\n*///:~\ncd ~\nexit\n```","source":"_posts/Mac安装JDK1.7和JDK1.8.md","raw":"---\ntitle: Mac安装JDK1.7和JDK1.8\ndate: 2019-09-13 00:00:44\ntags: Java\ncategories: Java\n---\nMac安装JDK1.7和JDK1.8\n\n## JDK\n\n* [JDK](https://www.oracle.com/technetwork/java/javase/archive-139210.html)\n\n```\nwhich java\n/* Output:\n/usr/bin/java\n*///:~\ncd /usr/bin\nls -l | grep java$\n/* Output:\nlrwxr-xr-x   1 root   wheel        74 Apr 30 09:30 java -> /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commandsjava\n*///:~\ncd /Library/Java/JavaVirtualMachines\nls -l\n/* Output:\ndrwxr-xr-x  3 root  wheel  96 Sep 20 18:10 jdk1.7.0_80.jdk\ndrwxr-xr-x  3 root  wheel  96 Jun 25 12:41 jdk1.8.0_191.jdk\n*///:~\n/usr/libexec/java_home -v 1.7\n/* Output:\n/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\n*///:~\nvim ~/.bash_profile\n/* Input:\n# JAVA\nexport JAVA_7_HOME=\"$(/usr/libexec/java_home -v 1.7)\"\nexport JAVA_8_HOME=\"$(/usr/libexec/java_home -v 1.8)\"\nalias jdk1.7=\"export JAVA_HOME=$JAVA_7_HOME\"\nalias jdk1.8=\"export JAVA_HOME=$JAVA_8_HOME\"\nexport JAVA_HOME=$JAVA_8_HOME\n*///:~\nsource ~/.bash_profile\njava -version\n/* Output:\njava version \"1.8.0_191\"\n...\n*///:~\njdk1.7\njava -version\n/* Output:\njava version \"1.7.0_80\"\n...\n*///:~\ncd ~\nexit\n```","slug":"Mac安装JDK1.7和JDK1.8","published":1,"updated":"2023-09-12T10:24:40.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln2n3nxp000vyuzqhw8f76sm","content":"<p>Mac安装JDK1.7和JDK1.8</p>\n<h2 id=\"JDK\"><a href=\"#JDK\" class=\"headerlink\" title=\"JDK\"></a>JDK</h2><ul>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/archive-139210.html\">JDK</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which java</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">/usr/bin/java</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd /usr/bin</span><br><span class=\"line\">ls -l | grep java$</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">lrwxr-xr-x   1 root   wheel        74 Apr 30 09:30 java -&gt; /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commandsjava</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd /Library/Java/JavaVirtualMachines</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">drwxr-xr-x  3 root  wheel  96 Sep 20 18:10 jdk1.7.0_80.jdk</span><br><span class=\"line\">drwxr-xr-x  3 root  wheel  96 Jun 25 12:41 jdk1.8.0_191.jdk</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">/usr/libexec/java_home -v 1.7</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># JAVA</span><br><span class=\"line\">export JAVA_7_HOME=&quot;$(/usr/libexec/java_home -v 1.7)&quot;</span><br><span class=\"line\">export JAVA_8_HOME=&quot;$(/usr/libexec/java_home -v 1.8)&quot;</span><br><span class=\"line\">alias jdk1.7=&quot;export JAVA_HOME=$JAVA_7_HOME&quot;</span><br><span class=\"line\">alias jdk1.8=&quot;export JAVA_HOME=$JAVA_8_HOME&quot;</span><br><span class=\"line\">export JAVA_HOME=$JAVA_8_HOME</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">java -version</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">java version &quot;1.8.0_191&quot;</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">jdk1.7</span><br><span class=\"line\">java -version</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">java version &quot;1.7.0_80&quot;</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd ~</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Mac安装JDK1.7和JDK1.8</p>\n<h2 id=\"JDK\"><a href=\"#JDK\" class=\"headerlink\" title=\"JDK\"></a>JDK</h2><ul>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/archive-139210.html\">JDK</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">which java</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">/usr/bin/java</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd /usr/bin</span><br><span class=\"line\">ls -l | grep java$</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">lrwxr-xr-x   1 root   wheel        74 Apr 30 09:30 java -&gt; /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commandsjava</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd /Library/Java/JavaVirtualMachines</span><br><span class=\"line\">ls -l</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">drwxr-xr-x  3 root  wheel  96 Sep 20 18:10 jdk1.7.0_80.jdk</span><br><span class=\"line\">drwxr-xr-x  3 root  wheel  96 Jun 25 12:41 jdk1.8.0_191.jdk</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">/usr/libexec/java_home -v 1.7</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\">/* Input:</span><br><span class=\"line\"># JAVA</span><br><span class=\"line\">export JAVA_7_HOME=&quot;$(/usr/libexec/java_home -v 1.7)&quot;</span><br><span class=\"line\">export JAVA_8_HOME=&quot;$(/usr/libexec/java_home -v 1.8)&quot;</span><br><span class=\"line\">alias jdk1.7=&quot;export JAVA_HOME=$JAVA_7_HOME&quot;</span><br><span class=\"line\">alias jdk1.8=&quot;export JAVA_HOME=$JAVA_8_HOME&quot;</span><br><span class=\"line\">export JAVA_HOME=$JAVA_8_HOME</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">source ~/.bash_profile</span><br><span class=\"line\">java -version</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">java version &quot;1.8.0_191&quot;</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">jdk1.7</span><br><span class=\"line\">java -version</span><br><span class=\"line\">/* Output:</span><br><span class=\"line\">java version &quot;1.7.0_80&quot;</span><br><span class=\"line\">...</span><br><span class=\"line\">*///:~</span><br><span class=\"line\">cd ~</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>"},{"title":"牛客网LeetCode编程题","date":"2023-09-12T08:27:00.000Z","_content":"\n[牛客网LeetCode编程题](https://www.nowcoder.com/ta/classic-code)\n\n##  二叉树的最小深度\n\n描述\n> 求给定二叉树的最小深度。最小深度是指树的根结点到最近叶子结点的最短路径上结点的数量\n```\n/**\n * struct TreeNode {\n *\tint val;\n *\tstruct TreeNode *left;\n *\tstruct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型\n     */\n    int run(TreeNode* root) {\n        if (root == nullptr) return 0;\n        int left = run(root->left);\n        int right = run(root->right);\n        if (left == 0) return right + 1;\n        else if (right == 0) return left + 1;\n        else return min(left, right) + 1;\n    }\n};\n```\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型\n     */\n    int run(TreeNode* root) {\n        if (root == nullptr) return 0;\n        queue<TreeNode *> q;\n        root->val = 1;\n        q.push(root);\n        while (!q.empty()) {\n            TreeNode *cur = q.front();\n            if (cur->left == nullptr && cur->right == nullptr) return cur->val;\n            if (cur->left) {\n               q.push(cur->left);\n               cur->left->val = cur->val + 1; \n            }\n            if (cur->right) {\n                q.push(cur->right);\n                cur->right->val = cur->val + 1;\n            }\n            q.pop();\n        }\n        return 0;\n    }\n};\n```\n\n## 后缀表达式求值\n\n描述\n> 计算逆波兰式（后缀表达式）的值\n> 运算符仅包含\"+\",\"-\",\"*\"和\"/\"，被操作数是整数\n> 保证表达式合法，除法时向下取整。\n\n> 数据范围：表达式的长度满足： n<=1000\n> 进阶：空间复杂度 O(n) 时间复杂度 O(n)\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param tokens string字符串vector \n     * @return int整型\n     */\n    bool isOperator(string token) {\n        return (token == \"+\" || token == \"-\" || token == \"*\" || token == \"/\");\n    }\n    int evalRPN(vector<string>& tokens) {\n        int n = tokens.size();\n        if (n == 0) return 0;\n        stack<int> s;\n        for (int i = 0; i < n; ++i) {\n            if (!isOperator(tokens[i])) {\n                s.push(stoi(tokens[i]));\n            }\n            else {\n                int b = s.top();\n                s.pop();\n                int a = s.top();\n                s.pop();\n                if (tokens[i] == \"+\") s.push(a+b);\n                if (tokens[i] == \"-\") s.push(a-b);\n                if (tokens[i] == \"*\") s.push(a*b);\n                if (tokens[i] == \"/\") s.push(a/b); \n            }\n        }\n        return s.top();\n    }\n};\n```\n\n## 多少个点位于同一直线\n\n描述\n> 对于给定的n个位于同一二维平面上的点，求最多能有多少个点位于同一直线上\n```\n/**\n * struct Point {\n *\tint x;\n *\tint y;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param points Point类vector \n     * @return int整型\n     */\n    int gcd(int a, int b) {\n        return b == 0 ? a : gcd(b, a % b);\n    }\n    int maxPoints(vector<Point>& points) {\n        int n = points.size();\n        if (n <= 2) return n;\n        int max_points = 0;\n        for (int i = 0; i < n; ++i) {\n            map<pair<int, int>, int> mp;\n            int dup = 1;\n            for (int j = i + 1; j < n; ++j) {\n                int x = points[j].x - points[i].x;\n                int y = points[j].y - points[i].y;\n                if (x == 0 && y == 0) dup++;\n                else {\n                    int g = gcd(x, y);\n                    x /= g;\n                    y /= g;\n                    mp[{x, y}]++;\n                }\n            }\n            max_points = max(max_points, dup);\n            for (auto it = mp.begin(); it != mp.end(); ++it) {\n                max_points = max(max_points, dup + it->second);\n            }\n        }\n        return max_points;\n    }\n};\n```\n```\n/**\n * struct Point {\n *  int x;\n *  int y;\n * };\n */\n\n#include <cfloat>\nclass Solution {\npublic:\n    /**\n     * \n     * @param points Point类vector \n     * @return int整型\n     */\n    int maxPoints(vector<Point>& points) {\n        int n = points.size();\n        if (n <= 2) return n;\n        int max_points = 0;\n        for (int i = 0; i < n; ++i) {\n            map<float, int> mp;\n            int dup = 1;\n            for (int j = i + 1; j < n; ++j) {\n                int x = points[j].x - points[i].x;\n                int y = points[j].y - points[i].y;\n                if (x == 0 && y == 0) ++dup;\n                else {\n                    if (x == 0) mp[FLT_MAX]++;\n                    else mp[(1.0 * y)/x]++; \n                }\n            }\n            max_points = max(max_points, dup);\n            for (auto it = mp.begin(); it != mp.end(); ++it) {\n                max_points = max(max_points, it->second + dup);\n            }\n        }\n        return max_points;\n    }\n};\n```\n\n## 链表排序\n\n描述\n> 在O(n log n)的时间内使用常数级空间复杂度对链表进行排序\n```\n/**\n * struct ListNode {\n *  int val;\n *  struct ListNode *next;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param head ListNode类 \n     * @return ListNode类\n     */\n    ListNode* merge(ListNode* h1, ListNode* h2) {\n        if (h1 == nullptr) return h2;\n        if (h2 == nullptr) return h1;\n        if (h1->val < h2->val) {\n            h1->next = merge(h1->next, h2);\n            return h1;\n        }\n        else {\n            h2->next = merge(h1, h2->next);\n            return h2;\n        }\n    }\n    ListNode* middle(ListNode* h) {\n        if (h == nullptr) return nullptr;\n        ListNode *slow = h, *fast = slow->next;\n        while (slow && fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        return slow;\n    }\n    ListNode* sortList(ListNode* head) {\n        if (head == nullptr || head->next == nullptr) return head;\n        ListNode *m = middle(head);\n        ListNode *h1 = head;\n        ListNode *h2 = m->next;\n        m->next = nullptr;\n        h1 = sortList(h1);\n        h2 = sortList(h2);\n        return merge(h1, h2);\n    }\n};\n```\n\n## 链表的插入排序\n\n描述\n> 使用插入排序对链表进行排序\n```\n/**\n * struct ListNode {\n *  int val;\n *  struct ListNode *next;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param head ListNode类 \n     * @return ListNode类\n     */\n    ListNode* insertionSortList(ListNode* head) {\n        if (head == nullptr || head->next == nullptr) return head;\n        ListNode *dummy = new ListNode(0);\n        ListNode *cur = head, *nxt;\n        while (cur) {\n            nxt = cur->next;\n            ListNode *pre = dummy;\n            while (pre->next && pre->next->val < cur->val) pre = pre->next;\n            cur->next = pre->next;\n            pre->next = cur;\n            cur = nxt;\n        }\n        return dummy->next;\n    }\n};\n```\n\n## 二叉树的后序遍历\n\n描述\n用递归的方法对给定的二叉树进行后序遍历\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型vector\n     */\n    vector<int> postorderTraversal(TreeNode* root) {\n        vector<int> res;\n        if (root == nullptr) return res;\n        stack<TreeNode *> s1, s2;\n        s1.push(root);\n        while (!s1.empty()) {\n            TreeNode *cur = s1.top();\n            s1.pop();\n            if (cur->left) s1.push(cur->left);\n            if (cur->right) s1.push(cur->right);\n            s2.push(cur);\n        }\n        while (!s2.empty()) {\n            TreeNode * cur = s2.top();\n            res.push_back(cur->val);\n            s2.pop();\n        }\n        return res;\n    }\n};\n```\n\n## 求二叉树的前序遍历\n\n描述\n> 求给定的二叉树的前序遍历\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型vector\n     */\n    vector<int> preorderTraversal(TreeNode* root) {\n        vector<int> res;\n        if (root == nullptr) return res;\n        stack<TreeNode *> s;\n        TreeNode *cur = root;\n        while (!s.empty() || cur) {\n            while (cur) {\n                res.push_back(cur->val);\n                s.push(cur);\n                cur = cur->left;\n            }\n            cur = s.top();\n            s.pop();\n            cur = cur->right;\n        }\n        return res;\n    }\n};\n```\n\n## 重排链表\n\n描述\n> 将给定的单链表L: L0->L1->...->Ln-1->Ln\n> 重新排序为：L0->Ln->L1->Ln-1->...->\n> 要求使用原地算法，不能只改变节点内部的值，需要对实际的节点进行交换\n\n> 数据范围：链表长度 0 <= n <= 20000 链表中每个节点的值满足 0 <= val <= 1000\n\n> 要求：空间复杂度 O(n) 并在链表上进行操作而不新建链表，时间复杂度 O(n)\n> 进阶：空间复杂度 O(1) 时间复杂度 O(n)\n```\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *reverse_list(ListNode *head) {\n        ListNode *pre = nullptr, *cur = head, *nxt = nullptr;\n        while (cur) {\n            nxt = cur->next;\n            cur->next = pre;\n            pre = cur;\n            cur = nxt;\n        }\n        return pre;\n    }\n    void reorderList(ListNode *head) {\n        if (!head || !head->next) return;\n        ListNode *slow = head, *fast = head->next;\n        while (fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        ListNode *l1 = head, *l2 = slow->next;\n        slow->next = nullptr;\n        l2 = reverse_list(l2);\n        ListNode *p = l1, *q = l2, *t;\n        while (q) {\n            t = q->next;\n            q->next = p->next;\n            p->next = q;\n            p = q->next;\n            q = t;\n        }\n    }\n};\n```\n\n## 链表中环的入口结点\n  \n描述\n> 给一个长度为n链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null\n```\n/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n        val(x), next(NULL) {\n    }\n};\n*/\nclass Solution {\npublic:\n    ListNode* EntryNodeOfLoop(ListNode* pHead) {\n        if (pHead == nullptr) return nullptr;\n        ListNode *cur = pHead;\n        map<ListNode *, int> mp;\n        while (cur) {\n            mp[cur]++;\n            if (mp[cur] == 2) return cur;\n            cur = cur->next;\n        }\n        return nullptr;\n    }\n};\n```\n\n## 判断链表中是否有环\n\n描述\n> 判断给定的链表中是否有环。如果有环则返回true，否则返回false\n```\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        if (head == nullptr) return false;\n        map<ListNode *, int> mp;\n        while (head) {\n            mp[head]++;\n            if (mp[head] == 2) return true;\n            head = head -> next;\n        }\n        return false;\n    }\n};\n```\n\n## 拆分词句\n\n描述\n> 给定一个字符串s和一组单词dict，判断s是否可以用空格分割成一个单词序列，使得单词序列中所有的单词都是dict中的单词（序列可以包含一个或多个单词）\n> 例如:\n> 给定s=“nowcode”\n> dict=[\"now\", \"code\"]\n> 返回true，因为\"nowcode\"可以被分割成\"now code\"\n```\nclass Solution {\npublic:\n    bool wordBreak(string s, unordered_set<string> &dict) {\n        int n = s.size();\n        if (n == 0) return true;\n        vector<bool> dp(n+1, false);\n        dp[0] = true;\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (dp[j] && dict.find(s.substr(j, i-j)) != dict.end()) dp[i] = true;\n            }\n        }\n        return dp[n];  \n    }\n};\n```\n\n## 出现一次的数字ii\n\n描述\n> 现在有一个整数类型的数组，数组中只有一个元素只出现一次，其余元素都出现三次。你需要找出只出现一次的元素\n> 数据范围： 数组长度满足 0 <= n <= 4000 数组中每个元素的值满足 0 <= val <= 2147483648\n> 进阶: 空间复杂度 O(1) 时间复杂度 O(n)\n```\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param A int整型一维数组 \n     * @param n int A数组长度\n     * @return int整型\n     */\n    int singleNumber(int* A, int n) {\n        if (!A || n == 0) return 0;\n        int res = 0;\n        for (int i = 0; i < 32; ++i) {\n            int bit = 0;\n            for (int j = 0; j < n; ++j) {\n                bit += (A[j] >> i) & 1;\n            }\n            res += (bit % 3) << i;\n        }\n        return res;\n    }\n};\n```\n\n## 出现一次的数字\n\n描述\n> 现在有一个整数类型的数组，数组中素只有一个元素只出现一次，其余的元素都出现两次\n> 数据范围：0 < n <= 4000  数组中每个值满足 0 <= val <= 4000\n> 进阶： 空间复杂度 O(1) 时间复杂度 O(n)\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param A int整型一维数组 \n     * @param n int A数组长度\n     * @return int整型\n     */\n    int singleNumber(int* A, int n) {\n        if (n == 0) return -1;\n        if (n == 1) return A[0];\n        int res = 0;\n        for (int i = 0; i < n; ++i) {\n            res ^= A[i];\n        }\n        return res;\n    }\n};\n```\n\n## 分糖果\n\n描述\n> 有N个小朋友站在一排，每个小朋友都有一个评分\n> 你现在要按以下的规则给孩子们分糖果：\n> 每个小朋友至少要分得一颗糖果\n> 分数高的小朋友要他比旁边得分低的小朋友分得的糖果多\n> 你最少要分发多少颗糖果\n```\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param ratings int整型vector \n     * @return int整型\n     */\n    int candy(vector<int>& ratings) {\n        int n = ratings.size();\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        vector<int> dp(n, 1);\n        bool flag = true;\n        while (flag) {\n            flag = false;\n            for (int i = 1; i < n; ++i) {\n                if (ratings[i] > ratings[i-1] && dp[i] <= dp[i-1]) {\n                    flag = true;\n                    dp[i] = dp[i-1] + 1;   \n                }\n            }\n            for (int j = n - 2; j >= 0; --j) {\n                if (ratings[j] > ratings[j+1] && dp[j] <= dp[j+1]) {\n                    flag = true;\n                    dp[j] = dp[j+1] + 1;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; ++i) {\n            res += dp[i];\n        }\n        return res;\n    }\n};\n```\n\n## 加油站\n\n描述\n> 环形路上有n个加油站，第i个加油站的汽油量是gas[i].\n> 你有一辆车，车的油箱可以无限装汽油。从加油站i走到下一个加油站（i+1）花费的油量是cost[i]，你从一个加油站出发，刚开始的时候油箱里面没有汽油\n> 求从哪个加油站出发可以在环形路上走一圈。返回加油站的下标，如果没有答案的话返回-1\n> 注意：答案保证唯一\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param gas int整型vector \n     * @param cost int整型vector \n     * @return int整型\n     */\n    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {\n        int n = gas.size();\n        if (n == 0) return -1;\n        for (int p = 0; p < n; ++p) {\n            int t = 0, g = 0;\n            int i = p;\n            while (t < n && i < n && (g + gas[i] - cost[i]) >= 0) {\n                 g += (gas[i] - cost[i]);\n                 ++i;\n                 ++t;\n                 if (i == n) i = 0;\n            }\n            if (t == n) return p;\n        }\n        return -1;\n    }\n};\n```\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param gas int整型vector \n     * @param cost int整型vector \n     * @return int整型\n     */\n    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {\n        int n = gas.size();\n        if (n == 0) return -1;\n        int sum = 0, cur = 0, idx = -1;\n        for (int i = 0; i < n; ++i) {\n            sum += (gas[i] - cost[i]);\n            cur += (gas[i] - cost[i]);\n            if (cur < 0) {\n                cur = 0;\n                idx = i;\n            }\n        }\n        return sum >= 0 ? idx + 1 : -1;\n    }\n};\n```\n\n## 复制无向图\n\n描述\n> 本题要求复制一个无向图，图中每个节点都包含一个标签和它的邻居列表\n```\n/**\n * Definition for undirected graph.\n * struct UndirectedGraphNode {\n *     int label;\n *     vector<UndirectedGraphNode *> neighbors;\n *     UndirectedGraphNode(int x) : label(x) {};\n * };\n */\nclass Solution {\npublic:\n    void dfs(UndirectedGraphNode *node, map<UndirectedGraphNode *, UndirectedGraphNode *> &mp) {\n        if (node == nullptr) return;\n        if (mp[node]) return;\n        mp[node] = new UndirectedGraphNode(node->label);\n        for (auto it : node->neighbors) {\n            dfs(it, mp);\n        }\n    }\n    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {\n        if (node == nullptr) return nullptr;\n        map<UndirectedGraphNode *, UndirectedGraphNode *> mp;\n        dfs(node, mp);\n        for (auto it = mp.begin(); it != mp.end(); ++it) {\n            for (auto cur : it->first->neighbors) {\n                it->second->neighbors.push_back(cur);\n            }\n        }\n        return mp[node];\n    }\n};\n```\n\n## 分割回文串-ii\n\n描述\n> 给出一个字符串s，分割s使得分割出的每一个子串都是回文串\n> 计算将字符串s分割成回文分割结果的最小切割数\n> 例如:给定字符串s=\"aab\",\n> 返回1，因为回文分割结果[\"aa\",\"b\"]是切割一次生成的\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param s string字符串 \n     * @return int整型\n     */\n    int minCut(string s) {\n        int n = s.size();\n        if (n == 0) return 0;\n        \n        vector<vector<bool> > path(n, vector<bool>(n, false));\n        for (int i = 0; i < n; ++i) path[i][i] = true;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (s[j] == s[i] && i - j < 2) path[j][i] = true;\n                else if (s[j] == s[i] && i - j >=2 ) path[j][i] = path[j+1][i-1];\n                else continue;\n            }\n        }\n\n        vector<int> dp(n+1, INT_MAX);\n        dp[0] = -1;\n        for (int i = 1; i <= n; ++i) {\n            for (int j = i-1; j >= 0; --j) {\n                if (path[j][i-1]) {\n                    dp[i] = min(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        \n        return dp[n];\n    }\n};\n```\n\n## 分割回文串\n\n描述\n> 给定一个字符串s，分割s使得s的每一个子串都是回文串\n> 返回所有的回文分割结果。（注意：返回结果的顺序需要和输入字符串中的字母顺序一致\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param s string字符串 \n     * @return string字符串vector<vector<>>\n     */\n    bool is_palindrome(string s) {\n        // int n = s.size();\n        // if (n <= 1) return true;\n        // for (int i = 0, j = n-1; i <= j; ++i, --j) {\n        //     if (s[i] != s[j]) return false;\n        // }\n        // return true;\n        return (s == string(s.rbegin(), s.rend()));\n    }\n    void dfs(vector<vector<string> > &res, vector<string> &path, string s, int index) {\n        int n = s.size();\n        if (n == index) {\n            res.push_back(path);\n            return;\n        }\n        for (int i = 1; i <= n-index; ++i) {\n            if (is_palindrome(s.substr(index, i))) {\n                path.push_back(s.substr(index, i));\n                dfs(res, path, s, index+i);\n                path.pop_back();\n            }\n        }\n\n    }\n    vector<vector<string> > partition(string s) {\n        int n = s.size();\n        vector<vector<string> > res;\n        vector<string> path;\n        if (n == 0) return res;\n        dfs(res, path, s, 0);\n        return res;\n    }\n};\n```\n\n## 包围区域\n\n描述\n> 现在有一个仅包含‘X’和‘O’的二维板，请捕获所有的被‘X’包围的区域\n> 捕获一个被包围区域的方法是将被包围区域中的所有‘O’变成‘X’\n```\nclass Solution {\npublic:\n    void dfs(vector<vector<char> > &board, int i, int j) {\n        int m = board.size();\n        if (m == 0) return;\n        int n = board[0].size();\n        if (i < 0 || j < 0 || i >= m || j >= n) return;\n        if (board[i][j] != 'O') return;\n        board[i][j] = 'A';\n        dfs(board, i+1, j);\n        dfs(board, i-1, j);\n        dfs(board, i, j-1);\n        dfs(board, i, j+1);\n    }\n    void solve(vector<vector<char>> &board) {\n        int m = board.size();\n        if (m == 0) return;\n        int n = board[0].size();\n        for (int i = 0; i < m; ++i) {\n            dfs(board, i, 0);\n            dfs(board, i, n-1);\n        }\n        for  (int j = 0; j < n; ++j) {\n            dfs(board, 0, j);\n            dfs(board, m-1, j);\n        }\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (board[i][j] == 'O') board[i][j] = 'X';\n                if (board[i][j] == 'A') board[i][j] = 'O';\n            }\n        }\n    }\n};\n\n```\n\n## 二叉树根节点到叶子节点的所有路径和\n\n描述\n> 给定一个二叉树的根节点root，该树的节点值都在数字0−9 之间，每一条从根节点到叶子节点的路径都可以用一个数字表示\n> 1.该题路径定义为从树的根结点开始往下一直到叶子结点所经过的结点\n> 2.叶子节点是指没有子节点的节点\n> 3.路径只能从父节点到子节点，不能从子节点到父节点\n> 4.总节点数目为n\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @return int整型\n     */\n    void dfs(vector<vector<int> > &res, vector<int> &path, TreeNode *root) {\n        if (root == nullptr) return;\n        path.push_back(root->val);\n        dfs(res, path, root->left);\n        dfs(res, path, root->right);\n        if (root->left == nullptr && root->right == nullptr) res.push_back(path);\n        path.pop_back();\n    }\n    int sumNumbers(TreeNode* root) {\n        vector<vector<int> > res;\n        vector<int> path;\n        dfs(res, path, root);\n        int n = res.size();\n        if (n == 0) return 0;\n        int total = 0;\n        for (int i = 0; i < n; ++i) {\n            int m = res[i].size();\n            int sum = 0;\n            for (int j = 0; j < m; ++j) {\n                sum = 10 * sum + res[i][j];\n            }\n            total += sum;\n        }\n        return total;\n    }\n};\n```\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型\n     */\n    void dfs(TreeNode *root, int path, int &sum) {\n        if (!root) return;\n        path = 10 * path + root->val;\n        if (root->left == nullptr && root->right == nullptr) {\n            sum += path;\n        } \n        dfs(root->left, path, sum);\n        dfs(root->right, path, sum);\n        \n//         path = path / 10;\n    }\n   \n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int path = 0;\n        dfs(root, path, sum);\n        return sum;\n    }\n};\n```\n\n## 最长的连续元素序列长度\n\n描述\n> 给定一个无序的整数类型数组，求最长的连续元素序列的长度\n> 例如：\n> 给出的数组为[1000, 4, 2000, 1, 3, 2],\n> 最长的连续元素序列为[1, 2, 3, 4]. 返回这个序列的长度：4\n> 你需要给出时间复杂度在O（n）之内的算法\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param num int整型vector \n     * @return int整型\n     */\n    int longestConsecutive(vector<int>& num) {\n        int n = num.size();\n        if (n == 0) return 0;\n        map<int, int> mp;\n        for (int i = 0; i < n; ++i) mp[num[i]]++;\n        int res = 0;\n        for (auto it = mp.begin(); it != mp.end(); ++it) {\n            if (mp[it->first] > 0) {\n                int l = 1;\n                int i = it->first + 1;\n                while (mp[i] >= 1) {\n                    ++l;\n                    mp[i] = 0;\n                    ++i;\n                }\n                i = it->first - 1;\n                while (mp[i] >= 1) {\n                    ++l;\n                    mp[i] = 0;\n                    --i;\n                }\n                mp[it->first] = 0;\n                res = max(res, l);\n            }\n        }\n        return res;\n    }\n};\n```\n\n## 词语序列\n\n描述\n> 给定两个单词（初始单词和目标单词）和一个单词字典，请找出所有的从初始单词到目标单词的最短转换序列的长度\n> 每一次转换只能改变一个单词\n> 每一个中间词都必须存在单词字典当中\n```\nclass Solution {\npublic:\n    int ladderLength(string start, string end, unordered_set<string> &dict) {\n        queue<string> q;\n        unordered_set<string> s;\n        q.push(start);\n        s.emplace(start);\n        int res = 1;\n        while (!q.empty()) {\n            int q_size = q.size();\n            while (q_size--) {\n                string cur = q.front();\n                q.pop();\n                if (cur == end) return res;\n                int n = cur.size();\n                for (int i = 0; i < n; ++i) {\n                    string nxt(cur);\n                    for (int j = 'a'; j <= 'z'; ++j) {\n                        if (nxt[i] == j) continue;\n                        nxt[i] = j;\n                        // if (s.find(nxt) != s.end() || dict.find(nxt) == dict.end()) continue;\n                        if (s.count(nxt) || !dict.count(nxt)) continue;\n                        s.emplace(nxt);\n                        q.push(nxt);\n                    }\n                }\n                \n            }\n            ++res;\n        }\n        return 0;\n    }\n};\n```\n\n## 判断回文串\n\n描述\n> 判断题目给出的字符串是不是回文，仅考虑字符串中的字母字符和数字字符，并且忽略大小写\n> 例如：\"nowcoder Is Best tsebsi: redoc won\"是回文  \"race a car\"不是回文\n注意：\n> 你有没有考虑过字符串可能为空？这是面试时应该提出的一个好问题\n> 针对这个问题，我们定义空字符串是回文\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param s string字符串 \n     * @return bool布尔型\n     */\n    bool isPalindrome(string s) {\n        int n = s.size();\n        if (n == 0) return true;\n        int index = 0;\n        for (int i = 0; i < n; ++i) {\n            if (s[i] >= 'A' && s[i] <= 'Z') {\n                s[index++] = s[i] - 'A' + 'a';\n            }\n            else if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= '0' && s[i] <= '9')) {\n                s[index++] = s[i];\n            }\n            else continue;\n        }\n        string a = s.substr(0, index);\n        return a == string(a.rbegin(), a.rend());\n    }\n};\n```\n\n## 二叉树中的最大路径和\n\n> 描述\n> 二叉树里面的路径被定义为:从该树的任意节点出发，经过父=>子或者子=>父的连接，达到任意节点的序列\n> 注意:\n> 1.同一个节点在一条二叉树路径里中最多出现一次\n> 2.一条路径至少包含一个节点，且不一定经过根节点\n\n> 给定一个二叉树的根节点root，请你计算它的最大路径和\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @return int整型\n     */\n    int dfs(TreeNode *root, int &ans) {\n        if (!root) return 0;\n        int left_sum = max(dfs(root->left, ans), 0);\n        int right_sum = max(dfs(root->right, ans), 0);\n        ans = max(ans, left_sum + right_sum + root->val);\n        return max(left_sum, right_sum) + root->val;\n    }\n    int maxPathSum(TreeNode* root) {\n        if (!root) return 0;\n        int ans = INT_MIN;\n        dfs(root, ans);\n        return ans;\n    }\n};\n```\n\n## 买卖股票的最好时机 iii\n\n描述\n> 假设你有一个数组，其中第i个元素是某只股票在第i天的价格\n> 设计一个算法来求最大的利润。你最多可以进行两次交易\n> 注意:\n> 你不能同时进行多个交易(即，你必须在再次购买之前出售之前买的股票)\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param prices int整型vector \n     * @return int整型\n     */\n    int maxProfit(vector<int>& prices) {\n        int n = prices.size();\n        if (n == 0) return 0;\n        vector<vector<int> > dp(n, vector<int>(5, 0));\n        dp[0][1] = -prices[0];\n        dp[0][2] = 0;\n        dp[0][3] = -prices[0];\n        dp[0][4] = 0;\n        for (int i = 1; i < n; ++i) {\n            dp[i][0] = 0;\n            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]);\n            dp[i][2] = max(dp[i-1][2], dp[i-1][1] + prices[i]);\n            dp[i][3] = max(dp[i-1][3], dp[i-1][2] - prices[i]);\n            dp[i][4] = max(dp[i-1][4], dp[i-1][3] + prices[i]);\n        }\n        return dp[n-1][4];\n    }\n};\n```\n\n## 买卖股票的最好时机 ii\n\n描述\n> 假设你有一个数组，其中第i个元素表示某只股票在第i天的价格。\n> 设计一个算法来寻找最大的利润。你可以完成任意数量的交易(例如，多次购买和出售股票的一股)。但是，你不能同时进行多个交易(即，你必须在再次购买之前卖出之前买的股票)\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param prices int整型vector \n     * @return int整型\n     */\n    int maxProfit(vector<int>& prices) {\n        int n = prices.size();\n        if (n == 0 || n == 1) return 0;\n        int max_profit = 0;\n        for (int i = 1; i < n; ++i) {\n            if (prices[i] > prices[i-1]) max_profit += prices[i] - prices[i-1];\n        }\n        return max_profit;\n    }\n};\n```\n\n## 买卖股票的最好时机\n\n描述\n> 假设你有一个数组prices，长度为n，其中prices[i]是股票在第i天的价格，请根据这个价格数组，返回买卖股票能获得的最大收益\n> 1.你可以买入一次股票和卖出一次股票，并非每天都可以买入或卖出一次，总共只能买入和卖出一次，且买入必须在卖出的前面的某一天\n> 2.如果不能获取到任何利润，请返回0\n> 3.假设买入卖出均无手续费\n```\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param prices int整型vector \n     * @return int整型\n     */\n    int maxProfit(vector<int>& prices) {\n        int n = prices.size();\n        if (n == 0) return 0;\n        int min_value = prices[0];\n        int max_profit = 0;\n        for (int i = 1; i < n; ++i) {\n            max_profit = max(max_profit, prices[i] - min_value);\n            min_value = min(min_value, prices[i]);\n        }\n        return max_profit;\n    }\n};\n```\n\n## 三角形\n\n描述\n> 给出一个三角形，计算从三角形顶部到底部的最小路径和，每一步都可以移动到下面一行相邻的数字\n```\nclass Solution {\npublic:\n    int minimumTotal(vector<vector<int> > &triangle) {\n        int n = triangle.size();\n        if (n == 0) return 0;\n        vector<vector<int> > dp(n, vector<int>(n, 0));\n        dp[0][0] = triangle[0][0];\n        for (int j = 1; j < n; ++j) {\n            dp[j][0] = dp[j-1][0] + triangle[j][0];\n            dp[j][j] = dp[j-1][j-1] + triangle[j][j];\n        }\n        for (int i = 1; i < n; ++i) {\n            for (int j = 1; j < i; ++j) {\n                dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j];\n            }\n        }\n        return *min_element(dp[n-1].begin(), dp[n-1].end());\n    }\n};\n```\n```\nclass Solution {\npublic:\n    int minimumTotal(vector<vector<int> > &triangle) {\n        int n = triangle.size();\n        if (n == 0) return 0;\n        for (int i = n - 2; i >= 0; --i) {\n            for (int j = 0; j <= i; ++j) {\n                triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1]);\n            }\n        }\n        return triangle[0][0];\n    }\n};\n```\n\n## 杨辉三角-ii\n\n描述\n> 给出一个索引k，返回杨辉三角的第k行\n> 例如，k=3，\n> 返回[1,3,3,1].\n> 备注：\n> 你能将你的算法优化到只使用O(k)的额外空间吗?\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param rowIndex int整型 \n     * @return int整型vector\n     */\n    vector<int> getRow(int rowIndex) {\n        int n = rowIndex;\n        vector<vector<int> > dp(n+1, vector<int>(n+1, 1));\n        for (int i = 2; i <= n; ++i) {\n            for (int j = 1; j < i; ++j) {\n                dp[i][j] = dp[i-1][j-1]+dp[i-1][j];\n            }\n        }\n        return dp[n];\n    }\n};\n```\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param rowIndex int整型 \n     * @return int整型vector\n     */\n    vector<int> getRow(int rowIndex) {\n        int n = rowIndex;\n        vector<int> a(n+1, 1);\n        vector<int> b(n+1, 1);\n        for (int i = 2; i <= n; ++i) {\n            for (int j = 1; j < i; ++j) a[j] = b[j] + b[j-1];\n            for (int j = 1; j < i; ++j) b[j] = a[j];\n\n        }\n        return b;\n    }\n};\n```\n\n## 杨辉三角\n\n描述\n> 给出一个值numRows，生成杨辉三角的前numRows行\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param numRows int整型 \n     * @return int整型vector<vector<>>\n     */\n    vector<vector<int> > generate(int numRows) {\n        int n = numRows;\n        vector<vector<int> > dp(n, vector<int>(n, 1));\n        for (int i = 2; i < n; ++i) {\n            for (int j = 1; j < i; ++j) {\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j];\n            }\n        }\n        vector<vector<int> > res;\n        for (int i = 0; i < n; ++i) {\n            vector<int> tmp;\n            for (int j = 0; j <= i; ++j) {\n                tmp.push_back(dp[i][j]);\n            }\n            res.push_back(tmp);\n        }\n        return res;\n    }\n};\n```\n\n## 填充每个节点指向最右节点的next指针 ii\n描述\n> 继续思考\"填充每个节点指向最右节点的next指针\" 这道题\n> 如果给定的树可以是任意的二叉树呢?你之前的给出的算法还有效吗?\n> 注意：\n> 你只能使用常量的额外内存空间\n```\n/**\n * Definition for binary tree with next pointer.\n * struct TreeLinkNode {\n *  int val;\n *  TreeLinkNode *left, *right, *next;\n *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        if (root == nullptr) return;\n        queue<TreeLinkNode *> q1;\n        queue<TreeLinkNode *> q2;\n        q1.push(root);\n        TreeLinkNode *nxt, *cur;\n        while (!q1.empty() || !q2.empty()) {\n            while (!q1.empty()) {\n                cur = q1.front();\n                q1.pop();\n                if (!q1.empty()) nxt = q1.front();\n                else nxt = nullptr;\n                cur->next = nxt;\n                if (cur->left) q2.push(cur->left);\n                if (cur->right) q2.push(cur->right);\n            }\n            while (!q2.empty()) {\n                cur = q2.front();\n                q2.pop();\n                if (!q2.empty()) nxt = q2.front();\n                else nxt = nullptr;\n                cur->next = nxt;\n                if (cur->left) q1.push(cur->left);\n                if (cur->right) q1.push(cur->right);\n            }\n        }        \n    }\n};\n```\n```\n/**\n * Definition for binary tree with next pointer.\n * struct TreeLinkNode {\n *  int val;\n *  TreeLinkNode *left, *right, *next;\n *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        if (root == nullptr) return;\n        queue<TreeLinkNode *> q;\n        q.push(root);\n        TreeLinkNode *cur;\n        while (!q.empty()) {\n            int n = q.size();\n            while (n--) {\n                cur = q.front();\n                q.pop();\n                if (n == 0) cur->next = nullptr;\n                else cur->next = q.front();\n                if (cur->left) q.push(cur->left);\n                if (cur->right) q.push(cur->right);\n            }\n        }        \n    }\n};\n```\n\n## 填充每个节点指向最右节点的next指针\n\n描述\n> 给定一个二叉树\n> 填充所有节点的next指针，指向最接近它的同一层右边节点。如果没有同一层没有右边的节点，则应该将next指针设置为NULL\n> 初始时，所有的next指针都为NULL\n> 注意：\n> 你只能使用常量级的额外内存空间\n> 可以假设给出的二叉树是一个完美的二叉树(即，所有叶子节点都位于同一层，而且每个父节点都有两个孩子节点)\n```\n/**\n * Definition for binary tree with next pointer.\n * struct TreeLinkNode {\n *  int val;\n *  TreeLinkNode *left, *right, *next;\n *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        if (!root) return;\n        TreeLinkNode *level = root;\n        TreeLinkNode *cur;\n        while (level) {\n            cur = level;\n            while (cur) {\n                if (cur->left) cur->left->next = cur->right;\n                if (cur->next && cur->right) cur->right->next = cur->next->left;\n                cur = cur->next;\n            }\n            level = level->left;\n        }\n    }\n};\n```\n\n## 不同的子序列\n\n描述\n> 给定两个字符串S和T，返回S子序列等于T的不同子序列个数有多少个？\n> 字符串的子序列是由原来的字符串删除一些字符（也可以不删除）在不改变相对位置的情况下的剩余字符（例如，\"ACE\"is a subsequence of\"ABCDE\"但是\"AEC\"不是）\n> 例如：\n> S=\"nowcccoder\", T = \"nowccoder\"\n> 返回3\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param S string字符串 \n     * @param T string字符串 \n     * @return int整型\n     */\n    int numDistinct(string S, string T) {\n        int n = S.size();\n        int m = T.size();\n        vector<vector<int> > dp(n+1, vector<int>(m+1, 0));\n        for (int i = 0; i <= n; ++i) dp[i][0] = 1;\n        for (int j = 1; j <= m; ++j) dp[0][j] = 0;\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 1; j <= m; ++j) {\n                if (S[i-1] != T[j-1]) dp[i][j] = dp[i-1][j];\n                else dp[i][j] = dp[i-1][j-1] + dp[i-1][j];\n            }\n        }\n        return dp[n][m];\n    }\n};\n```\n\n## 二叉树中和为某一值的路径(二)\n\n描述\n> 输入一颗二叉树的根节点root和一个整数expectNumber，找出二叉树中结点值的和为expectNumber的所有路径\n> 1.该题路径定义为从树的根结点开始往下一直到叶子结点所经过的结点\n> 2.叶子节点是指没有子节点的节点\n> 3.路径只能从父节点到子节点，不能从子节点到父节点\n> 4.总节点数目为n\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @param target int整型 \n     * @return int整型vector<vector<>>\n     */\n    void dfs(TreeNode *root, vector<vector<int> > &res, vector<int> &path, int &sum, int target) {\n        if (!root) return;\n        sum += root->val;\n        path.push_back(root->val);\n        if (!root->left && !root->right && sum == target) res.push_back(path);\n        dfs(root->left, res, path, sum, target);\n        dfs(root->right, res, path, sum, target);\n\n        path.pop_back();\n        sum -= root->val;\n    }\n    vector<vector<int> > FindPath(TreeNode* root, int target) {\n        vector<vector<int> > res;\n        vector<int> path;\n        int sum = 0;\n        dfs(root, res, path, sum, target);\n        return res;\n    }\n};\n```\n\n## 二叉树中和为某一值的路径(一)\n\n描述\n> 给定一个二叉树root和一个值 sum ，判断是否有从根节点到叶子节点的节点值之和等于 sum 的路径\n> 1.该题路径定义为从树的根结点开始往下一直到叶子结点所经过的结点\n> 2.叶子节点是指没有子节点的节点\n> 3.路径只能从父节点到子节点，不能从子节点到父节点\n> 4.总节点数目为n\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @param sum int整型 \n     * @return bool布尔型\n     */\n    bool hasPathSum(TreeNode* root, int sum) {\n        if (root && !root->left && !root->right && root->val == sum) return true;\n        if (!root) return false;\n        return hasPathSum(root->left, sum-root->val) || hasPathSum(root->right, sum-root->val);\n    }\n};\n```\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @param sum int整型 \n     * @return bool布尔型\n     */\n    bool dfs(TreeNode *root, int sum) {\n        if (!root) return false;\n        if (root && !root->left && !root->right && root->val == sum) return true;\n        return dfs(root->left, sum-root->val) || dfs(root->right, sum-root->val);\n    }\n    bool hasPathSum(TreeNode* root, int sum) {\n        return dfs(root, sum);\n    }\n};\n```\n\n## 判断二叉树是否为平衡二叉树\n\n描述\n> 本题要求判断给定的二叉树是否是平衡二叉树\n> 平衡二叉树的性质为: 要么是一棵空树，要么任何一个节点的左右子树高度差的绝对值不超过 1\n> 一颗树的高度指的是树的根节点到所有节点的距离中的最大值\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return bool布尔型\n     */\n    int depth(TreeNode *root) {\n        if (!root) return 0;\n        int left = depth(root->left);\n        int right = depth(root->right);\n        return max(left, right) + 1;\n    }\n    bool isBalanced(TreeNode* root) {\n        if (!root) return true;\n        int left = depth(root->left);\n        int right = depth(root->right);\n\n        return isBalanced(root->left) && isBalanced(root->right) && abs(left-right) <= 1; \n    }\n};\n```\n\n## 有序链表变成二叉搜索树\n\n描述\n> 给定一个单链表，其中的元素按升序排序，请将它转化成平衡二叉搜索树（BST）\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n/**\n * struct ListNode {\n *  int val;\n *  struct ListNode *next;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param head ListNode类 \n     * @return TreeNode类\n     */\n    TreeNode *merge(ListNode *head, ListNode *tail) {\n        if (head == tail) return nullptr;\n        ListNode *slow = head, *fast = head;\n        while (fast != tail && fast->next != tail) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        TreeNode *root = new TreeNode(slow->val);\n        root->left = merge(head, slow);\n        root->right = merge(slow->next, tail);\n        return root;\n    }\n    TreeNode* sortedListToBST(ListNode* head) {\n        return merge(head, nullptr);\n    }\n};\n```\n\n## 将升序数组转化为平衡二叉搜索树\n\n描述\n> 给定一个升序排序的数组，将其转化为平衡二叉搜索树（BST）\n> 平衡二叉搜索树指树上每个节点 node 都满足左子树中所有节点的的值都小于 node 的值，右子树中所有节点的值都大于 node 的值，并且左右子树的节点数量之差不大于1\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param nums int整型vector \n     * @return TreeNode类\n     */\n    TreeNode *merge(vector<int> &nums, int left, int right) {\n        if (left == right) return nullptr;\n        int mid = left + (right - left) / 2;\n        TreeNode *root = new TreeNode(nums[mid]);\n        root->left = merge(nums, left, mid);\n        root->right = merge(nums, mid+1, right);\n        return root;\n    }\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        int n = nums.size();\n        return merge(nums, 0, n);\n    }\n};\n```\n\n## 二叉树层序遍历 ii\n\n描述\n> 给定一个二叉树，返回该二叉树由底层到顶层的层序遍历，（从左向右，从叶子节点到根节点，一层一层的遍历）\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型vector<vector<>>\n     */\n    vector<vector<int> > levelOrderBottom(TreeNode* root) {\n        vector<vector<int> > res;\n        if (!root) return res;\n        queue<TreeNode *> q;\n        q.push(root);\n        TreeNode *cur;\n        while (!q.empty()) {\n            int n = q.size();\n            vector<int> tmp;\n            while (n--) {\n                cur = q.front();\n                tmp.push_back(cur->val);\n                q.pop();\n                if (cur->left) q.push(cur->left);\n                if (cur->right) q.push(cur->right);\n            }\n            res.push_back(tmp);\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};\n```\n\n## 从中序和后序遍历构造二叉树\n\n描述\n> 给出一棵树的中序遍历和后序遍历，请构造这颗二叉树\n> 注意：\n> 保证给出的树中不存在重复的节点\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param inorder int整型vector \n     * @param postorder int整型vector \n     * @return TreeNode类\n     */\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        int n = inorder.size();\n        if (n == 0) return nullptr;\n        if (n == 1) return new TreeNode(inorder[0]);\n\n        int index = 0;\n        for (int i = 0; i < n; ++i) {\n            if (inorder[i] == postorder[n-1]) {\n                index = i;\n                break;\n            }\n        }\n\n        vector<int> leftInorder, leftPostorder, rightInorder, rightPostorder;\n        for (int i = 0; i < index; ++i) leftInorder.push_back(inorder[i]);\n        for (int i = index + 1; i < n; ++i) rightInorder.push_back(inorder[i]);\n        for (int i = index; i < n - 1; ++i) rightPostorder.push_back(postorder[i]);\n        for (int i = 0; i < index; ++i) leftPostorder.push_back(postorder[i]);\n\n        TreeNode *root = new TreeNode(inorder[index]);\n\n        root->left =  buildTree(leftInorder, leftPostorder);\n        root->right = buildTree(rightInorder, rightPostorder);\n\n        return root;\n    }\n};\n```\n\n## 从前序和中序遍历构造二叉树\n\n描述\n> 给出一棵树的前序遍历和中序遍历，请构造这颗二叉树\n> 注意：\n> 可以假设树中不存在重复的节点\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param preorder int整型vector \n     * @param inorder int整型vector \n     * @return TreeNode类\n     */\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        int n = preorder.size();\n        if (n == 0) return nullptr;\n        if (n == 1) return new TreeNode(preorder[0]);\n\n        int index = 0;\n        for (int i = 0; i < n; ++i) {\n            if (inorder[i] == preorder[0]) {\n                index = i;\n                break;\n            }\n        }\n\n        vector<int> leftPreorder, leftInorder, rightPreorder, rightInorder;\n        TreeNode *root = new TreeNode(inorder[index]);\n\n        for (int i = 0; i < index; ++i) leftInorder.push_back(inorder[i]);\n        for (int i = index+1; i < n; ++i) rightInorder.push_back(inorder[i]);\n        for (int i = 1; i <= index; ++i) leftPreorder.push_back(preorder[i]);\n        for (int i = index+1; i < n; ++i) rightPreorder.push_back(preorder[i]);\n\n        root->left = buildTree(leftPreorder, leftInorder);\n        root->right = buildTree(rightPreorder, rightInorder);\n\n        return root;\n    }\n};\n```\n\n## 二叉树的最大深度\n\n描述\n> 求给定二叉树的最大深度\n> 深度是指树的根节点到任一叶子节点路径上节点的数量\n> 最大深度是所有叶子节点的深度的最大值\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @return int整型\n     */\n    int maxDepth(TreeNode* root) {\n        if (!root) return 0;\n        return max(maxDepth(root->left), maxDepth(root->right)) + 1;\n    }\n};\n```\n\n## 按之字形顺序打印二叉树\n\n描述\n> 给定一个二叉树，返回该二叉树的之字形层序遍历，（第一层从左向右，下一层从右向左，一直这样交替）\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param pRoot TreeNode类 \n     * @return int整型vector<vector<>>\n     */\n    vector<vector<int> > Print(TreeNode* pRoot) {\n        vector<vector<int> > res;\n        if (!pRoot) return res;\n        queue<TreeNode *> q;\n        q.push(pRoot);\n        TreeNode *cur;\n        int level = 1;\n        while (!q.empty()) {\n            vector<int> tmp;\n            int n = q.size();\n            while (n--) {\n                cur = q.front();\n                tmp.push_back(cur->val);\n                q.pop();\n                if (cur->left) q.push(cur->left);\n                if (cur->right) q.push(cur->right);\n            }\n            if (level & 1) res.push_back(tmp);\n            else {\n                reverse(tmp.begin(), tmp.end());\n                res.push_back(tmp);\n            }\n            ++level;\n        }\n        return res;\n    }\n};\n```\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param pRoot TreeNode类 \n     * @return int整型vector<vector<>>\n     */\n    vector<vector<int> > Print(TreeNode* pRoot) {\n        vector<vector<int> > res;\n        if (!pRoot) return res;\n        stack<TreeNode *> s1, s2;\n        s1.push(pRoot);\n        TreeNode *cur;\n        while (!s1.empty() || !s2.empty()) {\n            vector<int> tmp;\n            while (!s1.empty()) {\n                cur = s1.top();\n                tmp.push_back(cur->val);\n                s1.pop();\n                if (cur->left) s2.push(cur->left);\n                if (cur->right) s2.push(cur->right);\n            }\n            if (!tmp.empty()) res.push_back(tmp);\n            tmp.clear();\n            while (!s2.empty()) {\n                cur = s2.top();\n                tmp.push_back(cur->val);\n                s2.pop();\n                if (cur->right) s1.push(cur->right);\n                if (cur->left) s1.push(cur->left);\n            }\n            if (!tmp.empty()) res.push_back(tmp);\n        }\n        return res;\n    }\n};\n```\n\n## 求二叉树的层序遍历\n\n描述\n> 给定一个二叉树，返回该二叉树层序遍历的结果，（从左到右，一层一层地遍历）\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @return int整型vector<vector<>>\n     */\n    vector<vector<int> > levelOrder(TreeNode* root) {\n        vector<vector<int> > res;\n        if (!root) return res;\n        queue<TreeNode *> q;\n        q.push(root);\n        TreeNode *cur;\n        while (!q.empty()) {\n            int n = q.size();\n            vector<int> tmp;\n            while (n--) {\n                cur = q.front();\n                tmp.push_back(cur->val);\n                q.pop();\n                if (cur->left) q.push(cur->left);\n                if (cur->right) q.push(cur->right);\n            }\n            res.push_back(tmp); \n        }\n        return res;\n    }\n};\n```\n\n## 对称的二叉树\n\n描述\n> 给定一棵二叉树，判断其是否是自身的镜像（即：是否对称）\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param pRoot TreeNode类 \n     * @return bool布尔型\n     */\n    bool same(TreeNode *r1, TreeNode *r2) {\n        return (!r1 && !r2) || (r1 && r2 && r1->val == r2->val && same(r1->left, r2->left) && same(r1->right, r2->right));\n    }\n    void mirror(TreeNode *root) {\n        if (!root || (!root->left && !root->right)) return;\n        TreeNode *left = root->left;\n        TreeNode *right = root->right;\n        mirror(left);\n        mirror(right);\n        root->left = right;\n        root->right = left;\n    }\n    bool isSymmetrical(TreeNode* pRoot) {\n        if (!pRoot) return true;\n        mirror(pRoot->right);\n        return same(pRoot->left, pRoot->right);\n    }\n};\n```\n\n## 判断二叉树是否相等\n\n描述\n> 给出两个二叉树，请写出一个判断两个二叉树是否相等的函数\n> 判断两个二叉树相等的条件是：两个二叉树的结构相同，并且相同的节点上具有相同的值\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param p TreeNode类 \n     * @param q TreeNode类 \n     * @return bool布尔型\n     */\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        return (!p && !q) || (p && q && p->val == q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right));\n    }\n};\n```\n\n## 恢复二叉搜索树\n\n描述\n> 二叉搜索树（BST）中的两个节点的值被错误地交换了\n> 请在不改变树的结构的情况下恢复这棵树\n> 备注；\n> 用O(n)的空间解决这个问题的方法太暴力了，你能设计一个常数级空间复杂度的算法么？\n```\n/**\n * Definition for binary tree\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode *root, TreeNode *&pre, TreeNode *&first, TreeNode *&second) {\n        if (!root) return;\n        inorder(root->left, pre, first, second);\n        if (pre && pre->val > root->val) {\n            if (!first) first = pre;\n            second = root;\n        }\n        pre = root;\n        inorder(root->right, pre, first, second);\n       \n    }\n    void recoverTree(TreeNode *root) {\n        TreeNode *pre = nullptr, *first = nullptr, *second = nullptr;\n        inorder(root, pre, first, second);\n        if (first && second) swap(first->val, second->val);\n    }\n};\n```\n```\n/**\n * Definition for binary tree\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\nprivate:\n    TreeNode *pre = nullptr, *first = nullptr, *second = nullptr;\npublic:\n    void inorder(TreeNode *root) {\n        if (!root) return;\n        inorder(root->left);\n        if (pre && pre->val > root->val) {\n            if (!first) first = pre;\n            second = root;\n        }\n        pre = root;\n        inorder(root->right);\n       \n    }\n    void recoverTree(TreeNode *root) {\n        inorder(root);\n        if (first && second) swap(first->val, second->val);\n    }\n};\n```\n\n## 判断二叉搜索树\n\n描述\n> 判断给出的二叉树是否是一个二叉搜索树（BST）\n> 二叉搜索树的定义如下\n> 一个节点的左子树上节点的值都小于自身的节点值\n> 一个节点的右子树上节点的值都大于自身的节点值\n> 所有节点的左右子树都必须是二叉搜索树\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\nprivate:\n    TreeNode *pre = nullptr;\n    bool flag = true;\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return bool布尔型\n     */\n    void inorder(TreeNode *root) {\n        if (!root) return;\n        inorder(root->left);\n        if (pre && pre->val >= root->val) flag = false;\n        pre = root;\n        inorder(root->right);\n    }\n    bool isValidBST(TreeNode* root) {\n        inorder(root);\n        return flag;\n    }\n};\n```\n\n## 交织的字符串\n\n描述\n> 给出三个字符串s1, s2, s3,判断s3是否可以由s1和s2交织而成\n> 例如：\n> 给定\n> s1 =\"xxyzz\",\n> s2 =\"pyyzx\",\n> 如果s3 =\"xxpyyzyzxz\", 返回true\n> 如果s3 =\"xxpyyyxzzz\", 返回false\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param s1 string字符串 \n     * @param s2 string字符串 \n     * @param s3 string字符串 \n     * @return bool布尔型\n     */\n    bool isInterleave(string s1, string s2, string s3) {\n        int n = s1.size();\n        int m = s2.size();\n        int l = s3.size();\n        if (l != n + m) return false;\n        vector<vector<bool>> dp(n+1, vector<bool>(m+1, false));\n        dp[0][0] = true;\n        for (int i = 0; i < n; ++i) {\n            if (s1[i] == s3[i]) dp[i+1][0] = true;\n        }\n        for (int j = 0; j < m; ++j) {\n            if (s2[j] == s3[j]) dp[0][j+1] = true;\n        }\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                char a = s1[i], b = s2[j], c = s3[i+j+1];\n                if (a == c && b != c) dp[i+1][j+1] = dp[i][j+1];\n                if (a != c && b == c) dp[i+1][j+1] = dp[i+1][j];\n                if (a == c && b == c) dp[i+1][j+1] = dp[i][j+1] || dp[i+1][j];\n                if (a != c && b != c) dp[i+1][j+1] = false;\n            }\n        }\n        return dp[n][m];\n    }\n};\n```\n\n## 不同的二叉搜索树 ii\n\n描述\n> 给定一个值n,请生成所有的存储值1...n.的二叉搜索树（BST）的结构\n> 例如：\n> 给定n=3，你的程序应该给出下面五种不同的二叉搜索树（BST）\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param n int整型 \n     * @return TreeNode类vector\n     */\n    vector<TreeNode *> postorder(int left, int right) {\n        if (left > right) return vector<TreeNode *>{nullptr};\n        vector<TreeNode *> res;\n        for (int i = left; i <= right; ++i) {\n            vector<TreeNode *> left_vec = postorder(left, i-1);\n            vector<TreeNode *> right_vec = postorder(i+1, right);\n            int n = left_vec.size();\n            int m = right_vec.size();\n            for (int a = 0; a < n; ++a) {\n                for (int b = 0; b < m; ++b) {\n                    TreeNode *root = new TreeNode(i);\n                    root->left = left_vec[a];\n                    root->right = right_vec[b];\n                    res.push_back(root);\n                }\n            }\n        }\n        return res;\n    }\n    vector<TreeNode*> generateTrees(int n) {\n        return postorder(1, n);\n    }\n};\n```\n\n## 不同的二叉搜索树\n\n描述\n> 给定一个值n，能构建出多少不同的值包含1...n的二叉搜索树（BST）？\n> 例如\n> 给定 n = 3, 有五种不同的二叉搜索树（BST）\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param n int整型 \n     * @return int整型\n     */\n    int postorder(int left, int right) {\n        if (left > right) return 0;\n        int res = 0;\n        for (int i = left; i <= right; ++i) {\n            int l = postorder(left, i-1);\n            int r = postorder(i+1, right);\n            if (l != 0 && r != 0) res += l * r;\n            else if (l == 0 && r == 0) res += 1;\n            else if (l == 0) res += r;\n            else res += l;\n        }\n        return res;\n    }\n    int numTrees(int n) {\n        return postorder(1, n);\n    }\n};\n```\n```\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param n int整型 \n     * @return int整型\n     */\n    int numTrees(int n) {\n        vector<int> dp(n+1, 0);\n        dp[0] = 1, dp[1] = 1;\n        for (int i = 2; i <= n; ++i) {\n            for (int j = 1; j <= i; ++j) {\n                dp[i] += dp[j-1] * dp[i-j];\n            }\n        }\n        return dp[n];\n    }\n};\n```\n\n## 二叉树的中序遍历\n\n描述\n> 给出一棵二叉树，返回这棵树的中序遍历\n> 例如：\n> 给出的二叉树为{1,#,2,3}\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型vector\n     */\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> res;\n        if (!root) return res;\n        stack<TreeNode *> s;\n        TreeNode *cur = root;\n        while (!s.empty() || cur) {\n            while (cur) {\n                s.push(cur);\n                cur = cur->left;\n            }\n            cur = s.top();\n            res.push_back(cur->val);\n            s.pop();\n            cur = cur->right;\n        }\n        return res;\n    }\n};\n```\n\n## 数字字符串转化成IP地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/牛客网LeetCode编程题.md","raw":"\n---\ntitle: 牛客网LeetCode编程题\ndate: 2023-09-12 16:27:00\ntags: Algorithm\ncategories: Algorithm\n---\n\n[牛客网LeetCode编程题](https://www.nowcoder.com/ta/classic-code)\n\n##  二叉树的最小深度\n\n描述\n> 求给定二叉树的最小深度。最小深度是指树的根结点到最近叶子结点的最短路径上结点的数量\n```\n/**\n * struct TreeNode {\n *\tint val;\n *\tstruct TreeNode *left;\n *\tstruct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型\n     */\n    int run(TreeNode* root) {\n        if (root == nullptr) return 0;\n        int left = run(root->left);\n        int right = run(root->right);\n        if (left == 0) return right + 1;\n        else if (right == 0) return left + 1;\n        else return min(left, right) + 1;\n    }\n};\n```\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型\n     */\n    int run(TreeNode* root) {\n        if (root == nullptr) return 0;\n        queue<TreeNode *> q;\n        root->val = 1;\n        q.push(root);\n        while (!q.empty()) {\n            TreeNode *cur = q.front();\n            if (cur->left == nullptr && cur->right == nullptr) return cur->val;\n            if (cur->left) {\n               q.push(cur->left);\n               cur->left->val = cur->val + 1; \n            }\n            if (cur->right) {\n                q.push(cur->right);\n                cur->right->val = cur->val + 1;\n            }\n            q.pop();\n        }\n        return 0;\n    }\n};\n```\n\n## 后缀表达式求值\n\n描述\n> 计算逆波兰式（后缀表达式）的值\n> 运算符仅包含\"+\",\"-\",\"*\"和\"/\"，被操作数是整数\n> 保证表达式合法，除法时向下取整。\n\n> 数据范围：表达式的长度满足： n<=1000\n> 进阶：空间复杂度 O(n) 时间复杂度 O(n)\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param tokens string字符串vector \n     * @return int整型\n     */\n    bool isOperator(string token) {\n        return (token == \"+\" || token == \"-\" || token == \"*\" || token == \"/\");\n    }\n    int evalRPN(vector<string>& tokens) {\n        int n = tokens.size();\n        if (n == 0) return 0;\n        stack<int> s;\n        for (int i = 0; i < n; ++i) {\n            if (!isOperator(tokens[i])) {\n                s.push(stoi(tokens[i]));\n            }\n            else {\n                int b = s.top();\n                s.pop();\n                int a = s.top();\n                s.pop();\n                if (tokens[i] == \"+\") s.push(a+b);\n                if (tokens[i] == \"-\") s.push(a-b);\n                if (tokens[i] == \"*\") s.push(a*b);\n                if (tokens[i] == \"/\") s.push(a/b); \n            }\n        }\n        return s.top();\n    }\n};\n```\n\n## 多少个点位于同一直线\n\n描述\n> 对于给定的n个位于同一二维平面上的点，求最多能有多少个点位于同一直线上\n```\n/**\n * struct Point {\n *\tint x;\n *\tint y;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param points Point类vector \n     * @return int整型\n     */\n    int gcd(int a, int b) {\n        return b == 0 ? a : gcd(b, a % b);\n    }\n    int maxPoints(vector<Point>& points) {\n        int n = points.size();\n        if (n <= 2) return n;\n        int max_points = 0;\n        for (int i = 0; i < n; ++i) {\n            map<pair<int, int>, int> mp;\n            int dup = 1;\n            for (int j = i + 1; j < n; ++j) {\n                int x = points[j].x - points[i].x;\n                int y = points[j].y - points[i].y;\n                if (x == 0 && y == 0) dup++;\n                else {\n                    int g = gcd(x, y);\n                    x /= g;\n                    y /= g;\n                    mp[{x, y}]++;\n                }\n            }\n            max_points = max(max_points, dup);\n            for (auto it = mp.begin(); it != mp.end(); ++it) {\n                max_points = max(max_points, dup + it->second);\n            }\n        }\n        return max_points;\n    }\n};\n```\n```\n/**\n * struct Point {\n *  int x;\n *  int y;\n * };\n */\n\n#include <cfloat>\nclass Solution {\npublic:\n    /**\n     * \n     * @param points Point类vector \n     * @return int整型\n     */\n    int maxPoints(vector<Point>& points) {\n        int n = points.size();\n        if (n <= 2) return n;\n        int max_points = 0;\n        for (int i = 0; i < n; ++i) {\n            map<float, int> mp;\n            int dup = 1;\n            for (int j = i + 1; j < n; ++j) {\n                int x = points[j].x - points[i].x;\n                int y = points[j].y - points[i].y;\n                if (x == 0 && y == 0) ++dup;\n                else {\n                    if (x == 0) mp[FLT_MAX]++;\n                    else mp[(1.0 * y)/x]++; \n                }\n            }\n            max_points = max(max_points, dup);\n            for (auto it = mp.begin(); it != mp.end(); ++it) {\n                max_points = max(max_points, it->second + dup);\n            }\n        }\n        return max_points;\n    }\n};\n```\n\n## 链表排序\n\n描述\n> 在O(n log n)的时间内使用常数级空间复杂度对链表进行排序\n```\n/**\n * struct ListNode {\n *  int val;\n *  struct ListNode *next;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param head ListNode类 \n     * @return ListNode类\n     */\n    ListNode* merge(ListNode* h1, ListNode* h2) {\n        if (h1 == nullptr) return h2;\n        if (h2 == nullptr) return h1;\n        if (h1->val < h2->val) {\n            h1->next = merge(h1->next, h2);\n            return h1;\n        }\n        else {\n            h2->next = merge(h1, h2->next);\n            return h2;\n        }\n    }\n    ListNode* middle(ListNode* h) {\n        if (h == nullptr) return nullptr;\n        ListNode *slow = h, *fast = slow->next;\n        while (slow && fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        return slow;\n    }\n    ListNode* sortList(ListNode* head) {\n        if (head == nullptr || head->next == nullptr) return head;\n        ListNode *m = middle(head);\n        ListNode *h1 = head;\n        ListNode *h2 = m->next;\n        m->next = nullptr;\n        h1 = sortList(h1);\n        h2 = sortList(h2);\n        return merge(h1, h2);\n    }\n};\n```\n\n## 链表的插入排序\n\n描述\n> 使用插入排序对链表进行排序\n```\n/**\n * struct ListNode {\n *  int val;\n *  struct ListNode *next;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param head ListNode类 \n     * @return ListNode类\n     */\n    ListNode* insertionSortList(ListNode* head) {\n        if (head == nullptr || head->next == nullptr) return head;\n        ListNode *dummy = new ListNode(0);\n        ListNode *cur = head, *nxt;\n        while (cur) {\n            nxt = cur->next;\n            ListNode *pre = dummy;\n            while (pre->next && pre->next->val < cur->val) pre = pre->next;\n            cur->next = pre->next;\n            pre->next = cur;\n            cur = nxt;\n        }\n        return dummy->next;\n    }\n};\n```\n\n## 二叉树的后序遍历\n\n描述\n用递归的方法对给定的二叉树进行后序遍历\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型vector\n     */\n    vector<int> postorderTraversal(TreeNode* root) {\n        vector<int> res;\n        if (root == nullptr) return res;\n        stack<TreeNode *> s1, s2;\n        s1.push(root);\n        while (!s1.empty()) {\n            TreeNode *cur = s1.top();\n            s1.pop();\n            if (cur->left) s1.push(cur->left);\n            if (cur->right) s1.push(cur->right);\n            s2.push(cur);\n        }\n        while (!s2.empty()) {\n            TreeNode * cur = s2.top();\n            res.push_back(cur->val);\n            s2.pop();\n        }\n        return res;\n    }\n};\n```\n\n## 求二叉树的前序遍历\n\n描述\n> 求给定的二叉树的前序遍历\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型vector\n     */\n    vector<int> preorderTraversal(TreeNode* root) {\n        vector<int> res;\n        if (root == nullptr) return res;\n        stack<TreeNode *> s;\n        TreeNode *cur = root;\n        while (!s.empty() || cur) {\n            while (cur) {\n                res.push_back(cur->val);\n                s.push(cur);\n                cur = cur->left;\n            }\n            cur = s.top();\n            s.pop();\n            cur = cur->right;\n        }\n        return res;\n    }\n};\n```\n\n## 重排链表\n\n描述\n> 将给定的单链表L: L0->L1->...->Ln-1->Ln\n> 重新排序为：L0->Ln->L1->Ln-1->...->\n> 要求使用原地算法，不能只改变节点内部的值，需要对实际的节点进行交换\n\n> 数据范围：链表长度 0 <= n <= 20000 链表中每个节点的值满足 0 <= val <= 1000\n\n> 要求：空间复杂度 O(n) 并在链表上进行操作而不新建链表，时间复杂度 O(n)\n> 进阶：空间复杂度 O(1) 时间复杂度 O(n)\n```\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *reverse_list(ListNode *head) {\n        ListNode *pre = nullptr, *cur = head, *nxt = nullptr;\n        while (cur) {\n            nxt = cur->next;\n            cur->next = pre;\n            pre = cur;\n            cur = nxt;\n        }\n        return pre;\n    }\n    void reorderList(ListNode *head) {\n        if (!head || !head->next) return;\n        ListNode *slow = head, *fast = head->next;\n        while (fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        ListNode *l1 = head, *l2 = slow->next;\n        slow->next = nullptr;\n        l2 = reverse_list(l2);\n        ListNode *p = l1, *q = l2, *t;\n        while (q) {\n            t = q->next;\n            q->next = p->next;\n            p->next = q;\n            p = q->next;\n            q = t;\n        }\n    }\n};\n```\n\n## 链表中环的入口结点\n  \n描述\n> 给一个长度为n链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null\n```\n/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n        val(x), next(NULL) {\n    }\n};\n*/\nclass Solution {\npublic:\n    ListNode* EntryNodeOfLoop(ListNode* pHead) {\n        if (pHead == nullptr) return nullptr;\n        ListNode *cur = pHead;\n        map<ListNode *, int> mp;\n        while (cur) {\n            mp[cur]++;\n            if (mp[cur] == 2) return cur;\n            cur = cur->next;\n        }\n        return nullptr;\n    }\n};\n```\n\n## 判断链表中是否有环\n\n描述\n> 判断给定的链表中是否有环。如果有环则返回true，否则返回false\n```\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        if (head == nullptr) return false;\n        map<ListNode *, int> mp;\n        while (head) {\n            mp[head]++;\n            if (mp[head] == 2) return true;\n            head = head -> next;\n        }\n        return false;\n    }\n};\n```\n\n## 拆分词句\n\n描述\n> 给定一个字符串s和一组单词dict，判断s是否可以用空格分割成一个单词序列，使得单词序列中所有的单词都是dict中的单词（序列可以包含一个或多个单词）\n> 例如:\n> 给定s=“nowcode”\n> dict=[\"now\", \"code\"]\n> 返回true，因为\"nowcode\"可以被分割成\"now code\"\n```\nclass Solution {\npublic:\n    bool wordBreak(string s, unordered_set<string> &dict) {\n        int n = s.size();\n        if (n == 0) return true;\n        vector<bool> dp(n+1, false);\n        dp[0] = true;\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (dp[j] && dict.find(s.substr(j, i-j)) != dict.end()) dp[i] = true;\n            }\n        }\n        return dp[n];  \n    }\n};\n```\n\n## 出现一次的数字ii\n\n描述\n> 现在有一个整数类型的数组，数组中只有一个元素只出现一次，其余元素都出现三次。你需要找出只出现一次的元素\n> 数据范围： 数组长度满足 0 <= n <= 4000 数组中每个元素的值满足 0 <= val <= 2147483648\n> 进阶: 空间复杂度 O(1) 时间复杂度 O(n)\n```\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param A int整型一维数组 \n     * @param n int A数组长度\n     * @return int整型\n     */\n    int singleNumber(int* A, int n) {\n        if (!A || n == 0) return 0;\n        int res = 0;\n        for (int i = 0; i < 32; ++i) {\n            int bit = 0;\n            for (int j = 0; j < n; ++j) {\n                bit += (A[j] >> i) & 1;\n            }\n            res += (bit % 3) << i;\n        }\n        return res;\n    }\n};\n```\n\n## 出现一次的数字\n\n描述\n> 现在有一个整数类型的数组，数组中素只有一个元素只出现一次，其余的元素都出现两次\n> 数据范围：0 < n <= 4000  数组中每个值满足 0 <= val <= 4000\n> 进阶： 空间复杂度 O(1) 时间复杂度 O(n)\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param A int整型一维数组 \n     * @param n int A数组长度\n     * @return int整型\n     */\n    int singleNumber(int* A, int n) {\n        if (n == 0) return -1;\n        if (n == 1) return A[0];\n        int res = 0;\n        for (int i = 0; i < n; ++i) {\n            res ^= A[i];\n        }\n        return res;\n    }\n};\n```\n\n## 分糖果\n\n描述\n> 有N个小朋友站在一排，每个小朋友都有一个评分\n> 你现在要按以下的规则给孩子们分糖果：\n> 每个小朋友至少要分得一颗糖果\n> 分数高的小朋友要他比旁边得分低的小朋友分得的糖果多\n> 你最少要分发多少颗糖果\n```\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param ratings int整型vector \n     * @return int整型\n     */\n    int candy(vector<int>& ratings) {\n        int n = ratings.size();\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        vector<int> dp(n, 1);\n        bool flag = true;\n        while (flag) {\n            flag = false;\n            for (int i = 1; i < n; ++i) {\n                if (ratings[i] > ratings[i-1] && dp[i] <= dp[i-1]) {\n                    flag = true;\n                    dp[i] = dp[i-1] + 1;   \n                }\n            }\n            for (int j = n - 2; j >= 0; --j) {\n                if (ratings[j] > ratings[j+1] && dp[j] <= dp[j+1]) {\n                    flag = true;\n                    dp[j] = dp[j+1] + 1;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; ++i) {\n            res += dp[i];\n        }\n        return res;\n    }\n};\n```\n\n## 加油站\n\n描述\n> 环形路上有n个加油站，第i个加油站的汽油量是gas[i].\n> 你有一辆车，车的油箱可以无限装汽油。从加油站i走到下一个加油站（i+1）花费的油量是cost[i]，你从一个加油站出发，刚开始的时候油箱里面没有汽油\n> 求从哪个加油站出发可以在环形路上走一圈。返回加油站的下标，如果没有答案的话返回-1\n> 注意：答案保证唯一\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param gas int整型vector \n     * @param cost int整型vector \n     * @return int整型\n     */\n    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {\n        int n = gas.size();\n        if (n == 0) return -1;\n        for (int p = 0; p < n; ++p) {\n            int t = 0, g = 0;\n            int i = p;\n            while (t < n && i < n && (g + gas[i] - cost[i]) >= 0) {\n                 g += (gas[i] - cost[i]);\n                 ++i;\n                 ++t;\n                 if (i == n) i = 0;\n            }\n            if (t == n) return p;\n        }\n        return -1;\n    }\n};\n```\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param gas int整型vector \n     * @param cost int整型vector \n     * @return int整型\n     */\n    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {\n        int n = gas.size();\n        if (n == 0) return -1;\n        int sum = 0, cur = 0, idx = -1;\n        for (int i = 0; i < n; ++i) {\n            sum += (gas[i] - cost[i]);\n            cur += (gas[i] - cost[i]);\n            if (cur < 0) {\n                cur = 0;\n                idx = i;\n            }\n        }\n        return sum >= 0 ? idx + 1 : -1;\n    }\n};\n```\n\n## 复制无向图\n\n描述\n> 本题要求复制一个无向图，图中每个节点都包含一个标签和它的邻居列表\n```\n/**\n * Definition for undirected graph.\n * struct UndirectedGraphNode {\n *     int label;\n *     vector<UndirectedGraphNode *> neighbors;\n *     UndirectedGraphNode(int x) : label(x) {};\n * };\n */\nclass Solution {\npublic:\n    void dfs(UndirectedGraphNode *node, map<UndirectedGraphNode *, UndirectedGraphNode *> &mp) {\n        if (node == nullptr) return;\n        if (mp[node]) return;\n        mp[node] = new UndirectedGraphNode(node->label);\n        for (auto it : node->neighbors) {\n            dfs(it, mp);\n        }\n    }\n    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {\n        if (node == nullptr) return nullptr;\n        map<UndirectedGraphNode *, UndirectedGraphNode *> mp;\n        dfs(node, mp);\n        for (auto it = mp.begin(); it != mp.end(); ++it) {\n            for (auto cur : it->first->neighbors) {\n                it->second->neighbors.push_back(cur);\n            }\n        }\n        return mp[node];\n    }\n};\n```\n\n## 分割回文串-ii\n\n描述\n> 给出一个字符串s，分割s使得分割出的每一个子串都是回文串\n> 计算将字符串s分割成回文分割结果的最小切割数\n> 例如:给定字符串s=\"aab\",\n> 返回1，因为回文分割结果[\"aa\",\"b\"]是切割一次生成的\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param s string字符串 \n     * @return int整型\n     */\n    int minCut(string s) {\n        int n = s.size();\n        if (n == 0) return 0;\n        \n        vector<vector<bool> > path(n, vector<bool>(n, false));\n        for (int i = 0; i < n; ++i) path[i][i] = true;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (s[j] == s[i] && i - j < 2) path[j][i] = true;\n                else if (s[j] == s[i] && i - j >=2 ) path[j][i] = path[j+1][i-1];\n                else continue;\n            }\n        }\n\n        vector<int> dp(n+1, INT_MAX);\n        dp[0] = -1;\n        for (int i = 1; i <= n; ++i) {\n            for (int j = i-1; j >= 0; --j) {\n                if (path[j][i-1]) {\n                    dp[i] = min(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        \n        return dp[n];\n    }\n};\n```\n\n## 分割回文串\n\n描述\n> 给定一个字符串s，分割s使得s的每一个子串都是回文串\n> 返回所有的回文分割结果。（注意：返回结果的顺序需要和输入字符串中的字母顺序一致\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param s string字符串 \n     * @return string字符串vector<vector<>>\n     */\n    bool is_palindrome(string s) {\n        // int n = s.size();\n        // if (n <= 1) return true;\n        // for (int i = 0, j = n-1; i <= j; ++i, --j) {\n        //     if (s[i] != s[j]) return false;\n        // }\n        // return true;\n        return (s == string(s.rbegin(), s.rend()));\n    }\n    void dfs(vector<vector<string> > &res, vector<string> &path, string s, int index) {\n        int n = s.size();\n        if (n == index) {\n            res.push_back(path);\n            return;\n        }\n        for (int i = 1; i <= n-index; ++i) {\n            if (is_palindrome(s.substr(index, i))) {\n                path.push_back(s.substr(index, i));\n                dfs(res, path, s, index+i);\n                path.pop_back();\n            }\n        }\n\n    }\n    vector<vector<string> > partition(string s) {\n        int n = s.size();\n        vector<vector<string> > res;\n        vector<string> path;\n        if (n == 0) return res;\n        dfs(res, path, s, 0);\n        return res;\n    }\n};\n```\n\n## 包围区域\n\n描述\n> 现在有一个仅包含‘X’和‘O’的二维板，请捕获所有的被‘X’包围的区域\n> 捕获一个被包围区域的方法是将被包围区域中的所有‘O’变成‘X’\n```\nclass Solution {\npublic:\n    void dfs(vector<vector<char> > &board, int i, int j) {\n        int m = board.size();\n        if (m == 0) return;\n        int n = board[0].size();\n        if (i < 0 || j < 0 || i >= m || j >= n) return;\n        if (board[i][j] != 'O') return;\n        board[i][j] = 'A';\n        dfs(board, i+1, j);\n        dfs(board, i-1, j);\n        dfs(board, i, j-1);\n        dfs(board, i, j+1);\n    }\n    void solve(vector<vector<char>> &board) {\n        int m = board.size();\n        if (m == 0) return;\n        int n = board[0].size();\n        for (int i = 0; i < m; ++i) {\n            dfs(board, i, 0);\n            dfs(board, i, n-1);\n        }\n        for  (int j = 0; j < n; ++j) {\n            dfs(board, 0, j);\n            dfs(board, m-1, j);\n        }\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (board[i][j] == 'O') board[i][j] = 'X';\n                if (board[i][j] == 'A') board[i][j] = 'O';\n            }\n        }\n    }\n};\n\n```\n\n## 二叉树根节点到叶子节点的所有路径和\n\n描述\n> 给定一个二叉树的根节点root，该树的节点值都在数字0−9 之间，每一条从根节点到叶子节点的路径都可以用一个数字表示\n> 1.该题路径定义为从树的根结点开始往下一直到叶子结点所经过的结点\n> 2.叶子节点是指没有子节点的节点\n> 3.路径只能从父节点到子节点，不能从子节点到父节点\n> 4.总节点数目为n\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @return int整型\n     */\n    void dfs(vector<vector<int> > &res, vector<int> &path, TreeNode *root) {\n        if (root == nullptr) return;\n        path.push_back(root->val);\n        dfs(res, path, root->left);\n        dfs(res, path, root->right);\n        if (root->left == nullptr && root->right == nullptr) res.push_back(path);\n        path.pop_back();\n    }\n    int sumNumbers(TreeNode* root) {\n        vector<vector<int> > res;\n        vector<int> path;\n        dfs(res, path, root);\n        int n = res.size();\n        if (n == 0) return 0;\n        int total = 0;\n        for (int i = 0; i < n; ++i) {\n            int m = res[i].size();\n            int sum = 0;\n            for (int j = 0; j < m; ++j) {\n                sum = 10 * sum + res[i][j];\n            }\n            total += sum;\n        }\n        return total;\n    }\n};\n```\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型\n     */\n    void dfs(TreeNode *root, int path, int &sum) {\n        if (!root) return;\n        path = 10 * path + root->val;\n        if (root->left == nullptr && root->right == nullptr) {\n            sum += path;\n        } \n        dfs(root->left, path, sum);\n        dfs(root->right, path, sum);\n        \n//         path = path / 10;\n    }\n   \n    int sumNumbers(TreeNode* root) {\n        int sum = 0;\n        int path = 0;\n        dfs(root, path, sum);\n        return sum;\n    }\n};\n```\n\n## 最长的连续元素序列长度\n\n描述\n> 给定一个无序的整数类型数组，求最长的连续元素序列的长度\n> 例如：\n> 给出的数组为[1000, 4, 2000, 1, 3, 2],\n> 最长的连续元素序列为[1, 2, 3, 4]. 返回这个序列的长度：4\n> 你需要给出时间复杂度在O（n）之内的算法\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param num int整型vector \n     * @return int整型\n     */\n    int longestConsecutive(vector<int>& num) {\n        int n = num.size();\n        if (n == 0) return 0;\n        map<int, int> mp;\n        for (int i = 0; i < n; ++i) mp[num[i]]++;\n        int res = 0;\n        for (auto it = mp.begin(); it != mp.end(); ++it) {\n            if (mp[it->first] > 0) {\n                int l = 1;\n                int i = it->first + 1;\n                while (mp[i] >= 1) {\n                    ++l;\n                    mp[i] = 0;\n                    ++i;\n                }\n                i = it->first - 1;\n                while (mp[i] >= 1) {\n                    ++l;\n                    mp[i] = 0;\n                    --i;\n                }\n                mp[it->first] = 0;\n                res = max(res, l);\n            }\n        }\n        return res;\n    }\n};\n```\n\n## 词语序列\n\n描述\n> 给定两个单词（初始单词和目标单词）和一个单词字典，请找出所有的从初始单词到目标单词的最短转换序列的长度\n> 每一次转换只能改变一个单词\n> 每一个中间词都必须存在单词字典当中\n```\nclass Solution {\npublic:\n    int ladderLength(string start, string end, unordered_set<string> &dict) {\n        queue<string> q;\n        unordered_set<string> s;\n        q.push(start);\n        s.emplace(start);\n        int res = 1;\n        while (!q.empty()) {\n            int q_size = q.size();\n            while (q_size--) {\n                string cur = q.front();\n                q.pop();\n                if (cur == end) return res;\n                int n = cur.size();\n                for (int i = 0; i < n; ++i) {\n                    string nxt(cur);\n                    for (int j = 'a'; j <= 'z'; ++j) {\n                        if (nxt[i] == j) continue;\n                        nxt[i] = j;\n                        // if (s.find(nxt) != s.end() || dict.find(nxt) == dict.end()) continue;\n                        if (s.count(nxt) || !dict.count(nxt)) continue;\n                        s.emplace(nxt);\n                        q.push(nxt);\n                    }\n                }\n                \n            }\n            ++res;\n        }\n        return 0;\n    }\n};\n```\n\n## 判断回文串\n\n描述\n> 判断题目给出的字符串是不是回文，仅考虑字符串中的字母字符和数字字符，并且忽略大小写\n> 例如：\"nowcoder Is Best tsebsi: redoc won\"是回文  \"race a car\"不是回文\n注意：\n> 你有没有考虑过字符串可能为空？这是面试时应该提出的一个好问题\n> 针对这个问题，我们定义空字符串是回文\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param s string字符串 \n     * @return bool布尔型\n     */\n    bool isPalindrome(string s) {\n        int n = s.size();\n        if (n == 0) return true;\n        int index = 0;\n        for (int i = 0; i < n; ++i) {\n            if (s[i] >= 'A' && s[i] <= 'Z') {\n                s[index++] = s[i] - 'A' + 'a';\n            }\n            else if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= '0' && s[i] <= '9')) {\n                s[index++] = s[i];\n            }\n            else continue;\n        }\n        string a = s.substr(0, index);\n        return a == string(a.rbegin(), a.rend());\n    }\n};\n```\n\n## 二叉树中的最大路径和\n\n> 描述\n> 二叉树里面的路径被定义为:从该树的任意节点出发，经过父=>子或者子=>父的连接，达到任意节点的序列\n> 注意:\n> 1.同一个节点在一条二叉树路径里中最多出现一次\n> 2.一条路径至少包含一个节点，且不一定经过根节点\n\n> 给定一个二叉树的根节点root，请你计算它的最大路径和\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @return int整型\n     */\n    int dfs(TreeNode *root, int &ans) {\n        if (!root) return 0;\n        int left_sum = max(dfs(root->left, ans), 0);\n        int right_sum = max(dfs(root->right, ans), 0);\n        ans = max(ans, left_sum + right_sum + root->val);\n        return max(left_sum, right_sum) + root->val;\n    }\n    int maxPathSum(TreeNode* root) {\n        if (!root) return 0;\n        int ans = INT_MIN;\n        dfs(root, ans);\n        return ans;\n    }\n};\n```\n\n## 买卖股票的最好时机 iii\n\n描述\n> 假设你有一个数组，其中第i个元素是某只股票在第i天的价格\n> 设计一个算法来求最大的利润。你最多可以进行两次交易\n> 注意:\n> 你不能同时进行多个交易(即，你必须在再次购买之前出售之前买的股票)\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param prices int整型vector \n     * @return int整型\n     */\n    int maxProfit(vector<int>& prices) {\n        int n = prices.size();\n        if (n == 0) return 0;\n        vector<vector<int> > dp(n, vector<int>(5, 0));\n        dp[0][1] = -prices[0];\n        dp[0][2] = 0;\n        dp[0][3] = -prices[0];\n        dp[0][4] = 0;\n        for (int i = 1; i < n; ++i) {\n            dp[i][0] = 0;\n            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]);\n            dp[i][2] = max(dp[i-1][2], dp[i-1][1] + prices[i]);\n            dp[i][3] = max(dp[i-1][3], dp[i-1][2] - prices[i]);\n            dp[i][4] = max(dp[i-1][4], dp[i-1][3] + prices[i]);\n        }\n        return dp[n-1][4];\n    }\n};\n```\n\n## 买卖股票的最好时机 ii\n\n描述\n> 假设你有一个数组，其中第i个元素表示某只股票在第i天的价格。\n> 设计一个算法来寻找最大的利润。你可以完成任意数量的交易(例如，多次购买和出售股票的一股)。但是，你不能同时进行多个交易(即，你必须在再次购买之前卖出之前买的股票)\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param prices int整型vector \n     * @return int整型\n     */\n    int maxProfit(vector<int>& prices) {\n        int n = prices.size();\n        if (n == 0 || n == 1) return 0;\n        int max_profit = 0;\n        for (int i = 1; i < n; ++i) {\n            if (prices[i] > prices[i-1]) max_profit += prices[i] - prices[i-1];\n        }\n        return max_profit;\n    }\n};\n```\n\n## 买卖股票的最好时机\n\n描述\n> 假设你有一个数组prices，长度为n，其中prices[i]是股票在第i天的价格，请根据这个价格数组，返回买卖股票能获得的最大收益\n> 1.你可以买入一次股票和卖出一次股票，并非每天都可以买入或卖出一次，总共只能买入和卖出一次，且买入必须在卖出的前面的某一天\n> 2.如果不能获取到任何利润，请返回0\n> 3.假设买入卖出均无手续费\n```\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param prices int整型vector \n     * @return int整型\n     */\n    int maxProfit(vector<int>& prices) {\n        int n = prices.size();\n        if (n == 0) return 0;\n        int min_value = prices[0];\n        int max_profit = 0;\n        for (int i = 1; i < n; ++i) {\n            max_profit = max(max_profit, prices[i] - min_value);\n            min_value = min(min_value, prices[i]);\n        }\n        return max_profit;\n    }\n};\n```\n\n## 三角形\n\n描述\n> 给出一个三角形，计算从三角形顶部到底部的最小路径和，每一步都可以移动到下面一行相邻的数字\n```\nclass Solution {\npublic:\n    int minimumTotal(vector<vector<int> > &triangle) {\n        int n = triangle.size();\n        if (n == 0) return 0;\n        vector<vector<int> > dp(n, vector<int>(n, 0));\n        dp[0][0] = triangle[0][0];\n        for (int j = 1; j < n; ++j) {\n            dp[j][0] = dp[j-1][0] + triangle[j][0];\n            dp[j][j] = dp[j-1][j-1] + triangle[j][j];\n        }\n        for (int i = 1; i < n; ++i) {\n            for (int j = 1; j < i; ++j) {\n                dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j];\n            }\n        }\n        return *min_element(dp[n-1].begin(), dp[n-1].end());\n    }\n};\n```\n```\nclass Solution {\npublic:\n    int minimumTotal(vector<vector<int> > &triangle) {\n        int n = triangle.size();\n        if (n == 0) return 0;\n        for (int i = n - 2; i >= 0; --i) {\n            for (int j = 0; j <= i; ++j) {\n                triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1]);\n            }\n        }\n        return triangle[0][0];\n    }\n};\n```\n\n## 杨辉三角-ii\n\n描述\n> 给出一个索引k，返回杨辉三角的第k行\n> 例如，k=3，\n> 返回[1,3,3,1].\n> 备注：\n> 你能将你的算法优化到只使用O(k)的额外空间吗?\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param rowIndex int整型 \n     * @return int整型vector\n     */\n    vector<int> getRow(int rowIndex) {\n        int n = rowIndex;\n        vector<vector<int> > dp(n+1, vector<int>(n+1, 1));\n        for (int i = 2; i <= n; ++i) {\n            for (int j = 1; j < i; ++j) {\n                dp[i][j] = dp[i-1][j-1]+dp[i-1][j];\n            }\n        }\n        return dp[n];\n    }\n};\n```\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param rowIndex int整型 \n     * @return int整型vector\n     */\n    vector<int> getRow(int rowIndex) {\n        int n = rowIndex;\n        vector<int> a(n+1, 1);\n        vector<int> b(n+1, 1);\n        for (int i = 2; i <= n; ++i) {\n            for (int j = 1; j < i; ++j) a[j] = b[j] + b[j-1];\n            for (int j = 1; j < i; ++j) b[j] = a[j];\n\n        }\n        return b;\n    }\n};\n```\n\n## 杨辉三角\n\n描述\n> 给出一个值numRows，生成杨辉三角的前numRows行\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param numRows int整型 \n     * @return int整型vector<vector<>>\n     */\n    vector<vector<int> > generate(int numRows) {\n        int n = numRows;\n        vector<vector<int> > dp(n, vector<int>(n, 1));\n        for (int i = 2; i < n; ++i) {\n            for (int j = 1; j < i; ++j) {\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j];\n            }\n        }\n        vector<vector<int> > res;\n        for (int i = 0; i < n; ++i) {\n            vector<int> tmp;\n            for (int j = 0; j <= i; ++j) {\n                tmp.push_back(dp[i][j]);\n            }\n            res.push_back(tmp);\n        }\n        return res;\n    }\n};\n```\n\n## 填充每个节点指向最右节点的next指针 ii\n描述\n> 继续思考\"填充每个节点指向最右节点的next指针\" 这道题\n> 如果给定的树可以是任意的二叉树呢?你之前的给出的算法还有效吗?\n> 注意：\n> 你只能使用常量的额外内存空间\n```\n/**\n * Definition for binary tree with next pointer.\n * struct TreeLinkNode {\n *  int val;\n *  TreeLinkNode *left, *right, *next;\n *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        if (root == nullptr) return;\n        queue<TreeLinkNode *> q1;\n        queue<TreeLinkNode *> q2;\n        q1.push(root);\n        TreeLinkNode *nxt, *cur;\n        while (!q1.empty() || !q2.empty()) {\n            while (!q1.empty()) {\n                cur = q1.front();\n                q1.pop();\n                if (!q1.empty()) nxt = q1.front();\n                else nxt = nullptr;\n                cur->next = nxt;\n                if (cur->left) q2.push(cur->left);\n                if (cur->right) q2.push(cur->right);\n            }\n            while (!q2.empty()) {\n                cur = q2.front();\n                q2.pop();\n                if (!q2.empty()) nxt = q2.front();\n                else nxt = nullptr;\n                cur->next = nxt;\n                if (cur->left) q1.push(cur->left);\n                if (cur->right) q1.push(cur->right);\n            }\n        }        \n    }\n};\n```\n```\n/**\n * Definition for binary tree with next pointer.\n * struct TreeLinkNode {\n *  int val;\n *  TreeLinkNode *left, *right, *next;\n *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        if (root == nullptr) return;\n        queue<TreeLinkNode *> q;\n        q.push(root);\n        TreeLinkNode *cur;\n        while (!q.empty()) {\n            int n = q.size();\n            while (n--) {\n                cur = q.front();\n                q.pop();\n                if (n == 0) cur->next = nullptr;\n                else cur->next = q.front();\n                if (cur->left) q.push(cur->left);\n                if (cur->right) q.push(cur->right);\n            }\n        }        \n    }\n};\n```\n\n## 填充每个节点指向最右节点的next指针\n\n描述\n> 给定一个二叉树\n> 填充所有节点的next指针，指向最接近它的同一层右边节点。如果没有同一层没有右边的节点，则应该将next指针设置为NULL\n> 初始时，所有的next指针都为NULL\n> 注意：\n> 你只能使用常量级的额外内存空间\n> 可以假设给出的二叉树是一个完美的二叉树(即，所有叶子节点都位于同一层，而且每个父节点都有两个孩子节点)\n```\n/**\n * Definition for binary tree with next pointer.\n * struct TreeLinkNode {\n *  int val;\n *  TreeLinkNode *left, *right, *next;\n *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        if (!root) return;\n        TreeLinkNode *level = root;\n        TreeLinkNode *cur;\n        while (level) {\n            cur = level;\n            while (cur) {\n                if (cur->left) cur->left->next = cur->right;\n                if (cur->next && cur->right) cur->right->next = cur->next->left;\n                cur = cur->next;\n            }\n            level = level->left;\n        }\n    }\n};\n```\n\n## 不同的子序列\n\n描述\n> 给定两个字符串S和T，返回S子序列等于T的不同子序列个数有多少个？\n> 字符串的子序列是由原来的字符串删除一些字符（也可以不删除）在不改变相对位置的情况下的剩余字符（例如，\"ACE\"is a subsequence of\"ABCDE\"但是\"AEC\"不是）\n> 例如：\n> S=\"nowcccoder\", T = \"nowccoder\"\n> 返回3\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param S string字符串 \n     * @param T string字符串 \n     * @return int整型\n     */\n    int numDistinct(string S, string T) {\n        int n = S.size();\n        int m = T.size();\n        vector<vector<int> > dp(n+1, vector<int>(m+1, 0));\n        for (int i = 0; i <= n; ++i) dp[i][0] = 1;\n        for (int j = 1; j <= m; ++j) dp[0][j] = 0;\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 1; j <= m; ++j) {\n                if (S[i-1] != T[j-1]) dp[i][j] = dp[i-1][j];\n                else dp[i][j] = dp[i-1][j-1] + dp[i-1][j];\n            }\n        }\n        return dp[n][m];\n    }\n};\n```\n\n## 二叉树中和为某一值的路径(二)\n\n描述\n> 输入一颗二叉树的根节点root和一个整数expectNumber，找出二叉树中结点值的和为expectNumber的所有路径\n> 1.该题路径定义为从树的根结点开始往下一直到叶子结点所经过的结点\n> 2.叶子节点是指没有子节点的节点\n> 3.路径只能从父节点到子节点，不能从子节点到父节点\n> 4.总节点数目为n\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @param target int整型 \n     * @return int整型vector<vector<>>\n     */\n    void dfs(TreeNode *root, vector<vector<int> > &res, vector<int> &path, int &sum, int target) {\n        if (!root) return;\n        sum += root->val;\n        path.push_back(root->val);\n        if (!root->left && !root->right && sum == target) res.push_back(path);\n        dfs(root->left, res, path, sum, target);\n        dfs(root->right, res, path, sum, target);\n\n        path.pop_back();\n        sum -= root->val;\n    }\n    vector<vector<int> > FindPath(TreeNode* root, int target) {\n        vector<vector<int> > res;\n        vector<int> path;\n        int sum = 0;\n        dfs(root, res, path, sum, target);\n        return res;\n    }\n};\n```\n\n## 二叉树中和为某一值的路径(一)\n\n描述\n> 给定一个二叉树root和一个值 sum ，判断是否有从根节点到叶子节点的节点值之和等于 sum 的路径\n> 1.该题路径定义为从树的根结点开始往下一直到叶子结点所经过的结点\n> 2.叶子节点是指没有子节点的节点\n> 3.路径只能从父节点到子节点，不能从子节点到父节点\n> 4.总节点数目为n\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @param sum int整型 \n     * @return bool布尔型\n     */\n    bool hasPathSum(TreeNode* root, int sum) {\n        if (root && !root->left && !root->right && root->val == sum) return true;\n        if (!root) return false;\n        return hasPathSum(root->left, sum-root->val) || hasPathSum(root->right, sum-root->val);\n    }\n};\n```\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @param sum int整型 \n     * @return bool布尔型\n     */\n    bool dfs(TreeNode *root, int sum) {\n        if (!root) return false;\n        if (root && !root->left && !root->right && root->val == sum) return true;\n        return dfs(root->left, sum-root->val) || dfs(root->right, sum-root->val);\n    }\n    bool hasPathSum(TreeNode* root, int sum) {\n        return dfs(root, sum);\n    }\n};\n```\n\n## 判断二叉树是否为平衡二叉树\n\n描述\n> 本题要求判断给定的二叉树是否是平衡二叉树\n> 平衡二叉树的性质为: 要么是一棵空树，要么任何一个节点的左右子树高度差的绝对值不超过 1\n> 一颗树的高度指的是树的根节点到所有节点的距离中的最大值\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return bool布尔型\n     */\n    int depth(TreeNode *root) {\n        if (!root) return 0;\n        int left = depth(root->left);\n        int right = depth(root->right);\n        return max(left, right) + 1;\n    }\n    bool isBalanced(TreeNode* root) {\n        if (!root) return true;\n        int left = depth(root->left);\n        int right = depth(root->right);\n\n        return isBalanced(root->left) && isBalanced(root->right) && abs(left-right) <= 1; \n    }\n};\n```\n\n## 有序链表变成二叉搜索树\n\n描述\n> 给定一个单链表，其中的元素按升序排序，请将它转化成平衡二叉搜索树（BST）\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n/**\n * struct ListNode {\n *  int val;\n *  struct ListNode *next;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param head ListNode类 \n     * @return TreeNode类\n     */\n    TreeNode *merge(ListNode *head, ListNode *tail) {\n        if (head == tail) return nullptr;\n        ListNode *slow = head, *fast = head;\n        while (fast != tail && fast->next != tail) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        TreeNode *root = new TreeNode(slow->val);\n        root->left = merge(head, slow);\n        root->right = merge(slow->next, tail);\n        return root;\n    }\n    TreeNode* sortedListToBST(ListNode* head) {\n        return merge(head, nullptr);\n    }\n};\n```\n\n## 将升序数组转化为平衡二叉搜索树\n\n描述\n> 给定一个升序排序的数组，将其转化为平衡二叉搜索树（BST）\n> 平衡二叉搜索树指树上每个节点 node 都满足左子树中所有节点的的值都小于 node 的值，右子树中所有节点的值都大于 node 的值，并且左右子树的节点数量之差不大于1\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param nums int整型vector \n     * @return TreeNode类\n     */\n    TreeNode *merge(vector<int> &nums, int left, int right) {\n        if (left == right) return nullptr;\n        int mid = left + (right - left) / 2;\n        TreeNode *root = new TreeNode(nums[mid]);\n        root->left = merge(nums, left, mid);\n        root->right = merge(nums, mid+1, right);\n        return root;\n    }\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        int n = nums.size();\n        return merge(nums, 0, n);\n    }\n};\n```\n\n## 二叉树层序遍历 ii\n\n描述\n> 给定一个二叉树，返回该二叉树由底层到顶层的层序遍历，（从左向右，从叶子节点到根节点，一层一层的遍历）\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型vector<vector<>>\n     */\n    vector<vector<int> > levelOrderBottom(TreeNode* root) {\n        vector<vector<int> > res;\n        if (!root) return res;\n        queue<TreeNode *> q;\n        q.push(root);\n        TreeNode *cur;\n        while (!q.empty()) {\n            int n = q.size();\n            vector<int> tmp;\n            while (n--) {\n                cur = q.front();\n                tmp.push_back(cur->val);\n                q.pop();\n                if (cur->left) q.push(cur->left);\n                if (cur->right) q.push(cur->right);\n            }\n            res.push_back(tmp);\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};\n```\n\n## 从中序和后序遍历构造二叉树\n\n描述\n> 给出一棵树的中序遍历和后序遍历，请构造这颗二叉树\n> 注意：\n> 保证给出的树中不存在重复的节点\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param inorder int整型vector \n     * @param postorder int整型vector \n     * @return TreeNode类\n     */\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        int n = inorder.size();\n        if (n == 0) return nullptr;\n        if (n == 1) return new TreeNode(inorder[0]);\n\n        int index = 0;\n        for (int i = 0; i < n; ++i) {\n            if (inorder[i] == postorder[n-1]) {\n                index = i;\n                break;\n            }\n        }\n\n        vector<int> leftInorder, leftPostorder, rightInorder, rightPostorder;\n        for (int i = 0; i < index; ++i) leftInorder.push_back(inorder[i]);\n        for (int i = index + 1; i < n; ++i) rightInorder.push_back(inorder[i]);\n        for (int i = index; i < n - 1; ++i) rightPostorder.push_back(postorder[i]);\n        for (int i = 0; i < index; ++i) leftPostorder.push_back(postorder[i]);\n\n        TreeNode *root = new TreeNode(inorder[index]);\n\n        root->left =  buildTree(leftInorder, leftPostorder);\n        root->right = buildTree(rightInorder, rightPostorder);\n\n        return root;\n    }\n};\n```\n\n## 从前序和中序遍历构造二叉树\n\n描述\n> 给出一棵树的前序遍历和中序遍历，请构造这颗二叉树\n> 注意：\n> 可以假设树中不存在重复的节点\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param preorder int整型vector \n     * @param inorder int整型vector \n     * @return TreeNode类\n     */\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        int n = preorder.size();\n        if (n == 0) return nullptr;\n        if (n == 1) return new TreeNode(preorder[0]);\n\n        int index = 0;\n        for (int i = 0; i < n; ++i) {\n            if (inorder[i] == preorder[0]) {\n                index = i;\n                break;\n            }\n        }\n\n        vector<int> leftPreorder, leftInorder, rightPreorder, rightInorder;\n        TreeNode *root = new TreeNode(inorder[index]);\n\n        for (int i = 0; i < index; ++i) leftInorder.push_back(inorder[i]);\n        for (int i = index+1; i < n; ++i) rightInorder.push_back(inorder[i]);\n        for (int i = 1; i <= index; ++i) leftPreorder.push_back(preorder[i]);\n        for (int i = index+1; i < n; ++i) rightPreorder.push_back(preorder[i]);\n\n        root->left = buildTree(leftPreorder, leftInorder);\n        root->right = buildTree(rightPreorder, rightInorder);\n\n        return root;\n    }\n};\n```\n\n## 二叉树的最大深度\n\n描述\n> 求给定二叉树的最大深度\n> 深度是指树的根节点到任一叶子节点路径上节点的数量\n> 最大深度是所有叶子节点的深度的最大值\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @return int整型\n     */\n    int maxDepth(TreeNode* root) {\n        if (!root) return 0;\n        return max(maxDepth(root->left), maxDepth(root->right)) + 1;\n    }\n};\n```\n\n## 按之字形顺序打印二叉树\n\n描述\n> 给定一个二叉树，返回该二叉树的之字形层序遍历，（第一层从左向右，下一层从右向左，一直这样交替）\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param pRoot TreeNode类 \n     * @return int整型vector<vector<>>\n     */\n    vector<vector<int> > Print(TreeNode* pRoot) {\n        vector<vector<int> > res;\n        if (!pRoot) return res;\n        queue<TreeNode *> q;\n        q.push(pRoot);\n        TreeNode *cur;\n        int level = 1;\n        while (!q.empty()) {\n            vector<int> tmp;\n            int n = q.size();\n            while (n--) {\n                cur = q.front();\n                tmp.push_back(cur->val);\n                q.pop();\n                if (cur->left) q.push(cur->left);\n                if (cur->right) q.push(cur->right);\n            }\n            if (level & 1) res.push_back(tmp);\n            else {\n                reverse(tmp.begin(), tmp.end());\n                res.push_back(tmp);\n            }\n            ++level;\n        }\n        return res;\n    }\n};\n```\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param pRoot TreeNode类 \n     * @return int整型vector<vector<>>\n     */\n    vector<vector<int> > Print(TreeNode* pRoot) {\n        vector<vector<int> > res;\n        if (!pRoot) return res;\n        stack<TreeNode *> s1, s2;\n        s1.push(pRoot);\n        TreeNode *cur;\n        while (!s1.empty() || !s2.empty()) {\n            vector<int> tmp;\n            while (!s1.empty()) {\n                cur = s1.top();\n                tmp.push_back(cur->val);\n                s1.pop();\n                if (cur->left) s2.push(cur->left);\n                if (cur->right) s2.push(cur->right);\n            }\n            if (!tmp.empty()) res.push_back(tmp);\n            tmp.clear();\n            while (!s2.empty()) {\n                cur = s2.top();\n                tmp.push_back(cur->val);\n                s2.pop();\n                if (cur->right) s1.push(cur->right);\n                if (cur->left) s1.push(cur->left);\n            }\n            if (!tmp.empty()) res.push_back(tmp);\n        }\n        return res;\n    }\n};\n```\n\n## 求二叉树的层序遍历\n\n描述\n> 给定一个二叉树，返回该二叉树层序遍历的结果，（从左到右，一层一层地遍历）\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param root TreeNode类 \n     * @return int整型vector<vector<>>\n     */\n    vector<vector<int> > levelOrder(TreeNode* root) {\n        vector<vector<int> > res;\n        if (!root) return res;\n        queue<TreeNode *> q;\n        q.push(root);\n        TreeNode *cur;\n        while (!q.empty()) {\n            int n = q.size();\n            vector<int> tmp;\n            while (n--) {\n                cur = q.front();\n                tmp.push_back(cur->val);\n                q.pop();\n                if (cur->left) q.push(cur->left);\n                if (cur->right) q.push(cur->right);\n            }\n            res.push_back(tmp); \n        }\n        return res;\n    }\n};\n```\n\n## 对称的二叉树\n\n描述\n> 给定一棵二叉树，判断其是否是自身的镜像（即：是否对称）\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n * };\n */\nclass Solution {\npublic:\n    /**\n     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n     *\n     * \n     * @param pRoot TreeNode类 \n     * @return bool布尔型\n     */\n    bool same(TreeNode *r1, TreeNode *r2) {\n        return (!r1 && !r2) || (r1 && r2 && r1->val == r2->val && same(r1->left, r2->left) && same(r1->right, r2->right));\n    }\n    void mirror(TreeNode *root) {\n        if (!root || (!root->left && !root->right)) return;\n        TreeNode *left = root->left;\n        TreeNode *right = root->right;\n        mirror(left);\n        mirror(right);\n        root->left = right;\n        root->right = left;\n    }\n    bool isSymmetrical(TreeNode* pRoot) {\n        if (!pRoot) return true;\n        mirror(pRoot->right);\n        return same(pRoot->left, pRoot->right);\n    }\n};\n```\n\n## 判断二叉树是否相等\n\n描述\n> 给出两个二叉树，请写出一个判断两个二叉树是否相等的函数\n> 判断两个二叉树相等的条件是：两个二叉树的结构相同，并且相同的节点上具有相同的值\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param p TreeNode类 \n     * @param q TreeNode类 \n     * @return bool布尔型\n     */\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        return (!p && !q) || (p && q && p->val == q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right));\n    }\n};\n```\n\n## 恢复二叉搜索树\n\n描述\n> 二叉搜索树（BST）中的两个节点的值被错误地交换了\n> 请在不改变树的结构的情况下恢复这棵树\n> 备注；\n> 用O(n)的空间解决这个问题的方法太暴力了，你能设计一个常数级空间复杂度的算法么？\n```\n/**\n * Definition for binary tree\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode *root, TreeNode *&pre, TreeNode *&first, TreeNode *&second) {\n        if (!root) return;\n        inorder(root->left, pre, first, second);\n        if (pre && pre->val > root->val) {\n            if (!first) first = pre;\n            second = root;\n        }\n        pre = root;\n        inorder(root->right, pre, first, second);\n       \n    }\n    void recoverTree(TreeNode *root) {\n        TreeNode *pre = nullptr, *first = nullptr, *second = nullptr;\n        inorder(root, pre, first, second);\n        if (first && second) swap(first->val, second->val);\n    }\n};\n```\n```\n/**\n * Definition for binary tree\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\nprivate:\n    TreeNode *pre = nullptr, *first = nullptr, *second = nullptr;\npublic:\n    void inorder(TreeNode *root) {\n        if (!root) return;\n        inorder(root->left);\n        if (pre && pre->val > root->val) {\n            if (!first) first = pre;\n            second = root;\n        }\n        pre = root;\n        inorder(root->right);\n       \n    }\n    void recoverTree(TreeNode *root) {\n        inorder(root);\n        if (first && second) swap(first->val, second->val);\n    }\n};\n```\n\n## 判断二叉搜索树\n\n描述\n> 判断给出的二叉树是否是一个二叉搜索树（BST）\n> 二叉搜索树的定义如下\n> 一个节点的左子树上节点的值都小于自身的节点值\n> 一个节点的右子树上节点的值都大于自身的节点值\n> 所有节点的左右子树都必须是二叉搜索树\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\nprivate:\n    TreeNode *pre = nullptr;\n    bool flag = true;\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return bool布尔型\n     */\n    void inorder(TreeNode *root) {\n        if (!root) return;\n        inorder(root->left);\n        if (pre && pre->val >= root->val) flag = false;\n        pre = root;\n        inorder(root->right);\n    }\n    bool isValidBST(TreeNode* root) {\n        inorder(root);\n        return flag;\n    }\n};\n```\n\n## 交织的字符串\n\n描述\n> 给出三个字符串s1, s2, s3,判断s3是否可以由s1和s2交织而成\n> 例如：\n> 给定\n> s1 =\"xxyzz\",\n> s2 =\"pyyzx\",\n> 如果s3 =\"xxpyyzyzxz\", 返回true\n> 如果s3 =\"xxpyyyxzzz\", 返回false\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param s1 string字符串 \n     * @param s2 string字符串 \n     * @param s3 string字符串 \n     * @return bool布尔型\n     */\n    bool isInterleave(string s1, string s2, string s3) {\n        int n = s1.size();\n        int m = s2.size();\n        int l = s3.size();\n        if (l != n + m) return false;\n        vector<vector<bool>> dp(n+1, vector<bool>(m+1, false));\n        dp[0][0] = true;\n        for (int i = 0; i < n; ++i) {\n            if (s1[i] == s3[i]) dp[i+1][0] = true;\n        }\n        for (int j = 0; j < m; ++j) {\n            if (s2[j] == s3[j]) dp[0][j+1] = true;\n        }\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                char a = s1[i], b = s2[j], c = s3[i+j+1];\n                if (a == c && b != c) dp[i+1][j+1] = dp[i][j+1];\n                if (a != c && b == c) dp[i+1][j+1] = dp[i+1][j];\n                if (a == c && b == c) dp[i+1][j+1] = dp[i][j+1] || dp[i+1][j];\n                if (a != c && b != c) dp[i+1][j+1] = false;\n            }\n        }\n        return dp[n][m];\n    }\n};\n```\n\n## 不同的二叉搜索树 ii\n\n描述\n> 给定一个值n,请生成所有的存储值1...n.的二叉搜索树（BST）的结构\n> 例如：\n> 给定n=3，你的程序应该给出下面五种不同的二叉搜索树（BST）\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param n int整型 \n     * @return TreeNode类vector\n     */\n    vector<TreeNode *> postorder(int left, int right) {\n        if (left > right) return vector<TreeNode *>{nullptr};\n        vector<TreeNode *> res;\n        for (int i = left; i <= right; ++i) {\n            vector<TreeNode *> left_vec = postorder(left, i-1);\n            vector<TreeNode *> right_vec = postorder(i+1, right);\n            int n = left_vec.size();\n            int m = right_vec.size();\n            for (int a = 0; a < n; ++a) {\n                for (int b = 0; b < m; ++b) {\n                    TreeNode *root = new TreeNode(i);\n                    root->left = left_vec[a];\n                    root->right = right_vec[b];\n                    res.push_back(root);\n                }\n            }\n        }\n        return res;\n    }\n    vector<TreeNode*> generateTrees(int n) {\n        return postorder(1, n);\n    }\n};\n```\n\n## 不同的二叉搜索树\n\n描述\n> 给定一个值n，能构建出多少不同的值包含1...n的二叉搜索树（BST）？\n> 例如\n> 给定 n = 3, 有五种不同的二叉搜索树（BST）\n```\nclass Solution {\npublic:\n    /**\n     * \n     * @param n int整型 \n     * @return int整型\n     */\n    int postorder(int left, int right) {\n        if (left > right) return 0;\n        int res = 0;\n        for (int i = left; i <= right; ++i) {\n            int l = postorder(left, i-1);\n            int r = postorder(i+1, right);\n            if (l != 0 && r != 0) res += l * r;\n            else if (l == 0 && r == 0) res += 1;\n            else if (l == 0) res += r;\n            else res += l;\n        }\n        return res;\n    }\n    int numTrees(int n) {\n        return postorder(1, n);\n    }\n};\n```\n```\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param n int整型 \n     * @return int整型\n     */\n    int numTrees(int n) {\n        vector<int> dp(n+1, 0);\n        dp[0] = 1, dp[1] = 1;\n        for (int i = 2; i <= n; ++i) {\n            for (int j = 1; j <= i; ++j) {\n                dp[i] += dp[j-1] * dp[i-j];\n            }\n        }\n        return dp[n];\n    }\n};\n```\n\n## 二叉树的中序遍历\n\n描述\n> 给出一棵二叉树，返回这棵树的中序遍历\n> 例如：\n> 给出的二叉树为{1,#,2,3}\n```\n/**\n * struct TreeNode {\n *  int val;\n *  struct TreeNode *left;\n *  struct TreeNode *right;\n * };\n */\n\nclass Solution {\npublic:\n    /**\n     * \n     * @param root TreeNode类 \n     * @return int整型vector\n     */\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> res;\n        if (!root) return res;\n        stack<TreeNode *> s;\n        TreeNode *cur = root;\n        while (!s.empty() || cur) {\n            while (cur) {\n                s.push(cur);\n                cur = cur->left;\n            }\n            cur = s.top();\n            res.push_back(cur->val);\n            s.pop();\n            cur = cur->right;\n        }\n        return res;\n    }\n};\n```\n\n## 数字字符串转化成IP地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"牛客网LeetCode编程题","published":1,"updated":"2023-10-10T05:30:12.183Z","_id":"cln2n3ny2000zyuzqffhn3of3","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.nowcoder.com/ta/classic-code\">牛客网LeetCode编程题</a></p>\n<h2 id=\"二叉树的最小深度\"><a href=\"#二叉树的最小深度\" class=\"headerlink\" title=\"二叉树的最小深度\"></a>二叉树的最小深度</h2><p>描述</p>\n<blockquote>\n<p>求给定二叉树的最小深度。最小深度是指树的根结点到最近叶子结点的最短路径上结点的数量</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *\tint val;</span><br><span class=\"line\"> *\tstruct TreeNode *left;</span><br><span class=\"line\"> *\tstruct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int run(TreeNode* root) &#123;</span><br><span class=\"line\">        if (root == nullptr) return 0;</span><br><span class=\"line\">        int left = run(root-&gt;left);</span><br><span class=\"line\">        int right = run(root-&gt;right);</span><br><span class=\"line\">        if (left == 0) return right + 1;</span><br><span class=\"line\">        else if (right == 0) return left + 1;</span><br><span class=\"line\">        else return min(left, right) + 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int run(TreeNode* root) &#123;</span><br><span class=\"line\">        if (root == nullptr) return 0;</span><br><span class=\"line\">        queue&lt;TreeNode *&gt; q;</span><br><span class=\"line\">        root-&gt;val = 1;</span><br><span class=\"line\">        q.push(root);</span><br><span class=\"line\">        while (!q.empty()) &#123;</span><br><span class=\"line\">            TreeNode *cur = q.front();</span><br><span class=\"line\">            if (cur-&gt;left == nullptr &amp;&amp; cur-&gt;right == nullptr) return cur-&gt;val;</span><br><span class=\"line\">            if (cur-&gt;left) &#123;</span><br><span class=\"line\">               q.push(cur-&gt;left);</span><br><span class=\"line\">               cur-&gt;left-&gt;val = cur-&gt;val + 1; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (cur-&gt;right) &#123;</span><br><span class=\"line\">                q.push(cur-&gt;right);</span><br><span class=\"line\">                cur-&gt;right-&gt;val = cur-&gt;val + 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            q.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后缀表达式求值\"><a href=\"#后缀表达式求值\" class=\"headerlink\" title=\"后缀表达式求值\"></a>后缀表达式求值</h2><p>描述</p>\n<blockquote>\n<p>计算逆波兰式（后缀表达式）的值<br>运算符仅包含”+”,”-“,”*”和”&#x2F;“，被操作数是整数<br>保证表达式合法，除法时向下取整。</p>\n</blockquote>\n<blockquote>\n<p>数据范围：表达式的长度满足： n&lt;&#x3D;1000<br>进阶：空间复杂度 O(n) 时间复杂度 O(n)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param tokens string字符串vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool isOperator(string token) &#123;</span><br><span class=\"line\">        return (token == &quot;+&quot; || token == &quot;-&quot; || token == &quot;*&quot; || token == &quot;/&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int evalRPN(vector&lt;string&gt;&amp; tokens) &#123;</span><br><span class=\"line\">        int n = tokens.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        stack&lt;int&gt; s;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            if (!isOperator(tokens[i])) &#123;</span><br><span class=\"line\">                s.push(stoi(tokens[i]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                int b = s.top();</span><br><span class=\"line\">                s.pop();</span><br><span class=\"line\">                int a = s.top();</span><br><span class=\"line\">                s.pop();</span><br><span class=\"line\">                if (tokens[i] == &quot;+&quot;) s.push(a+b);</span><br><span class=\"line\">                if (tokens[i] == &quot;-&quot;) s.push(a-b);</span><br><span class=\"line\">                if (tokens[i] == &quot;*&quot;) s.push(a*b);</span><br><span class=\"line\">                if (tokens[i] == &quot;/&quot;) s.push(a/b); </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return s.top();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多少个点位于同一直线\"><a href=\"#多少个点位于同一直线\" class=\"headerlink\" title=\"多少个点位于同一直线\"></a>多少个点位于同一直线</h2><p>描述</p>\n<blockquote>\n<p>对于给定的n个位于同一二维平面上的点，求最多能有多少个点位于同一直线上</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct Point &#123;</span><br><span class=\"line\"> *\tint x;</span><br><span class=\"line\"> *\tint y;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param points Point类vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int gcd(int a, int b) &#123;</span><br><span class=\"line\">        return b == 0 ? a : gcd(b, a % b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int maxPoints(vector&lt;Point&gt;&amp; points) &#123;</span><br><span class=\"line\">        int n = points.size();</span><br><span class=\"line\">        if (n &lt;= 2) return n;</span><br><span class=\"line\">        int max_points = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            map&lt;pair&lt;int, int&gt;, int&gt; mp;</span><br><span class=\"line\">            int dup = 1;</span><br><span class=\"line\">            for (int j = i + 1; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                int x = points[j].x - points[i].x;</span><br><span class=\"line\">                int y = points[j].y - points[i].y;</span><br><span class=\"line\">                if (x == 0 &amp;&amp; y == 0) dup++;</span><br><span class=\"line\">                else &#123;</span><br><span class=\"line\">                    int g = gcd(x, y);</span><br><span class=\"line\">                    x /= g;</span><br><span class=\"line\">                    y /= g;</span><br><span class=\"line\">                    mp[&#123;x, y&#125;]++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max_points = max(max_points, dup);</span><br><span class=\"line\">            for (auto it = mp.begin(); it != mp.end(); ++it) &#123;</span><br><span class=\"line\">                max_points = max(max_points, dup + it-&gt;second);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max_points;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct Point &#123;</span><br><span class=\"line\"> *  int x;</span><br><span class=\"line\"> *  int y;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;cfloat&gt;</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param points Point类vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int maxPoints(vector&lt;Point&gt;&amp; points) &#123;</span><br><span class=\"line\">        int n = points.size();</span><br><span class=\"line\">        if (n &lt;= 2) return n;</span><br><span class=\"line\">        int max_points = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            map&lt;float, int&gt; mp;</span><br><span class=\"line\">            int dup = 1;</span><br><span class=\"line\">            for (int j = i + 1; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                int x = points[j].x - points[i].x;</span><br><span class=\"line\">                int y = points[j].y - points[i].y;</span><br><span class=\"line\">                if (x == 0 &amp;&amp; y == 0) ++dup;</span><br><span class=\"line\">                else &#123;</span><br><span class=\"line\">                    if (x == 0) mp[FLT_MAX]++;</span><br><span class=\"line\">                    else mp[(1.0 * y)/x]++; </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max_points = max(max_points, dup);</span><br><span class=\"line\">            for (auto it = mp.begin(); it != mp.end(); ++it) &#123;</span><br><span class=\"line\">                max_points = max(max_points, it-&gt;second + dup);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max_points;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表排序\"><a href=\"#链表排序\" class=\"headerlink\" title=\"链表排序\"></a>链表排序</h2><p>描述</p>\n<blockquote>\n<p>在O(n log n)的时间内使用常数级空间复杂度对链表进行排序</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct ListNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct ListNode *next;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param head ListNode类 </span><br><span class=\"line\">     * @return ListNode类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ListNode* merge(ListNode* h1, ListNode* h2) &#123;</span><br><span class=\"line\">        if (h1 == nullptr) return h2;</span><br><span class=\"line\">        if (h2 == nullptr) return h1;</span><br><span class=\"line\">        if (h1-&gt;val &lt; h2-&gt;val) &#123;</span><br><span class=\"line\">            h1-&gt;next = merge(h1-&gt;next, h2);</span><br><span class=\"line\">            return h1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            h2-&gt;next = merge(h1, h2-&gt;next);</span><br><span class=\"line\">            return h2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* middle(ListNode* h) &#123;</span><br><span class=\"line\">        if (h == nullptr) return nullptr;</span><br><span class=\"line\">        ListNode *slow = h, *fast = slow-&gt;next;</span><br><span class=\"line\">        while (slow &amp;&amp; fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class=\"line\">            slow = slow-&gt;next;</span><br><span class=\"line\">            fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return slow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* sortList(ListNode* head) &#123;</span><br><span class=\"line\">        if (head == nullptr || head-&gt;next == nullptr) return head;</span><br><span class=\"line\">        ListNode *m = middle(head);</span><br><span class=\"line\">        ListNode *h1 = head;</span><br><span class=\"line\">        ListNode *h2 = m-&gt;next;</span><br><span class=\"line\">        m-&gt;next = nullptr;</span><br><span class=\"line\">        h1 = sortList(h1);</span><br><span class=\"line\">        h2 = sortList(h2);</span><br><span class=\"line\">        return merge(h1, h2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表的插入排序\"><a href=\"#链表的插入排序\" class=\"headerlink\" title=\"链表的插入排序\"></a>链表的插入排序</h2><p>描述</p>\n<blockquote>\n<p>使用插入排序对链表进行排序</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct ListNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct ListNode *next;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param head ListNode类 </span><br><span class=\"line\">     * @return ListNode类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ListNode* insertionSortList(ListNode* head) &#123;</span><br><span class=\"line\">        if (head == nullptr || head-&gt;next == nullptr) return head;</span><br><span class=\"line\">        ListNode *dummy = new ListNode(0);</span><br><span class=\"line\">        ListNode *cur = head, *nxt;</span><br><span class=\"line\">        while (cur) &#123;</span><br><span class=\"line\">            nxt = cur-&gt;next;</span><br><span class=\"line\">            ListNode *pre = dummy;</span><br><span class=\"line\">            while (pre-&gt;next &amp;&amp; pre-&gt;next-&gt;val &lt; cur-&gt;val) pre = pre-&gt;next;</span><br><span class=\"line\">            cur-&gt;next = pre-&gt;next;</span><br><span class=\"line\">            pre-&gt;next = cur;</span><br><span class=\"line\">            cur = nxt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dummy-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的后序遍历\"><a href=\"#二叉树的后序遍历\" class=\"headerlink\" title=\"二叉树的后序遍历\"></a>二叉树的后序遍历</h2><p>描述<br>用递归的方法对给定的二叉树进行后序遍历</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型vector</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;int&gt; postorderTraversal(TreeNode* root) &#123;</span><br><span class=\"line\">        vector&lt;int&gt; res;</span><br><span class=\"line\">        if (root == nullptr) return res;</span><br><span class=\"line\">        stack&lt;TreeNode *&gt; s1, s2;</span><br><span class=\"line\">        s1.push(root);</span><br><span class=\"line\">        while (!s1.empty()) &#123;</span><br><span class=\"line\">            TreeNode *cur = s1.top();</span><br><span class=\"line\">            s1.pop();</span><br><span class=\"line\">            if (cur-&gt;left) s1.push(cur-&gt;left);</span><br><span class=\"line\">            if (cur-&gt;right) s1.push(cur-&gt;right);</span><br><span class=\"line\">            s2.push(cur);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while (!s2.empty()) &#123;</span><br><span class=\"line\">            TreeNode * cur = s2.top();</span><br><span class=\"line\">            res.push_back(cur-&gt;val);</span><br><span class=\"line\">            s2.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"求二叉树的前序遍历\"><a href=\"#求二叉树的前序遍历\" class=\"headerlink\" title=\"求二叉树的前序遍历\"></a>求二叉树的前序遍历</h2><p>描述</p>\n<blockquote>\n<p>求给定的二叉树的前序遍历</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型vector</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;int&gt; preorderTraversal(TreeNode* root) &#123;</span><br><span class=\"line\">        vector&lt;int&gt; res;</span><br><span class=\"line\">        if (root == nullptr) return res;</span><br><span class=\"line\">        stack&lt;TreeNode *&gt; s;</span><br><span class=\"line\">        TreeNode *cur = root;</span><br><span class=\"line\">        while (!s.empty() || cur) &#123;</span><br><span class=\"line\">            while (cur) &#123;</span><br><span class=\"line\">                res.push_back(cur-&gt;val);</span><br><span class=\"line\">                s.push(cur);</span><br><span class=\"line\">                cur = cur-&gt;left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = s.top();</span><br><span class=\"line\">            s.pop();</span><br><span class=\"line\">            cur = cur-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重排链表\"><a href=\"#重排链表\" class=\"headerlink\" title=\"重排链表\"></a>重排链表</h2><p>描述</p>\n<blockquote>\n<p>将给定的单链表L: L0-&gt;L1-&gt;…-&gt;Ln-1-&gt;Ln<br>重新排序为：L0-&gt;Ln-&gt;L1-&gt;Ln-1-&gt;…-&gt;<br>要求使用原地算法，不能只改变节点内部的值，需要对实际的节点进行交换</p>\n</blockquote>\n<blockquote>\n<p>数据范围：链表长度 0 &lt;&#x3D; n &lt;&#x3D; 20000 链表中每个节点的值满足 0 &lt;&#x3D; val &lt;&#x3D; 1000</p>\n</blockquote>\n<blockquote>\n<p>要求：空间复杂度 O(n) 并在链表上进行操作而不新建链表，时间复杂度 O(n)<br>进阶：空间复杂度 O(1) 时间复杂度 O(n)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * struct ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode *next;</span><br><span class=\"line\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    ListNode *reverse_list(ListNode *head) &#123;</span><br><span class=\"line\">        ListNode *pre = nullptr, *cur = head, *nxt = nullptr;</span><br><span class=\"line\">        while (cur) &#123;</span><br><span class=\"line\">            nxt = cur-&gt;next;</span><br><span class=\"line\">            cur-&gt;next = pre;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = nxt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void reorderList(ListNode *head) &#123;</span><br><span class=\"line\">        if (!head || !head-&gt;next) return;</span><br><span class=\"line\">        ListNode *slow = head, *fast = head-&gt;next;</span><br><span class=\"line\">        while (fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class=\"line\">            slow = slow-&gt;next;</span><br><span class=\"line\">            fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode *l1 = head, *l2 = slow-&gt;next;</span><br><span class=\"line\">        slow-&gt;next = nullptr;</span><br><span class=\"line\">        l2 = reverse_list(l2);</span><br><span class=\"line\">        ListNode *p = l1, *q = l2, *t;</span><br><span class=\"line\">        while (q) &#123;</span><br><span class=\"line\">            t = q-&gt;next;</span><br><span class=\"line\">            q-&gt;next = p-&gt;next;</span><br><span class=\"line\">            p-&gt;next = q;</span><br><span class=\"line\">            p = q-&gt;next;</span><br><span class=\"line\">            q = t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表中环的入口结点\"><a href=\"#链表中环的入口结点\" class=\"headerlink\" title=\"链表中环的入口结点\"></a>链表中环的入口结点</h2><p>描述</p>\n<blockquote>\n<p>给一个长度为n链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">struct ListNode &#123;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    struct ListNode *next;</span><br><span class=\"line\">    ListNode(int x) :</span><br><span class=\"line\">        val(x), next(NULL) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">*/</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    ListNode* EntryNodeOfLoop(ListNode* pHead) &#123;</span><br><span class=\"line\">        if (pHead == nullptr) return nullptr;</span><br><span class=\"line\">        ListNode *cur = pHead;</span><br><span class=\"line\">        map&lt;ListNode *, int&gt; mp;</span><br><span class=\"line\">        while (cur) &#123;</span><br><span class=\"line\">            mp[cur]++;</span><br><span class=\"line\">            if (mp[cur] == 2) return cur;</span><br><span class=\"line\">            cur = cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return nullptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断链表中是否有环\"><a href=\"#判断链表中是否有环\" class=\"headerlink\" title=\"判断链表中是否有环\"></a>判断链表中是否有环</h2><p>描述</p>\n<blockquote>\n<p>判断给定的链表中是否有环。如果有环则返回true，否则返回false</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * struct ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode *next;</span><br><span class=\"line\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    bool hasCycle(ListNode *head) &#123;</span><br><span class=\"line\">        if (head == nullptr) return false;</span><br><span class=\"line\">        map&lt;ListNode *, int&gt; mp;</span><br><span class=\"line\">        while (head) &#123;</span><br><span class=\"line\">            mp[head]++;</span><br><span class=\"line\">            if (mp[head] == 2) return true;</span><br><span class=\"line\">            head = head -&gt; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拆分词句\"><a href=\"#拆分词句\" class=\"headerlink\" title=\"拆分词句\"></a>拆分词句</h2><p>描述</p>\n<blockquote>\n<p>给定一个字符串s和一组单词dict，判断s是否可以用空格分割成一个单词序列，使得单词序列中所有的单词都是dict中的单词（序列可以包含一个或多个单词）<br>例如:<br>给定s&#x3D;“nowcode”<br>dict&#x3D;[“now”, “code”]<br>返回true，因为”nowcode”可以被分割成”now code”</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    bool wordBreak(string s, unordered_set&lt;string&gt; &amp;dict) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        if (n == 0) return true;</span><br><span class=\"line\">        vector&lt;bool&gt; dp(n+1, false);</span><br><span class=\"line\">        dp[0] = true;</span><br><span class=\"line\">        for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt; i; ++j) &#123;</span><br><span class=\"line\">                if (dp[j] &amp;&amp; dict.find(s.substr(j, i-j)) != dict.end()) dp[i] = true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[n];  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"出现一次的数字ii\"><a href=\"#出现一次的数字ii\" class=\"headerlink\" title=\"出现一次的数字ii\"></a>出现一次的数字ii</h2><p>描述</p>\n<blockquote>\n<p>现在有一个整数类型的数组，数组中只有一个元素只出现一次，其余元素都出现三次。你需要找出只出现一次的元素<br>数据范围： 数组长度满足 0 &lt;&#x3D; n &lt;&#x3D; 4000 数组中每个元素的值满足 0 &lt;&#x3D; val &lt;&#x3D; 2147483648<br>进阶: 空间复杂度 O(1) 时间复杂度 O(n)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param A int整型一维数组 </span><br><span class=\"line\">     * @param n int A数组长度</span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int singleNumber(int* A, int n) &#123;</span><br><span class=\"line\">        if (!A || n == 0) return 0;</span><br><span class=\"line\">        int res = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; 32; ++i) &#123;</span><br><span class=\"line\">            int bit = 0;</span><br><span class=\"line\">            for (int j = 0; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                bit += (A[j] &gt;&gt; i) &amp; 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res += (bit % 3) &lt;&lt; i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"出现一次的数字\"><a href=\"#出现一次的数字\" class=\"headerlink\" title=\"出现一次的数字\"></a>出现一次的数字</h2><p>描述</p>\n<blockquote>\n<p>现在有一个整数类型的数组，数组中素只有一个元素只出现一次，其余的元素都出现两次<br>数据范围：0 &lt; n &lt;&#x3D; 4000  数组中每个值满足 0 &lt;&#x3D; val &lt;&#x3D; 4000<br>进阶： 空间复杂度 O(1) 时间复杂度 O(n)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param A int整型一维数组 </span><br><span class=\"line\">     * @param n int A数组长度</span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int singleNumber(int* A, int n) &#123;</span><br><span class=\"line\">        if (n == 0) return -1;</span><br><span class=\"line\">        if (n == 1) return A[0];</span><br><span class=\"line\">        int res = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            res ^= A[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分糖果\"><a href=\"#分糖果\" class=\"headerlink\" title=\"分糖果\"></a>分糖果</h2><p>描述</p>\n<blockquote>\n<p>有N个小朋友站在一排，每个小朋友都有一个评分<br>你现在要按以下的规则给孩子们分糖果：<br>每个小朋友至少要分得一颗糖果<br>分数高的小朋友要他比旁边得分低的小朋友分得的糖果多<br>你最少要分发多少颗糖果</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param ratings int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int candy(vector&lt;int&gt;&amp; ratings) &#123;</span><br><span class=\"line\">        int n = ratings.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        if (n == 1) return 1;</span><br><span class=\"line\">        vector&lt;int&gt; dp(n, 1);</span><br><span class=\"line\">        bool flag = true;</span><br><span class=\"line\">        while (flag) &#123;</span><br><span class=\"line\">            flag = false;</span><br><span class=\"line\">            for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">                if (ratings[i] &gt; ratings[i-1] &amp;&amp; dp[i] &lt;= dp[i-1]) &#123;</span><br><span class=\"line\">                    flag = true;</span><br><span class=\"line\">                    dp[i] = dp[i-1] + 1;   </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            for (int j = n - 2; j &gt;= 0; --j) &#123;</span><br><span class=\"line\">                if (ratings[j] &gt; ratings[j+1] &amp;&amp; dp[j] &lt;= dp[j+1]) &#123;</span><br><span class=\"line\">                    flag = true;</span><br><span class=\"line\">                    dp[j] = dp[j+1] + 1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int res = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            res += dp[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加油站\"><a href=\"#加油站\" class=\"headerlink\" title=\"加油站\"></a>加油站</h2><p>描述</p>\n<blockquote>\n<p>环形路上有n个加油站，第i个加油站的汽油量是gas[i].<br>你有一辆车，车的油箱可以无限装汽油。从加油站i走到下一个加油站（i+1）花费的油量是cost[i]，你从一个加油站出发，刚开始的时候油箱里面没有汽油<br>求从哪个加油站出发可以在环形路上走一圈。返回加油站的下标，如果没有答案的话返回-1<br>注意：答案保证唯一</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param gas int整型vector </span><br><span class=\"line\">     * @param cost int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost) &#123;</span><br><span class=\"line\">        int n = gas.size();</span><br><span class=\"line\">        if (n == 0) return -1;</span><br><span class=\"line\">        for (int p = 0; p &lt; n; ++p) &#123;</span><br><span class=\"line\">            int t = 0, g = 0;</span><br><span class=\"line\">            int i = p;</span><br><span class=\"line\">            while (t &lt; n &amp;&amp; i &lt; n &amp;&amp; (g + gas[i] - cost[i]) &gt;= 0) &#123;</span><br><span class=\"line\">                 g += (gas[i] - cost[i]);</span><br><span class=\"line\">                 ++i;</span><br><span class=\"line\">                 ++t;</span><br><span class=\"line\">                 if (i == n) i = 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (t == n) return p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param gas int整型vector </span><br><span class=\"line\">     * @param cost int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost) &#123;</span><br><span class=\"line\">        int n = gas.size();</span><br><span class=\"line\">        if (n == 0) return -1;</span><br><span class=\"line\">        int sum = 0, cur = 0, idx = -1;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            sum += (gas[i] - cost[i]);</span><br><span class=\"line\">            cur += (gas[i] - cost[i]);</span><br><span class=\"line\">            if (cur &lt; 0) &#123;</span><br><span class=\"line\">                cur = 0;</span><br><span class=\"line\">                idx = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return sum &gt;= 0 ? idx + 1 : -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复制无向图\"><a href=\"#复制无向图\" class=\"headerlink\" title=\"复制无向图\"></a>复制无向图</h2><p>描述</p>\n<blockquote>\n<p>本题要求复制一个无向图，图中每个节点都包含一个标签和它的邻居列表</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for undirected graph.</span><br><span class=\"line\"> * struct UndirectedGraphNode &#123;</span><br><span class=\"line\"> *     int label;</span><br><span class=\"line\"> *     vector&lt;UndirectedGraphNode *&gt; neighbors;</span><br><span class=\"line\"> *     UndirectedGraphNode(int x) : label(x) &#123;&#125;;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void dfs(UndirectedGraphNode *node, map&lt;UndirectedGraphNode *, UndirectedGraphNode *&gt; &amp;mp) &#123;</span><br><span class=\"line\">        if (node == nullptr) return;</span><br><span class=\"line\">        if (mp[node]) return;</span><br><span class=\"line\">        mp[node] = new UndirectedGraphNode(node-&gt;label);</span><br><span class=\"line\">        for (auto it : node-&gt;neighbors) &#123;</span><br><span class=\"line\">            dfs(it, mp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) &#123;</span><br><span class=\"line\">        if (node == nullptr) return nullptr;</span><br><span class=\"line\">        map&lt;UndirectedGraphNode *, UndirectedGraphNode *&gt; mp;</span><br><span class=\"line\">        dfs(node, mp);</span><br><span class=\"line\">        for (auto it = mp.begin(); it != mp.end(); ++it) &#123;</span><br><span class=\"line\">            for (auto cur : it-&gt;first-&gt;neighbors) &#123;</span><br><span class=\"line\">                it-&gt;second-&gt;neighbors.push_back(cur);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return mp[node];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分割回文串-ii\"><a href=\"#分割回文串-ii\" class=\"headerlink\" title=\"分割回文串-ii\"></a>分割回文串-ii</h2><p>描述</p>\n<blockquote>\n<p>给出一个字符串s，分割s使得分割出的每一个子串都是回文串<br>计算将字符串s分割成回文分割结果的最小切割数<br>例如:给定字符串s&#x3D;”aab”,<br>返回1，因为回文分割结果[“aa”,”b”]是切割一次生成的</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param s string字符串 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int minCut(string s) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">        vector&lt;vector&lt;bool&gt; &gt; path(n, vector&lt;bool&gt;(n, false));</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) path[i][i] = true;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt; i; ++j) &#123;</span><br><span class=\"line\">                if (s[j] == s[i] &amp;&amp; i - j &lt; 2) path[j][i] = true;</span><br><span class=\"line\">                else if (s[j] == s[i] &amp;&amp; i - j &gt;=2 ) path[j][i] = path[j+1][i-1];</span><br><span class=\"line\">                else continue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        vector&lt;int&gt; dp(n+1, INT_MAX);</span><br><span class=\"line\">        dp[0] = -1;</span><br><span class=\"line\">        for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            for (int j = i-1; j &gt;= 0; --j) &#123;</span><br><span class=\"line\">                if (path[j][i-1]) &#123;</span><br><span class=\"line\">                    dp[i] = min(dp[i], dp[j] + 1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分割回文串\"><a href=\"#分割回文串\" class=\"headerlink\" title=\"分割回文串\"></a>分割回文串</h2><p>描述</p>\n<blockquote>\n<p>给定一个字符串s，分割s使得s的每一个子串都是回文串<br>返回所有的回文分割结果。（注意：返回结果的顺序需要和输入字符串中的字母顺序一致</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param s string字符串 </span><br><span class=\"line\">     * @return string字符串vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool is_palindrome(string s) &#123;</span><br><span class=\"line\">        // int n = s.size();</span><br><span class=\"line\">        // if (n &lt;= 1) return true;</span><br><span class=\"line\">        // for (int i = 0, j = n-1; i &lt;= j; ++i, --j) &#123;</span><br><span class=\"line\">        //     if (s[i] != s[j]) return false;</span><br><span class=\"line\">        // &#125;</span><br><span class=\"line\">        // return true;</span><br><span class=\"line\">        return (s == string(s.rbegin(), s.rend()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void dfs(vector&lt;vector&lt;string&gt; &gt; &amp;res, vector&lt;string&gt; &amp;path, string s, int index) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        if (n == index) &#123;</span><br><span class=\"line\">            res.push_back(path);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 1; i &lt;= n-index; ++i) &#123;</span><br><span class=\"line\">            if (is_palindrome(s.substr(index, i))) &#123;</span><br><span class=\"line\">                path.push_back(s.substr(index, i));</span><br><span class=\"line\">                dfs(res, path, s, index+i);</span><br><span class=\"line\">                path.pop_back();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;vector&lt;string&gt; &gt; partition(string s) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        vector&lt;vector&lt;string&gt; &gt; res;</span><br><span class=\"line\">        vector&lt;string&gt; path;</span><br><span class=\"line\">        if (n == 0) return res;</span><br><span class=\"line\">        dfs(res, path, s, 0);</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包围区域\"><a href=\"#包围区域\" class=\"headerlink\" title=\"包围区域\"></a>包围区域</h2><p>描述</p>\n<blockquote>\n<p>现在有一个仅包含‘X’和‘O’的二维板，请捕获所有的被‘X’包围的区域<br>捕获一个被包围区域的方法是将被包围区域中的所有‘O’变成‘X’</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void dfs(vector&lt;vector&lt;char&gt; &gt; &amp;board, int i, int j) &#123;</span><br><span class=\"line\">        int m = board.size();</span><br><span class=\"line\">        if (m == 0) return;</span><br><span class=\"line\">        int n = board[0].size();</span><br><span class=\"line\">        if (i &lt; 0 || j &lt; 0 || i &gt;= m || j &gt;= n) return;</span><br><span class=\"line\">        if (board[i][j] != &#x27;O&#x27;) return;</span><br><span class=\"line\">        board[i][j] = &#x27;A&#x27;;</span><br><span class=\"line\">        dfs(board, i+1, j);</span><br><span class=\"line\">        dfs(board, i-1, j);</span><br><span class=\"line\">        dfs(board, i, j-1);</span><br><span class=\"line\">        dfs(board, i, j+1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void solve(vector&lt;vector&lt;char&gt;&gt; &amp;board) &#123;</span><br><span class=\"line\">        int m = board.size();</span><br><span class=\"line\">        if (m == 0) return;</span><br><span class=\"line\">        int n = board[0].size();</span><br><span class=\"line\">        for (int i = 0; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            dfs(board, i, 0);</span><br><span class=\"line\">            dfs(board, i, n-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for  (int j = 0; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            dfs(board, 0, j);</span><br><span class=\"line\">            dfs(board, m-1, j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 0; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                if (board[i][j] == &#x27;O&#x27;) board[i][j] = &#x27;X&#x27;;</span><br><span class=\"line\">                if (board[i][j] == &#x27;A&#x27;) board[i][j] = &#x27;O&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树根节点到叶子节点的所有路径和\"><a href=\"#二叉树根节点到叶子节点的所有路径和\" class=\"headerlink\" title=\"二叉树根节点到叶子节点的所有路径和\"></a>二叉树根节点到叶子节点的所有路径和</h2><p>描述</p>\n<blockquote>\n<p>给定一个二叉树的根节点root，该树的节点值都在数字0−9 之间，每一条从根节点到叶子节点的路径都可以用一个数字表示<br>1.该题路径定义为从树的根结点开始往下一直到叶子结点所经过的结点<br>2.叶子节点是指没有子节点的节点<br>3.路径只能从父节点到子节点，不能从子节点到父节点<br>4.总节点数目为n</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void dfs(vector&lt;vector&lt;int&gt; &gt; &amp;res, vector&lt;int&gt; &amp;path, TreeNode *root) &#123;</span><br><span class=\"line\">        if (root == nullptr) return;</span><br><span class=\"line\">        path.push_back(root-&gt;val);</span><br><span class=\"line\">        dfs(res, path, root-&gt;left);</span><br><span class=\"line\">        dfs(res, path, root-&gt;right);</span><br><span class=\"line\">        if (root-&gt;left == nullptr &amp;&amp; root-&gt;right == nullptr) res.push_back(path);</span><br><span class=\"line\">        path.pop_back();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int sumNumbers(TreeNode* root) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        vector&lt;int&gt; path;</span><br><span class=\"line\">        dfs(res, path, root);</span><br><span class=\"line\">        int n = res.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        int total = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            int m = res[i].size();</span><br><span class=\"line\">            int sum = 0;</span><br><span class=\"line\">            for (int j = 0; j &lt; m; ++j) &#123;</span><br><span class=\"line\">                sum = 10 * sum + res[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            total += sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return total;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void dfs(TreeNode *root, int path, int &amp;sum) &#123;</span><br><span class=\"line\">        if (!root) return;</span><br><span class=\"line\">        path = 10 * path + root-&gt;val;</span><br><span class=\"line\">        if (root-&gt;left == nullptr &amp;&amp; root-&gt;right == nullptr) &#123;</span><br><span class=\"line\">            sum += path;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        dfs(root-&gt;left, path, sum);</span><br><span class=\"line\">        dfs(root-&gt;right, path, sum);</span><br><span class=\"line\">        </span><br><span class=\"line\">//         path = path / 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    int sumNumbers(TreeNode* root) &#123;</span><br><span class=\"line\">        int sum = 0;</span><br><span class=\"line\">        int path = 0;</span><br><span class=\"line\">        dfs(root, path, sum);</span><br><span class=\"line\">        return sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最长的连续元素序列长度\"><a href=\"#最长的连续元素序列长度\" class=\"headerlink\" title=\"最长的连续元素序列长度\"></a>最长的连续元素序列长度</h2><p>描述</p>\n<blockquote>\n<p>给定一个无序的整数类型数组，求最长的连续元素序列的长度<br>例如：<br>给出的数组为[1000, 4, 2000, 1, 3, 2],<br>最长的连续元素序列为[1, 2, 3, 4]. 返回这个序列的长度：4<br>你需要给出时间复杂度在O（n）之内的算法</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param num int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int longestConsecutive(vector&lt;int&gt;&amp; num) &#123;</span><br><span class=\"line\">        int n = num.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        map&lt;int, int&gt; mp;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) mp[num[i]]++;</span><br><span class=\"line\">        int res = 0;</span><br><span class=\"line\">        for (auto it = mp.begin(); it != mp.end(); ++it) &#123;</span><br><span class=\"line\">            if (mp[it-&gt;first] &gt; 0) &#123;</span><br><span class=\"line\">                int l = 1;</span><br><span class=\"line\">                int i = it-&gt;first + 1;</span><br><span class=\"line\">                while (mp[i] &gt;= 1) &#123;</span><br><span class=\"line\">                    ++l;</span><br><span class=\"line\">                    mp[i] = 0;</span><br><span class=\"line\">                    ++i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i = it-&gt;first - 1;</span><br><span class=\"line\">                while (mp[i] &gt;= 1) &#123;</span><br><span class=\"line\">                    ++l;</span><br><span class=\"line\">                    mp[i] = 0;</span><br><span class=\"line\">                    --i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mp[it-&gt;first] = 0;</span><br><span class=\"line\">                res = max(res, l);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"词语序列\"><a href=\"#词语序列\" class=\"headerlink\" title=\"词语序列\"></a>词语序列</h2><p>描述</p>\n<blockquote>\n<p>给定两个单词（初始单词和目标单词）和一个单词字典，请找出所有的从初始单词到目标单词的最短转换序列的长度<br>每一次转换只能改变一个单词<br>每一个中间词都必须存在单词字典当中</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int ladderLength(string start, string end, unordered_set&lt;string&gt; &amp;dict) &#123;</span><br><span class=\"line\">        queue&lt;string&gt; q;</span><br><span class=\"line\">        unordered_set&lt;string&gt; s;</span><br><span class=\"line\">        q.push(start);</span><br><span class=\"line\">        s.emplace(start);</span><br><span class=\"line\">        int res = 1;</span><br><span class=\"line\">        while (!q.empty()) &#123;</span><br><span class=\"line\">            int q_size = q.size();</span><br><span class=\"line\">            while (q_size--) &#123;</span><br><span class=\"line\">                string cur = q.front();</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">                if (cur == end) return res;</span><br><span class=\"line\">                int n = cur.size();</span><br><span class=\"line\">                for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">                    string nxt(cur);</span><br><span class=\"line\">                    for (int j = &#x27;a&#x27;; j &lt;= &#x27;z&#x27;; ++j) &#123;</span><br><span class=\"line\">                        if (nxt[i] == j) continue;</span><br><span class=\"line\">                        nxt[i] = j;</span><br><span class=\"line\">                        // if (s.find(nxt) != s.end() || dict.find(nxt) == dict.end()) continue;</span><br><span class=\"line\">                        if (s.count(nxt) || !dict.count(nxt)) continue;</span><br><span class=\"line\">                        s.emplace(nxt);</span><br><span class=\"line\">                        q.push(nxt);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ++res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断回文串\"><a href=\"#判断回文串\" class=\"headerlink\" title=\"判断回文串\"></a>判断回文串</h2><p>描述</p>\n<blockquote>\n<p>判断题目给出的字符串是不是回文，仅考虑字符串中的字母字符和数字字符，并且忽略大小写<br>例如：”nowcoder Is Best tsebsi: redoc won”是回文  “race a car”不是回文<br>注意：<br>你有没有考虑过字符串可能为空？这是面试时应该提出的一个好问题<br>针对这个问题，我们定义空字符串是回文</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param s string字符串 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool isPalindrome(string s) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        if (n == 0) return true;</span><br><span class=\"line\">        int index = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            if (s[i] &gt;= &#x27;A&#x27; &amp;&amp; s[i] &lt;= &#x27;Z&#x27;) &#123;</span><br><span class=\"line\">                s[index++] = s[i] - &#x27;A&#x27; + &#x27;a&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if ((s[i] &gt;= &#x27;a&#x27; &amp;&amp; s[i] &lt;= &#x27;z&#x27;) || (s[i] &gt;= &#x27;0&#x27; &amp;&amp; s[i] &lt;= &#x27;9&#x27;)) &#123;</span><br><span class=\"line\">                s[index++] = s[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        string a = s.substr(0, index);</span><br><span class=\"line\">        return a == string(a.rbegin(), a.rend());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树中的最大路径和\"><a href=\"#二叉树中的最大路径和\" class=\"headerlink\" title=\"二叉树中的最大路径和\"></a>二叉树中的最大路径和</h2><blockquote>\n<p>描述<br>二叉树里面的路径被定义为:从该树的任意节点出发，经过父&#x3D;&gt;子或者子&#x3D;&gt;父的连接，达到任意节点的序列<br>注意:<br>1.同一个节点在一条二叉树路径里中最多出现一次<br>2.一条路径至少包含一个节点，且不一定经过根节点</p>\n</blockquote>\n<blockquote>\n<p>给定一个二叉树的根节点root，请你计算它的最大路径和</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int dfs(TreeNode *root, int &amp;ans) &#123;</span><br><span class=\"line\">        if (!root) return 0;</span><br><span class=\"line\">        int left_sum = max(dfs(root-&gt;left, ans), 0);</span><br><span class=\"line\">        int right_sum = max(dfs(root-&gt;right, ans), 0);</span><br><span class=\"line\">        ans = max(ans, left_sum + right_sum + root-&gt;val);</span><br><span class=\"line\">        return max(left_sum, right_sum) + root-&gt;val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int maxPathSum(TreeNode* root) &#123;</span><br><span class=\"line\">        if (!root) return 0;</span><br><span class=\"line\">        int ans = INT_MIN;</span><br><span class=\"line\">        dfs(root, ans);</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"买卖股票的最好时机-iii\"><a href=\"#买卖股票的最好时机-iii\" class=\"headerlink\" title=\"买卖股票的最好时机 iii\"></a>买卖股票的最好时机 iii</h2><p>描述</p>\n<blockquote>\n<p>假设你有一个数组，其中第i个元素是某只股票在第i天的价格<br>设计一个算法来求最大的利润。你最多可以进行两次交易<br>注意:<br>你不能同时进行多个交易(即，你必须在再次购买之前出售之前买的股票)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param prices int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int maxProfit(vector&lt;int&gt;&amp; prices) &#123;</span><br><span class=\"line\">        int n = prices.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; dp(n, vector&lt;int&gt;(5, 0));</span><br><span class=\"line\">        dp[0][1] = -prices[0];</span><br><span class=\"line\">        dp[0][2] = 0;</span><br><span class=\"line\">        dp[0][3] = -prices[0];</span><br><span class=\"line\">        dp[0][4] = 0;</span><br><span class=\"line\">        for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            dp[i][0] = 0;</span><br><span class=\"line\">            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]);</span><br><span class=\"line\">            dp[i][2] = max(dp[i-1][2], dp[i-1][1] + prices[i]);</span><br><span class=\"line\">            dp[i][3] = max(dp[i-1][3], dp[i-1][2] - prices[i]);</span><br><span class=\"line\">            dp[i][4] = max(dp[i-1][4], dp[i-1][3] + prices[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[n-1][4];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"买卖股票的最好时机-ii\"><a href=\"#买卖股票的最好时机-ii\" class=\"headerlink\" title=\"买卖股票的最好时机 ii\"></a>买卖股票的最好时机 ii</h2><p>描述</p>\n<blockquote>\n<p>假设你有一个数组，其中第i个元素表示某只股票在第i天的价格。<br>设计一个算法来寻找最大的利润。你可以完成任意数量的交易(例如，多次购买和出售股票的一股)。但是，你不能同时进行多个交易(即，你必须在再次购买之前卖出之前买的股票)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param prices int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int maxProfit(vector&lt;int&gt;&amp; prices) &#123;</span><br><span class=\"line\">        int n = prices.size();</span><br><span class=\"line\">        if (n == 0 || n == 1) return 0;</span><br><span class=\"line\">        int max_profit = 0;</span><br><span class=\"line\">        for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            if (prices[i] &gt; prices[i-1]) max_profit += prices[i] - prices[i-1];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max_profit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"买卖股票的最好时机\"><a href=\"#买卖股票的最好时机\" class=\"headerlink\" title=\"买卖股票的最好时机\"></a>买卖股票的最好时机</h2><p>描述</p>\n<blockquote>\n<p>假设你有一个数组prices，长度为n，其中prices[i]是股票在第i天的价格，请根据这个价格数组，返回买卖股票能获得的最大收益<br>1.你可以买入一次股票和卖出一次股票，并非每天都可以买入或卖出一次，总共只能买入和卖出一次，且买入必须在卖出的前面的某一天<br>2.如果不能获取到任何利润，请返回0<br>3.假设买入卖出均无手续费</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param prices int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int maxProfit(vector&lt;int&gt;&amp; prices) &#123;</span><br><span class=\"line\">        int n = prices.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        int min_value = prices[0];</span><br><span class=\"line\">        int max_profit = 0;</span><br><span class=\"line\">        for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            max_profit = max(max_profit, prices[i] - min_value);</span><br><span class=\"line\">            min_value = min(min_value, prices[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max_profit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三角形\"><a href=\"#三角形\" class=\"headerlink\" title=\"三角形\"></a>三角形</h2><p>描述</p>\n<blockquote>\n<p>给出一个三角形，计算从三角形顶部到底部的最小路径和，每一步都可以移动到下面一行相邻的数字</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int minimumTotal(vector&lt;vector&lt;int&gt; &gt; &amp;triangle) &#123;</span><br><span class=\"line\">        int n = triangle.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; dp(n, vector&lt;int&gt;(n, 0));</span><br><span class=\"line\">        dp[0][0] = triangle[0][0];</span><br><span class=\"line\">        for (int j = 1; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            dp[j][0] = dp[j-1][0] + triangle[j][0];</span><br><span class=\"line\">            dp[j][j] = dp[j-1][j-1] + triangle[j][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 1; j &lt; i; ++j) &#123;</span><br><span class=\"line\">                dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return *min_element(dp[n-1].begin(), dp[n-1].end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int minimumTotal(vector&lt;vector&lt;int&gt; &gt; &amp;triangle) &#123;</span><br><span class=\"line\">        int n = triangle.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        for (int i = n - 2; i &gt;= 0; --i) &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt;= i; ++j) &#123;</span><br><span class=\"line\">                triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return triangle[0][0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"杨辉三角-ii\"><a href=\"#杨辉三角-ii\" class=\"headerlink\" title=\"杨辉三角-ii\"></a>杨辉三角-ii</h2><p>描述</p>\n<blockquote>\n<p>给出一个索引k，返回杨辉三角的第k行<br>例如，k&#x3D;3，<br>返回[1,3,3,1].<br>备注：<br>你能将你的算法优化到只使用O(k)的额外空间吗?</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param rowIndex int整型 </span><br><span class=\"line\">     * @return int整型vector</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;int&gt; getRow(int rowIndex) &#123;</span><br><span class=\"line\">        int n = rowIndex;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; dp(n+1, vector&lt;int&gt;(n+1, 1));</span><br><span class=\"line\">        for (int i = 2; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 1; j &lt; i; ++j) &#123;</span><br><span class=\"line\">                dp[i][j] = dp[i-1][j-1]+dp[i-1][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param rowIndex int整型 </span><br><span class=\"line\">     * @return int整型vector</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;int&gt; getRow(int rowIndex) &#123;</span><br><span class=\"line\">        int n = rowIndex;</span><br><span class=\"line\">        vector&lt;int&gt; a(n+1, 1);</span><br><span class=\"line\">        vector&lt;int&gt; b(n+1, 1);</span><br><span class=\"line\">        for (int i = 2; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 1; j &lt; i; ++j) a[j] = b[j] + b[j-1];</span><br><span class=\"line\">            for (int j = 1; j &lt; i; ++j) b[j] = a[j];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"杨辉三角\"><a href=\"#杨辉三角\" class=\"headerlink\" title=\"杨辉三角\"></a>杨辉三角</h2><p>描述</p>\n<blockquote>\n<p>给出一个值numRows，生成杨辉三角的前numRows行</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param numRows int整型 </span><br><span class=\"line\">     * @return int整型vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;vector&lt;int&gt; &gt; generate(int numRows) &#123;</span><br><span class=\"line\">        int n = numRows;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; dp(n, vector&lt;int&gt;(n, 1));</span><br><span class=\"line\">        for (int i = 2; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 1; j &lt; i; ++j) &#123;</span><br><span class=\"line\">                dp[i][j] = dp[i-1][j-1] + dp[i-1][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            vector&lt;int&gt; tmp;</span><br><span class=\"line\">            for (int j = 0; j &lt;= i; ++j) &#123;</span><br><span class=\"line\">                tmp.push_back(dp[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.push_back(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"填充每个节点指向最右节点的next指针-ii\"><a href=\"#填充每个节点指向最右节点的next指针-ii\" class=\"headerlink\" title=\"填充每个节点指向最右节点的next指针 ii\"></a>填充每个节点指向最右节点的next指针 ii</h2><p>描述</p>\n<blockquote>\n<p>继续思考”填充每个节点指向最右节点的next指针” 这道题<br>如果给定的树可以是任意的二叉树呢?你之前的给出的算法还有效吗?<br>注意：<br>你只能使用常量的额外内存空间</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for binary tree with next pointer.</span><br><span class=\"line\"> * struct TreeLinkNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  TreeLinkNode *left, *right, *next;</span><br><span class=\"line\"> *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void connect(TreeLinkNode *root) &#123;</span><br><span class=\"line\">        if (root == nullptr) return;</span><br><span class=\"line\">        queue&lt;TreeLinkNode *&gt; q1;</span><br><span class=\"line\">        queue&lt;TreeLinkNode *&gt; q2;</span><br><span class=\"line\">        q1.push(root);</span><br><span class=\"line\">        TreeLinkNode *nxt, *cur;</span><br><span class=\"line\">        while (!q1.empty() || !q2.empty()) &#123;</span><br><span class=\"line\">            while (!q1.empty()) &#123;</span><br><span class=\"line\">                cur = q1.front();</span><br><span class=\"line\">                q1.pop();</span><br><span class=\"line\">                if (!q1.empty()) nxt = q1.front();</span><br><span class=\"line\">                else nxt = nullptr;</span><br><span class=\"line\">                cur-&gt;next = nxt;</span><br><span class=\"line\">                if (cur-&gt;left) q2.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) q2.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            while (!q2.empty()) &#123;</span><br><span class=\"line\">                cur = q2.front();</span><br><span class=\"line\">                q2.pop();</span><br><span class=\"line\">                if (!q2.empty()) nxt = q2.front();</span><br><span class=\"line\">                else nxt = nullptr;</span><br><span class=\"line\">                cur-&gt;next = nxt;</span><br><span class=\"line\">                if (cur-&gt;left) q1.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) q1.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for binary tree with next pointer.</span><br><span class=\"line\"> * struct TreeLinkNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  TreeLinkNode *left, *right, *next;</span><br><span class=\"line\"> *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void connect(TreeLinkNode *root) &#123;</span><br><span class=\"line\">        if (root == nullptr) return;</span><br><span class=\"line\">        queue&lt;TreeLinkNode *&gt; q;</span><br><span class=\"line\">        q.push(root);</span><br><span class=\"line\">        TreeLinkNode *cur;</span><br><span class=\"line\">        while (!q.empty()) &#123;</span><br><span class=\"line\">            int n = q.size();</span><br><span class=\"line\">            while (n--) &#123;</span><br><span class=\"line\">                cur = q.front();</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">                if (n == 0) cur-&gt;next = nullptr;</span><br><span class=\"line\">                else cur-&gt;next = q.front();</span><br><span class=\"line\">                if (cur-&gt;left) q.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) q.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"填充每个节点指向最右节点的next指针\"><a href=\"#填充每个节点指向最右节点的next指针\" class=\"headerlink\" title=\"填充每个节点指向最右节点的next指针\"></a>填充每个节点指向最右节点的next指针</h2><p>描述</p>\n<blockquote>\n<p>给定一个二叉树<br>填充所有节点的next指针，指向最接近它的同一层右边节点。如果没有同一层没有右边的节点，则应该将next指针设置为NULL<br>初始时，所有的next指针都为NULL<br>注意：<br>你只能使用常量级的额外内存空间<br>可以假设给出的二叉树是一个完美的二叉树(即，所有叶子节点都位于同一层，而且每个父节点都有两个孩子节点)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for binary tree with next pointer.</span><br><span class=\"line\"> * struct TreeLinkNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  TreeLinkNode *left, *right, *next;</span><br><span class=\"line\"> *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void connect(TreeLinkNode *root) &#123;</span><br><span class=\"line\">        if (!root) return;</span><br><span class=\"line\">        TreeLinkNode *level = root;</span><br><span class=\"line\">        TreeLinkNode *cur;</span><br><span class=\"line\">        while (level) &#123;</span><br><span class=\"line\">            cur = level;</span><br><span class=\"line\">            while (cur) &#123;</span><br><span class=\"line\">                if (cur-&gt;left) cur-&gt;left-&gt;next = cur-&gt;right;</span><br><span class=\"line\">                if (cur-&gt;next &amp;&amp; cur-&gt;right) cur-&gt;right-&gt;next = cur-&gt;next-&gt;left;</span><br><span class=\"line\">                cur = cur-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            level = level-&gt;left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不同的子序列\"><a href=\"#不同的子序列\" class=\"headerlink\" title=\"不同的子序列\"></a>不同的子序列</h2><p>描述</p>\n<blockquote>\n<p>给定两个字符串S和T，返回S子序列等于T的不同子序列个数有多少个？<br>字符串的子序列是由原来的字符串删除一些字符（也可以不删除）在不改变相对位置的情况下的剩余字符（例如，”ACE”is a subsequence of”ABCDE”但是”AEC”不是）<br>例如：<br>S&#x3D;”nowcccoder”, T &#x3D; “nowccoder”<br>返回3</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param S string字符串 </span><br><span class=\"line\">     * @param T string字符串 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int numDistinct(string S, string T) &#123;</span><br><span class=\"line\">        int n = S.size();</span><br><span class=\"line\">        int m = T.size();</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; dp(n+1, vector&lt;int&gt;(m+1, 0));</span><br><span class=\"line\">        for (int i = 0; i &lt;= n; ++i) dp[i][0] = 1;</span><br><span class=\"line\">        for (int j = 1; j &lt;= m; ++j) dp[0][j] = 0;</span><br><span class=\"line\">        for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 1; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">                if (S[i-1] != T[j-1]) dp[i][j] = dp[i-1][j];</span><br><span class=\"line\">                else dp[i][j] = dp[i-1][j-1] + dp[i-1][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[n][m];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树中和为某一值的路径-二\"><a href=\"#二叉树中和为某一值的路径-二\" class=\"headerlink\" title=\"二叉树中和为某一值的路径(二)\"></a>二叉树中和为某一值的路径(二)</h2><p>描述</p>\n<blockquote>\n<p>输入一颗二叉树的根节点root和一个整数expectNumber，找出二叉树中结点值的和为expectNumber的所有路径<br>1.该题路径定义为从树的根结点开始往下一直到叶子结点所经过的结点<br>2.叶子节点是指没有子节点的节点<br>3.路径只能从父节点到子节点，不能从子节点到父节点<br>4.总节点数目为n</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @param target int整型 </span><br><span class=\"line\">     * @return int整型vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void dfs(TreeNode *root, vector&lt;vector&lt;int&gt; &gt; &amp;res, vector&lt;int&gt; &amp;path, int &amp;sum, int target) &#123;</span><br><span class=\"line\">        if (!root) return;</span><br><span class=\"line\">        sum += root-&gt;val;</span><br><span class=\"line\">        path.push_back(root-&gt;val);</span><br><span class=\"line\">        if (!root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; sum == target) res.push_back(path);</span><br><span class=\"line\">        dfs(root-&gt;left, res, path, sum, target);</span><br><span class=\"line\">        dfs(root-&gt;right, res, path, sum, target);</span><br><span class=\"line\"></span><br><span class=\"line\">        path.pop_back();</span><br><span class=\"line\">        sum -= root-&gt;val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;vector&lt;int&gt; &gt; FindPath(TreeNode* root, int target) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        vector&lt;int&gt; path;</span><br><span class=\"line\">        int sum = 0;</span><br><span class=\"line\">        dfs(root, res, path, sum, target);</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树中和为某一值的路径-一\"><a href=\"#二叉树中和为某一值的路径-一\" class=\"headerlink\" title=\"二叉树中和为某一值的路径(一)\"></a>二叉树中和为某一值的路径(一)</h2><p>描述</p>\n<blockquote>\n<p>给定一个二叉树root和一个值 sum ，判断是否有从根节点到叶子节点的节点值之和等于 sum 的路径<br>1.该题路径定义为从树的根结点开始往下一直到叶子结点所经过的结点<br>2.叶子节点是指没有子节点的节点<br>3.路径只能从父节点到子节点，不能从子节点到父节点<br>4.总节点数目为n</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @param sum int整型 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool hasPathSum(TreeNode* root, int sum) &#123;</span><br><span class=\"line\">        if (root &amp;&amp; !root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; root-&gt;val == sum) return true;</span><br><span class=\"line\">        if (!root) return false;</span><br><span class=\"line\">        return hasPathSum(root-&gt;left, sum-root-&gt;val) || hasPathSum(root-&gt;right, sum-root-&gt;val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @param sum int整型 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool dfs(TreeNode *root, int sum) &#123;</span><br><span class=\"line\">        if (!root) return false;</span><br><span class=\"line\">        if (root &amp;&amp; !root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; root-&gt;val == sum) return true;</span><br><span class=\"line\">        return dfs(root-&gt;left, sum-root-&gt;val) || dfs(root-&gt;right, sum-root-&gt;val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bool hasPathSum(TreeNode* root, int sum) &#123;</span><br><span class=\"line\">        return dfs(root, sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断二叉树是否为平衡二叉树\"><a href=\"#判断二叉树是否为平衡二叉树\" class=\"headerlink\" title=\"判断二叉树是否为平衡二叉树\"></a>判断二叉树是否为平衡二叉树</h2><p>描述</p>\n<blockquote>\n<p>本题要求判断给定的二叉树是否是平衡二叉树<br>平衡二叉树的性质为: 要么是一棵空树，要么任何一个节点的左右子树高度差的绝对值不超过 1<br>一颗树的高度指的是树的根节点到所有节点的距离中的最大值</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int depth(TreeNode *root) &#123;</span><br><span class=\"line\">        if (!root) return 0;</span><br><span class=\"line\">        int left = depth(root-&gt;left);</span><br><span class=\"line\">        int right = depth(root-&gt;right);</span><br><span class=\"line\">        return max(left, right) + 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bool isBalanced(TreeNode* root) &#123;</span><br><span class=\"line\">        if (!root) return true;</span><br><span class=\"line\">        int left = depth(root-&gt;left);</span><br><span class=\"line\">        int right = depth(root-&gt;right);</span><br><span class=\"line\"></span><br><span class=\"line\">        return isBalanced(root-&gt;left) &amp;&amp; isBalanced(root-&gt;right) &amp;&amp; abs(left-right) &lt;= 1; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"有序链表变成二叉搜索树\"><a href=\"#有序链表变成二叉搜索树\" class=\"headerlink\" title=\"有序链表变成二叉搜索树\"></a>有序链表变成二叉搜索树</h2><p>描述</p>\n<blockquote>\n<p>给定一个单链表，其中的元素按升序排序，请将它转化成平衡二叉搜索树（BST）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * struct ListNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct ListNode *next;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param head ListNode类 </span><br><span class=\"line\">     * @return TreeNode类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    TreeNode *merge(ListNode *head, ListNode *tail) &#123;</span><br><span class=\"line\">        if (head == tail) return nullptr;</span><br><span class=\"line\">        ListNode *slow = head, *fast = head;</span><br><span class=\"line\">        while (fast != tail &amp;&amp; fast-&gt;next != tail) &#123;</span><br><span class=\"line\">            slow = slow-&gt;next;</span><br><span class=\"line\">            fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TreeNode *root = new TreeNode(slow-&gt;val);</span><br><span class=\"line\">        root-&gt;left = merge(head, slow);</span><br><span class=\"line\">        root-&gt;right = merge(slow-&gt;next, tail);</span><br><span class=\"line\">        return root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    TreeNode* sortedListToBST(ListNode* head) &#123;</span><br><span class=\"line\">        return merge(head, nullptr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将升序数组转化为平衡二叉搜索树\"><a href=\"#将升序数组转化为平衡二叉搜索树\" class=\"headerlink\" title=\"将升序数组转化为平衡二叉搜索树\"></a>将升序数组转化为平衡二叉搜索树</h2><p>描述</p>\n<blockquote>\n<p>给定一个升序排序的数组，将其转化为平衡二叉搜索树（BST）<br>平衡二叉搜索树指树上每个节点 node 都满足左子树中所有节点的的值都小于 node 的值，右子树中所有节点的值都大于 node 的值，并且左右子树的节点数量之差不大于1</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param nums int整型vector </span><br><span class=\"line\">     * @return TreeNode类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    TreeNode *merge(vector&lt;int&gt; &amp;nums, int left, int right) &#123;</span><br><span class=\"line\">        if (left == right) return nullptr;</span><br><span class=\"line\">        int mid = left + (right - left) / 2;</span><br><span class=\"line\">        TreeNode *root = new TreeNode(nums[mid]);</span><br><span class=\"line\">        root-&gt;left = merge(nums, left, mid);</span><br><span class=\"line\">        root-&gt;right = merge(nums, mid+1, right);</span><br><span class=\"line\">        return root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">        int n = nums.size();</span><br><span class=\"line\">        return merge(nums, 0, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树层序遍历-ii\"><a href=\"#二叉树层序遍历-ii\" class=\"headerlink\" title=\"二叉树层序遍历 ii\"></a>二叉树层序遍历 ii</h2><p>描述</p>\n<blockquote>\n<p>给定一个二叉树，返回该二叉树由底层到顶层的层序遍历，（从左向右，从叶子节点到根节点，一层一层的遍历）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;vector&lt;int&gt; &gt; levelOrderBottom(TreeNode* root) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        if (!root) return res;</span><br><span class=\"line\">        queue&lt;TreeNode *&gt; q;</span><br><span class=\"line\">        q.push(root);</span><br><span class=\"line\">        TreeNode *cur;</span><br><span class=\"line\">        while (!q.empty()) &#123;</span><br><span class=\"line\">            int n = q.size();</span><br><span class=\"line\">            vector&lt;int&gt; tmp;</span><br><span class=\"line\">            while (n--) &#123;</span><br><span class=\"line\">                cur = q.front();</span><br><span class=\"line\">                tmp.push_back(cur-&gt;val);</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">                if (cur-&gt;left) q.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) q.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.push_back(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reverse(res.begin(), res.end());</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从中序和后序遍历构造二叉树\"><a href=\"#从中序和后序遍历构造二叉树\" class=\"headerlink\" title=\"从中序和后序遍历构造二叉树\"></a>从中序和后序遍历构造二叉树</h2><p>描述</p>\n<blockquote>\n<p>给出一棵树的中序遍历和后序遍历，请构造这颗二叉树<br>注意：<br>保证给出的树中不存在重复的节点</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param inorder int整型vector </span><br><span class=\"line\">     * @param postorder int整型vector </span><br><span class=\"line\">     * @return TreeNode类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    TreeNode* buildTree(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder) &#123;</span><br><span class=\"line\">        int n = inorder.size();</span><br><span class=\"line\">        if (n == 0) return nullptr;</span><br><span class=\"line\">        if (n == 1) return new TreeNode(inorder[0]);</span><br><span class=\"line\"></span><br><span class=\"line\">        int index = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            if (inorder[i] == postorder[n-1]) &#123;</span><br><span class=\"line\">                index = i;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        vector&lt;int&gt; leftInorder, leftPostorder, rightInorder, rightPostorder;</span><br><span class=\"line\">        for (int i = 0; i &lt; index; ++i) leftInorder.push_back(inorder[i]);</span><br><span class=\"line\">        for (int i = index + 1; i &lt; n; ++i) rightInorder.push_back(inorder[i]);</span><br><span class=\"line\">        for (int i = index; i &lt; n - 1; ++i) rightPostorder.push_back(postorder[i]);</span><br><span class=\"line\">        for (int i = 0; i &lt; index; ++i) leftPostorder.push_back(postorder[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        TreeNode *root = new TreeNode(inorder[index]);</span><br><span class=\"line\"></span><br><span class=\"line\">        root-&gt;left =  buildTree(leftInorder, leftPostorder);</span><br><span class=\"line\">        root-&gt;right = buildTree(rightInorder, rightPostorder);</span><br><span class=\"line\"></span><br><span class=\"line\">        return root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从前序和中序遍历构造二叉树\"><a href=\"#从前序和中序遍历构造二叉树\" class=\"headerlink\" title=\"从前序和中序遍历构造二叉树\"></a>从前序和中序遍历构造二叉树</h2><p>描述</p>\n<blockquote>\n<p>给出一棵树的前序遍历和中序遍历，请构造这颗二叉树<br>注意：<br>可以假设树中不存在重复的节点</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param preorder int整型vector </span><br><span class=\"line\">     * @param inorder int整型vector </span><br><span class=\"line\">     * @return TreeNode类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) &#123;</span><br><span class=\"line\">        int n = preorder.size();</span><br><span class=\"line\">        if (n == 0) return nullptr;</span><br><span class=\"line\">        if (n == 1) return new TreeNode(preorder[0]);</span><br><span class=\"line\"></span><br><span class=\"line\">        int index = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            if (inorder[i] == preorder[0]) &#123;</span><br><span class=\"line\">                index = i;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        vector&lt;int&gt; leftPreorder, leftInorder, rightPreorder, rightInorder;</span><br><span class=\"line\">        TreeNode *root = new TreeNode(inorder[index]);</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i &lt; index; ++i) leftInorder.push_back(inorder[i]);</span><br><span class=\"line\">        for (int i = index+1; i &lt; n; ++i) rightInorder.push_back(inorder[i]);</span><br><span class=\"line\">        for (int i = 1; i &lt;= index; ++i) leftPreorder.push_back(preorder[i]);</span><br><span class=\"line\">        for (int i = index+1; i &lt; n; ++i) rightPreorder.push_back(preorder[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        root-&gt;left = buildTree(leftPreorder, leftInorder);</span><br><span class=\"line\">        root-&gt;right = buildTree(rightPreorder, rightInorder);</span><br><span class=\"line\"></span><br><span class=\"line\">        return root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的最大深度\"><a href=\"#二叉树的最大深度\" class=\"headerlink\" title=\"二叉树的最大深度\"></a>二叉树的最大深度</h2><p>描述</p>\n<blockquote>\n<p>求给定二叉树的最大深度<br>深度是指树的根节点到任一叶子节点路径上节点的数量<br>最大深度是所有叶子节点的深度的最大值</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int maxDepth(TreeNode* root) &#123;</span><br><span class=\"line\">        if (!root) return 0;</span><br><span class=\"line\">        return max(maxDepth(root-&gt;left), maxDepth(root-&gt;right)) + 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按之字形顺序打印二叉树\"><a href=\"#按之字形顺序打印二叉树\" class=\"headerlink\" title=\"按之字形顺序打印二叉树\"></a>按之字形顺序打印二叉树</h2><p>描述</p>\n<blockquote>\n<p>给定一个二叉树，返回该二叉树的之字形层序遍历，（第一层从左向右，下一层从右向左，一直这样交替）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param pRoot TreeNode类 </span><br><span class=\"line\">     * @return int整型vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;vector&lt;int&gt; &gt; Print(TreeNode* pRoot) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        if (!pRoot) return res;</span><br><span class=\"line\">        queue&lt;TreeNode *&gt; q;</span><br><span class=\"line\">        q.push(pRoot);</span><br><span class=\"line\">        TreeNode *cur;</span><br><span class=\"line\">        int level = 1;</span><br><span class=\"line\">        while (!q.empty()) &#123;</span><br><span class=\"line\">            vector&lt;int&gt; tmp;</span><br><span class=\"line\">            int n = q.size();</span><br><span class=\"line\">            while (n--) &#123;</span><br><span class=\"line\">                cur = q.front();</span><br><span class=\"line\">                tmp.push_back(cur-&gt;val);</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">                if (cur-&gt;left) q.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) q.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (level &amp; 1) res.push_back(tmp);</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                reverse(tmp.begin(), tmp.end());</span><br><span class=\"line\">                res.push_back(tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ++level;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param pRoot TreeNode类 </span><br><span class=\"line\">     * @return int整型vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;vector&lt;int&gt; &gt; Print(TreeNode* pRoot) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        if (!pRoot) return res;</span><br><span class=\"line\">        stack&lt;TreeNode *&gt; s1, s2;</span><br><span class=\"line\">        s1.push(pRoot);</span><br><span class=\"line\">        TreeNode *cur;</span><br><span class=\"line\">        while (!s1.empty() || !s2.empty()) &#123;</span><br><span class=\"line\">            vector&lt;int&gt; tmp;</span><br><span class=\"line\">            while (!s1.empty()) &#123;</span><br><span class=\"line\">                cur = s1.top();</span><br><span class=\"line\">                tmp.push_back(cur-&gt;val);</span><br><span class=\"line\">                s1.pop();</span><br><span class=\"line\">                if (cur-&gt;left) s2.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) s2.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (!tmp.empty()) res.push_back(tmp);</span><br><span class=\"line\">            tmp.clear();</span><br><span class=\"line\">            while (!s2.empty()) &#123;</span><br><span class=\"line\">                cur = s2.top();</span><br><span class=\"line\">                tmp.push_back(cur-&gt;val);</span><br><span class=\"line\">                s2.pop();</span><br><span class=\"line\">                if (cur-&gt;right) s1.push(cur-&gt;right);</span><br><span class=\"line\">                if (cur-&gt;left) s1.push(cur-&gt;left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (!tmp.empty()) res.push_back(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"求二叉树的层序遍历\"><a href=\"#求二叉树的层序遍历\" class=\"headerlink\" title=\"求二叉树的层序遍历\"></a>求二叉树的层序遍历</h2><p>描述</p>\n<blockquote>\n<p>给定一个二叉树，返回该二叉树层序遍历的结果，（从左到右，一层一层地遍历）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;vector&lt;int&gt; &gt; levelOrder(TreeNode* root) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        if (!root) return res;</span><br><span class=\"line\">        queue&lt;TreeNode *&gt; q;</span><br><span class=\"line\">        q.push(root);</span><br><span class=\"line\">        TreeNode *cur;</span><br><span class=\"line\">        while (!q.empty()) &#123;</span><br><span class=\"line\">            int n = q.size();</span><br><span class=\"line\">            vector&lt;int&gt; tmp;</span><br><span class=\"line\">            while (n--) &#123;</span><br><span class=\"line\">                cur = q.front();</span><br><span class=\"line\">                tmp.push_back(cur-&gt;val);</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">                if (cur-&gt;left) q.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) q.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.push_back(tmp); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对称的二叉树\"><a href=\"#对称的二叉树\" class=\"headerlink\" title=\"对称的二叉树\"></a>对称的二叉树</h2><p>描述</p>\n<blockquote>\n<p>给定一棵二叉树，判断其是否是自身的镜像（即：是否对称）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param pRoot TreeNode类 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool same(TreeNode *r1, TreeNode *r2) &#123;</span><br><span class=\"line\">        return (!r1 &amp;&amp; !r2) || (r1 &amp;&amp; r2 &amp;&amp; r1-&gt;val == r2-&gt;val &amp;&amp; same(r1-&gt;left, r2-&gt;left) &amp;&amp; same(r1-&gt;right, r2-&gt;right));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void mirror(TreeNode *root) &#123;</span><br><span class=\"line\">        if (!root || (!root-&gt;left &amp;&amp; !root-&gt;right)) return;</span><br><span class=\"line\">        TreeNode *left = root-&gt;left;</span><br><span class=\"line\">        TreeNode *right = root-&gt;right;</span><br><span class=\"line\">        mirror(left);</span><br><span class=\"line\">        mirror(right);</span><br><span class=\"line\">        root-&gt;left = right;</span><br><span class=\"line\">        root-&gt;right = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bool isSymmetrical(TreeNode* pRoot) &#123;</span><br><span class=\"line\">        if (!pRoot) return true;</span><br><span class=\"line\">        mirror(pRoot-&gt;right);</span><br><span class=\"line\">        return same(pRoot-&gt;left, pRoot-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断二叉树是否相等\"><a href=\"#判断二叉树是否相等\" class=\"headerlink\" title=\"判断二叉树是否相等\"></a>判断二叉树是否相等</h2><p>描述</p>\n<blockquote>\n<p>给出两个二叉树，请写出一个判断两个二叉树是否相等的函数<br>判断两个二叉树相等的条件是：两个二叉树的结构相同，并且相同的节点上具有相同的值</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param p TreeNode类 </span><br><span class=\"line\">     * @param q TreeNode类 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool isSameTree(TreeNode* p, TreeNode* q) &#123;</span><br><span class=\"line\">        return (!p &amp;&amp; !q) || (p &amp;&amp; q &amp;&amp; p-&gt;val == q-&gt;val &amp;&amp; isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"恢复二叉搜索树\"><a href=\"#恢复二叉搜索树\" class=\"headerlink\" title=\"恢复二叉搜索树\"></a>恢复二叉搜索树</h2><p>描述</p>\n<blockquote>\n<p>二叉搜索树（BST）中的两个节点的值被错误地交换了<br>请在不改变树的结构的情况下恢复这棵树<br>备注；<br>用O(n)的空间解决这个问题的方法太暴力了，你能设计一个常数级空间复杂度的算法么？</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for binary tree</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode *left;</span><br><span class=\"line\"> *     TreeNode *right;</span><br><span class=\"line\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void inorder(TreeNode *root, TreeNode *&amp;pre, TreeNode *&amp;first, TreeNode *&amp;second) &#123;</span><br><span class=\"line\">        if (!root) return;</span><br><span class=\"line\">        inorder(root-&gt;left, pre, first, second);</span><br><span class=\"line\">        if (pre &amp;&amp; pre-&gt;val &gt; root-&gt;val) &#123;</span><br><span class=\"line\">            if (!first) first = pre;</span><br><span class=\"line\">            second = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre = root;</span><br><span class=\"line\">        inorder(root-&gt;right, pre, first, second);</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void recoverTree(TreeNode *root) &#123;</span><br><span class=\"line\">        TreeNode *pre = nullptr, *first = nullptr, *second = nullptr;</span><br><span class=\"line\">        inorder(root, pre, first, second);</span><br><span class=\"line\">        if (first &amp;&amp; second) swap(first-&gt;val, second-&gt;val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for binary tree</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode *left;</span><br><span class=\"line\"> *     TreeNode *right;</span><br><span class=\"line\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    TreeNode *pre = nullptr, *first = nullptr, *second = nullptr;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void inorder(TreeNode *root) &#123;</span><br><span class=\"line\">        if (!root) return;</span><br><span class=\"line\">        inorder(root-&gt;left);</span><br><span class=\"line\">        if (pre &amp;&amp; pre-&gt;val &gt; root-&gt;val) &#123;</span><br><span class=\"line\">            if (!first) first = pre;</span><br><span class=\"line\">            second = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre = root;</span><br><span class=\"line\">        inorder(root-&gt;right);</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void recoverTree(TreeNode *root) &#123;</span><br><span class=\"line\">        inorder(root);</span><br><span class=\"line\">        if (first &amp;&amp; second) swap(first-&gt;val, second-&gt;val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断二叉搜索树\"><a href=\"#判断二叉搜索树\" class=\"headerlink\" title=\"判断二叉搜索树\"></a>判断二叉搜索树</h2><p>描述</p>\n<blockquote>\n<p>判断给出的二叉树是否是一个二叉搜索树（BST）<br>二叉搜索树的定义如下<br>一个节点的左子树上节点的值都小于自身的节点值<br>一个节点的右子树上节点的值都大于自身的节点值<br>所有节点的左右子树都必须是二叉搜索树</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    TreeNode *pre = nullptr;</span><br><span class=\"line\">    bool flag = true;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void inorder(TreeNode *root) &#123;</span><br><span class=\"line\">        if (!root) return;</span><br><span class=\"line\">        inorder(root-&gt;left);</span><br><span class=\"line\">        if (pre &amp;&amp; pre-&gt;val &gt;= root-&gt;val) flag = false;</span><br><span class=\"line\">        pre = root;</span><br><span class=\"line\">        inorder(root-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bool isValidBST(TreeNode* root) &#123;</span><br><span class=\"line\">        inorder(root);</span><br><span class=\"line\">        return flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"交织的字符串\"><a href=\"#交织的字符串\" class=\"headerlink\" title=\"交织的字符串\"></a>交织的字符串</h2><p>描述</p>\n<blockquote>\n<p>给出三个字符串s1, s2, s3,判断s3是否可以由s1和s2交织而成<br>例如：<br>给定<br>s1 &#x3D;”xxyzz”,<br>s2 &#x3D;”pyyzx”,<br>如果s3 &#x3D;”xxpyyzyzxz”, 返回true<br>如果s3 &#x3D;”xxpyyyxzzz”, 返回false</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param s1 string字符串 </span><br><span class=\"line\">     * @param s2 string字符串 </span><br><span class=\"line\">     * @param s3 string字符串 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool isInterleave(string s1, string s2, string s3) &#123;</span><br><span class=\"line\">        int n = s1.size();</span><br><span class=\"line\">        int m = s2.size();</span><br><span class=\"line\">        int l = s3.size();</span><br><span class=\"line\">        if (l != n + m) return false;</span><br><span class=\"line\">        vector&lt;vector&lt;bool&gt;&gt; dp(n+1, vector&lt;bool&gt;(m+1, false));</span><br><span class=\"line\">        dp[0][0] = true;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            if (s1[i] == s3[i]) dp[i+1][0] = true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int j = 0; j &lt; m; ++j) &#123;</span><br><span class=\"line\">            if (s2[j] == s3[j]) dp[0][j+1] = true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt; m; ++j) &#123;</span><br><span class=\"line\">                char a = s1[i], b = s2[j], c = s3[i+j+1];</span><br><span class=\"line\">                if (a == c &amp;&amp; b != c) dp[i+1][j+1] = dp[i][j+1];</span><br><span class=\"line\">                if (a != c &amp;&amp; b == c) dp[i+1][j+1] = dp[i+1][j];</span><br><span class=\"line\">                if (a == c &amp;&amp; b == c) dp[i+1][j+1] = dp[i][j+1] || dp[i+1][j];</span><br><span class=\"line\">                if (a != c &amp;&amp; b != c) dp[i+1][j+1] = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[n][m];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不同的二叉搜索树-ii\"><a href=\"#不同的二叉搜索树-ii\" class=\"headerlink\" title=\"不同的二叉搜索树 ii\"></a>不同的二叉搜索树 ii</h2><p>描述</p>\n<blockquote>\n<p>给定一个值n,请生成所有的存储值1…n.的二叉搜索树（BST）的结构<br>例如：<br>给定n&#x3D;3，你的程序应该给出下面五种不同的二叉搜索树（BST）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param n int整型 </span><br><span class=\"line\">     * @return TreeNode类vector</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;TreeNode *&gt; postorder(int left, int right) &#123;</span><br><span class=\"line\">        if (left &gt; right) return vector&lt;TreeNode *&gt;&#123;nullptr&#125;;</span><br><span class=\"line\">        vector&lt;TreeNode *&gt; res;</span><br><span class=\"line\">        for (int i = left; i &lt;= right; ++i) &#123;</span><br><span class=\"line\">            vector&lt;TreeNode *&gt; left_vec = postorder(left, i-1);</span><br><span class=\"line\">            vector&lt;TreeNode *&gt; right_vec = postorder(i+1, right);</span><br><span class=\"line\">            int n = left_vec.size();</span><br><span class=\"line\">            int m = right_vec.size();</span><br><span class=\"line\">            for (int a = 0; a &lt; n; ++a) &#123;</span><br><span class=\"line\">                for (int b = 0; b &lt; m; ++b) &#123;</span><br><span class=\"line\">                    TreeNode *root = new TreeNode(i);</span><br><span class=\"line\">                    root-&gt;left = left_vec[a];</span><br><span class=\"line\">                    root-&gt;right = right_vec[b];</span><br><span class=\"line\">                    res.push_back(root);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;TreeNode*&gt; generateTrees(int n) &#123;</span><br><span class=\"line\">        return postorder(1, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不同的二叉搜索树\"><a href=\"#不同的二叉搜索树\" class=\"headerlink\" title=\"不同的二叉搜索树\"></a>不同的二叉搜索树</h2><p>描述</p>\n<blockquote>\n<p>给定一个值n，能构建出多少不同的值包含1…n的二叉搜索树（BST）？<br>例如<br>给定 n &#x3D; 3, 有五种不同的二叉搜索树（BST）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param n int整型 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int postorder(int left, int right) &#123;</span><br><span class=\"line\">        if (left &gt; right) return 0;</span><br><span class=\"line\">        int res = 0;</span><br><span class=\"line\">        for (int i = left; i &lt;= right; ++i) &#123;</span><br><span class=\"line\">            int l = postorder(left, i-1);</span><br><span class=\"line\">            int r = postorder(i+1, right);</span><br><span class=\"line\">            if (l != 0 &amp;&amp; r != 0) res += l * r;</span><br><span class=\"line\">            else if (l == 0 &amp;&amp; r == 0) res += 1;</span><br><span class=\"line\">            else if (l == 0) res += r;</span><br><span class=\"line\">            else res += l;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int numTrees(int n) &#123;</span><br><span class=\"line\">        return postorder(1, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param n int整型 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int numTrees(int n) &#123;</span><br><span class=\"line\">        vector&lt;int&gt; dp(n+1, 0);</span><br><span class=\"line\">        dp[0] = 1, dp[1] = 1;</span><br><span class=\"line\">        for (int i = 2; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 1; j &lt;= i; ++j) &#123;</span><br><span class=\"line\">                dp[i] += dp[j-1] * dp[i-j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的中序遍历\"><a href=\"#二叉树的中序遍历\" class=\"headerlink\" title=\"二叉树的中序遍历\"></a>二叉树的中序遍历</h2><p>描述</p>\n<blockquote>\n<p>给出一棵二叉树，返回这棵树的中序遍历<br>例如：<br>给出的二叉树为{1,#,2,3}</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型vector</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class=\"line\">        vector&lt;int&gt; res;</span><br><span class=\"line\">        if (!root) return res;</span><br><span class=\"line\">        stack&lt;TreeNode *&gt; s;</span><br><span class=\"line\">        TreeNode *cur = root;</span><br><span class=\"line\">        while (!s.empty() || cur) &#123;</span><br><span class=\"line\">            while (cur) &#123;</span><br><span class=\"line\">                s.push(cur);</span><br><span class=\"line\">                cur = cur-&gt;left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = s.top();</span><br><span class=\"line\">            res.push_back(cur-&gt;val);</span><br><span class=\"line\">            s.pop();</span><br><span class=\"line\">            cur = cur-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字字符串转化成IP地址\"><a href=\"#数字字符串转化成IP地址\" class=\"headerlink\" title=\"数字字符串转化成IP地址\"></a>数字字符串转化成IP地址</h2>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.nowcoder.com/ta/classic-code\">牛客网LeetCode编程题</a></p>\n<h2 id=\"二叉树的最小深度\"><a href=\"#二叉树的最小深度\" class=\"headerlink\" title=\"二叉树的最小深度\"></a>二叉树的最小深度</h2><p>描述</p>\n<blockquote>\n<p>求给定二叉树的最小深度。最小深度是指树的根结点到最近叶子结点的最短路径上结点的数量</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *\tint val;</span><br><span class=\"line\"> *\tstruct TreeNode *left;</span><br><span class=\"line\"> *\tstruct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int run(TreeNode* root) &#123;</span><br><span class=\"line\">        if (root == nullptr) return 0;</span><br><span class=\"line\">        int left = run(root-&gt;left);</span><br><span class=\"line\">        int right = run(root-&gt;right);</span><br><span class=\"line\">        if (left == 0) return right + 1;</span><br><span class=\"line\">        else if (right == 0) return left + 1;</span><br><span class=\"line\">        else return min(left, right) + 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int run(TreeNode* root) &#123;</span><br><span class=\"line\">        if (root == nullptr) return 0;</span><br><span class=\"line\">        queue&lt;TreeNode *&gt; q;</span><br><span class=\"line\">        root-&gt;val = 1;</span><br><span class=\"line\">        q.push(root);</span><br><span class=\"line\">        while (!q.empty()) &#123;</span><br><span class=\"line\">            TreeNode *cur = q.front();</span><br><span class=\"line\">            if (cur-&gt;left == nullptr &amp;&amp; cur-&gt;right == nullptr) return cur-&gt;val;</span><br><span class=\"line\">            if (cur-&gt;left) &#123;</span><br><span class=\"line\">               q.push(cur-&gt;left);</span><br><span class=\"line\">               cur-&gt;left-&gt;val = cur-&gt;val + 1; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (cur-&gt;right) &#123;</span><br><span class=\"line\">                q.push(cur-&gt;right);</span><br><span class=\"line\">                cur-&gt;right-&gt;val = cur-&gt;val + 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            q.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后缀表达式求值\"><a href=\"#后缀表达式求值\" class=\"headerlink\" title=\"后缀表达式求值\"></a>后缀表达式求值</h2><p>描述</p>\n<blockquote>\n<p>计算逆波兰式（后缀表达式）的值<br>运算符仅包含”+”,”-“,”*”和”&#x2F;“，被操作数是整数<br>保证表达式合法，除法时向下取整。</p>\n</blockquote>\n<blockquote>\n<p>数据范围：表达式的长度满足： n&lt;&#x3D;1000<br>进阶：空间复杂度 O(n) 时间复杂度 O(n)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param tokens string字符串vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool isOperator(string token) &#123;</span><br><span class=\"line\">        return (token == &quot;+&quot; || token == &quot;-&quot; || token == &quot;*&quot; || token == &quot;/&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int evalRPN(vector&lt;string&gt;&amp; tokens) &#123;</span><br><span class=\"line\">        int n = tokens.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        stack&lt;int&gt; s;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            if (!isOperator(tokens[i])) &#123;</span><br><span class=\"line\">                s.push(stoi(tokens[i]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                int b = s.top();</span><br><span class=\"line\">                s.pop();</span><br><span class=\"line\">                int a = s.top();</span><br><span class=\"line\">                s.pop();</span><br><span class=\"line\">                if (tokens[i] == &quot;+&quot;) s.push(a+b);</span><br><span class=\"line\">                if (tokens[i] == &quot;-&quot;) s.push(a-b);</span><br><span class=\"line\">                if (tokens[i] == &quot;*&quot;) s.push(a*b);</span><br><span class=\"line\">                if (tokens[i] == &quot;/&quot;) s.push(a/b); </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return s.top();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多少个点位于同一直线\"><a href=\"#多少个点位于同一直线\" class=\"headerlink\" title=\"多少个点位于同一直线\"></a>多少个点位于同一直线</h2><p>描述</p>\n<blockquote>\n<p>对于给定的n个位于同一二维平面上的点，求最多能有多少个点位于同一直线上</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct Point &#123;</span><br><span class=\"line\"> *\tint x;</span><br><span class=\"line\"> *\tint y;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param points Point类vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int gcd(int a, int b) &#123;</span><br><span class=\"line\">        return b == 0 ? a : gcd(b, a % b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int maxPoints(vector&lt;Point&gt;&amp; points) &#123;</span><br><span class=\"line\">        int n = points.size();</span><br><span class=\"line\">        if (n &lt;= 2) return n;</span><br><span class=\"line\">        int max_points = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            map&lt;pair&lt;int, int&gt;, int&gt; mp;</span><br><span class=\"line\">            int dup = 1;</span><br><span class=\"line\">            for (int j = i + 1; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                int x = points[j].x - points[i].x;</span><br><span class=\"line\">                int y = points[j].y - points[i].y;</span><br><span class=\"line\">                if (x == 0 &amp;&amp; y == 0) dup++;</span><br><span class=\"line\">                else &#123;</span><br><span class=\"line\">                    int g = gcd(x, y);</span><br><span class=\"line\">                    x /= g;</span><br><span class=\"line\">                    y /= g;</span><br><span class=\"line\">                    mp[&#123;x, y&#125;]++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max_points = max(max_points, dup);</span><br><span class=\"line\">            for (auto it = mp.begin(); it != mp.end(); ++it) &#123;</span><br><span class=\"line\">                max_points = max(max_points, dup + it-&gt;second);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max_points;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct Point &#123;</span><br><span class=\"line\"> *  int x;</span><br><span class=\"line\"> *  int y;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;cfloat&gt;</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param points Point类vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int maxPoints(vector&lt;Point&gt;&amp; points) &#123;</span><br><span class=\"line\">        int n = points.size();</span><br><span class=\"line\">        if (n &lt;= 2) return n;</span><br><span class=\"line\">        int max_points = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            map&lt;float, int&gt; mp;</span><br><span class=\"line\">            int dup = 1;</span><br><span class=\"line\">            for (int j = i + 1; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                int x = points[j].x - points[i].x;</span><br><span class=\"line\">                int y = points[j].y - points[i].y;</span><br><span class=\"line\">                if (x == 0 &amp;&amp; y == 0) ++dup;</span><br><span class=\"line\">                else &#123;</span><br><span class=\"line\">                    if (x == 0) mp[FLT_MAX]++;</span><br><span class=\"line\">                    else mp[(1.0 * y)/x]++; </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            max_points = max(max_points, dup);</span><br><span class=\"line\">            for (auto it = mp.begin(); it != mp.end(); ++it) &#123;</span><br><span class=\"line\">                max_points = max(max_points, it-&gt;second + dup);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max_points;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表排序\"><a href=\"#链表排序\" class=\"headerlink\" title=\"链表排序\"></a>链表排序</h2><p>描述</p>\n<blockquote>\n<p>在O(n log n)的时间内使用常数级空间复杂度对链表进行排序</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct ListNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct ListNode *next;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param head ListNode类 </span><br><span class=\"line\">     * @return ListNode类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ListNode* merge(ListNode* h1, ListNode* h2) &#123;</span><br><span class=\"line\">        if (h1 == nullptr) return h2;</span><br><span class=\"line\">        if (h2 == nullptr) return h1;</span><br><span class=\"line\">        if (h1-&gt;val &lt; h2-&gt;val) &#123;</span><br><span class=\"line\">            h1-&gt;next = merge(h1-&gt;next, h2);</span><br><span class=\"line\">            return h1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            h2-&gt;next = merge(h1, h2-&gt;next);</span><br><span class=\"line\">            return h2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* middle(ListNode* h) &#123;</span><br><span class=\"line\">        if (h == nullptr) return nullptr;</span><br><span class=\"line\">        ListNode *slow = h, *fast = slow-&gt;next;</span><br><span class=\"line\">        while (slow &amp;&amp; fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class=\"line\">            slow = slow-&gt;next;</span><br><span class=\"line\">            fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return slow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode* sortList(ListNode* head) &#123;</span><br><span class=\"line\">        if (head == nullptr || head-&gt;next == nullptr) return head;</span><br><span class=\"line\">        ListNode *m = middle(head);</span><br><span class=\"line\">        ListNode *h1 = head;</span><br><span class=\"line\">        ListNode *h2 = m-&gt;next;</span><br><span class=\"line\">        m-&gt;next = nullptr;</span><br><span class=\"line\">        h1 = sortList(h1);</span><br><span class=\"line\">        h2 = sortList(h2);</span><br><span class=\"line\">        return merge(h1, h2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表的插入排序\"><a href=\"#链表的插入排序\" class=\"headerlink\" title=\"链表的插入排序\"></a>链表的插入排序</h2><p>描述</p>\n<blockquote>\n<p>使用插入排序对链表进行排序</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct ListNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct ListNode *next;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param head ListNode类 </span><br><span class=\"line\">     * @return ListNode类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ListNode* insertionSortList(ListNode* head) &#123;</span><br><span class=\"line\">        if (head == nullptr || head-&gt;next == nullptr) return head;</span><br><span class=\"line\">        ListNode *dummy = new ListNode(0);</span><br><span class=\"line\">        ListNode *cur = head, *nxt;</span><br><span class=\"line\">        while (cur) &#123;</span><br><span class=\"line\">            nxt = cur-&gt;next;</span><br><span class=\"line\">            ListNode *pre = dummy;</span><br><span class=\"line\">            while (pre-&gt;next &amp;&amp; pre-&gt;next-&gt;val &lt; cur-&gt;val) pre = pre-&gt;next;</span><br><span class=\"line\">            cur-&gt;next = pre-&gt;next;</span><br><span class=\"line\">            pre-&gt;next = cur;</span><br><span class=\"line\">            cur = nxt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dummy-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的后序遍历\"><a href=\"#二叉树的后序遍历\" class=\"headerlink\" title=\"二叉树的后序遍历\"></a>二叉树的后序遍历</h2><p>描述<br>用递归的方法对给定的二叉树进行后序遍历</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型vector</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;int&gt; postorderTraversal(TreeNode* root) &#123;</span><br><span class=\"line\">        vector&lt;int&gt; res;</span><br><span class=\"line\">        if (root == nullptr) return res;</span><br><span class=\"line\">        stack&lt;TreeNode *&gt; s1, s2;</span><br><span class=\"line\">        s1.push(root);</span><br><span class=\"line\">        while (!s1.empty()) &#123;</span><br><span class=\"line\">            TreeNode *cur = s1.top();</span><br><span class=\"line\">            s1.pop();</span><br><span class=\"line\">            if (cur-&gt;left) s1.push(cur-&gt;left);</span><br><span class=\"line\">            if (cur-&gt;right) s1.push(cur-&gt;right);</span><br><span class=\"line\">            s2.push(cur);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while (!s2.empty()) &#123;</span><br><span class=\"line\">            TreeNode * cur = s2.top();</span><br><span class=\"line\">            res.push_back(cur-&gt;val);</span><br><span class=\"line\">            s2.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"求二叉树的前序遍历\"><a href=\"#求二叉树的前序遍历\" class=\"headerlink\" title=\"求二叉树的前序遍历\"></a>求二叉树的前序遍历</h2><p>描述</p>\n<blockquote>\n<p>求给定的二叉树的前序遍历</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型vector</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;int&gt; preorderTraversal(TreeNode* root) &#123;</span><br><span class=\"line\">        vector&lt;int&gt; res;</span><br><span class=\"line\">        if (root == nullptr) return res;</span><br><span class=\"line\">        stack&lt;TreeNode *&gt; s;</span><br><span class=\"line\">        TreeNode *cur = root;</span><br><span class=\"line\">        while (!s.empty() || cur) &#123;</span><br><span class=\"line\">            while (cur) &#123;</span><br><span class=\"line\">                res.push_back(cur-&gt;val);</span><br><span class=\"line\">                s.push(cur);</span><br><span class=\"line\">                cur = cur-&gt;left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = s.top();</span><br><span class=\"line\">            s.pop();</span><br><span class=\"line\">            cur = cur-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重排链表\"><a href=\"#重排链表\" class=\"headerlink\" title=\"重排链表\"></a>重排链表</h2><p>描述</p>\n<blockquote>\n<p>将给定的单链表L: L0-&gt;L1-&gt;…-&gt;Ln-1-&gt;Ln<br>重新排序为：L0-&gt;Ln-&gt;L1-&gt;Ln-1-&gt;…-&gt;<br>要求使用原地算法，不能只改变节点内部的值，需要对实际的节点进行交换</p>\n</blockquote>\n<blockquote>\n<p>数据范围：链表长度 0 &lt;&#x3D; n &lt;&#x3D; 20000 链表中每个节点的值满足 0 &lt;&#x3D; val &lt;&#x3D; 1000</p>\n</blockquote>\n<blockquote>\n<p>要求：空间复杂度 O(n) 并在链表上进行操作而不新建链表，时间复杂度 O(n)<br>进阶：空间复杂度 O(1) 时间复杂度 O(n)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * struct ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode *next;</span><br><span class=\"line\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    ListNode *reverse_list(ListNode *head) &#123;</span><br><span class=\"line\">        ListNode *pre = nullptr, *cur = head, *nxt = nullptr;</span><br><span class=\"line\">        while (cur) &#123;</span><br><span class=\"line\">            nxt = cur-&gt;next;</span><br><span class=\"line\">            cur-&gt;next = pre;</span><br><span class=\"line\">            pre = cur;</span><br><span class=\"line\">            cur = nxt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return pre;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void reorderList(ListNode *head) &#123;</span><br><span class=\"line\">        if (!head || !head-&gt;next) return;</span><br><span class=\"line\">        ListNode *slow = head, *fast = head-&gt;next;</span><br><span class=\"line\">        while (fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class=\"line\">            slow = slow-&gt;next;</span><br><span class=\"line\">            fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode *l1 = head, *l2 = slow-&gt;next;</span><br><span class=\"line\">        slow-&gt;next = nullptr;</span><br><span class=\"line\">        l2 = reverse_list(l2);</span><br><span class=\"line\">        ListNode *p = l1, *q = l2, *t;</span><br><span class=\"line\">        while (q) &#123;</span><br><span class=\"line\">            t = q-&gt;next;</span><br><span class=\"line\">            q-&gt;next = p-&gt;next;</span><br><span class=\"line\">            p-&gt;next = q;</span><br><span class=\"line\">            p = q-&gt;next;</span><br><span class=\"line\">            q = t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表中环的入口结点\"><a href=\"#链表中环的入口结点\" class=\"headerlink\" title=\"链表中环的入口结点\"></a>链表中环的入口结点</h2><p>描述</p>\n<blockquote>\n<p>给一个长度为n链表，若其中包含环，请找出该链表的环的入口结点，否则，返回null</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">struct ListNode &#123;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    struct ListNode *next;</span><br><span class=\"line\">    ListNode(int x) :</span><br><span class=\"line\">        val(x), next(NULL) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">*/</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    ListNode* EntryNodeOfLoop(ListNode* pHead) &#123;</span><br><span class=\"line\">        if (pHead == nullptr) return nullptr;</span><br><span class=\"line\">        ListNode *cur = pHead;</span><br><span class=\"line\">        map&lt;ListNode *, int&gt; mp;</span><br><span class=\"line\">        while (cur) &#123;</span><br><span class=\"line\">            mp[cur]++;</span><br><span class=\"line\">            if (mp[cur] == 2) return cur;</span><br><span class=\"line\">            cur = cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return nullptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断链表中是否有环\"><a href=\"#判断链表中是否有环\" class=\"headerlink\" title=\"判断链表中是否有环\"></a>判断链表中是否有环</h2><p>描述</p>\n<blockquote>\n<p>判断给定的链表中是否有环。如果有环则返回true，否则返回false</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * struct ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode *next;</span><br><span class=\"line\"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    bool hasCycle(ListNode *head) &#123;</span><br><span class=\"line\">        if (head == nullptr) return false;</span><br><span class=\"line\">        map&lt;ListNode *, int&gt; mp;</span><br><span class=\"line\">        while (head) &#123;</span><br><span class=\"line\">            mp[head]++;</span><br><span class=\"line\">            if (mp[head] == 2) return true;</span><br><span class=\"line\">            head = head -&gt; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拆分词句\"><a href=\"#拆分词句\" class=\"headerlink\" title=\"拆分词句\"></a>拆分词句</h2><p>描述</p>\n<blockquote>\n<p>给定一个字符串s和一组单词dict，判断s是否可以用空格分割成一个单词序列，使得单词序列中所有的单词都是dict中的单词（序列可以包含一个或多个单词）<br>例如:<br>给定s&#x3D;“nowcode”<br>dict&#x3D;[“now”, “code”]<br>返回true，因为”nowcode”可以被分割成”now code”</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    bool wordBreak(string s, unordered_set&lt;string&gt; &amp;dict) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        if (n == 0) return true;</span><br><span class=\"line\">        vector&lt;bool&gt; dp(n+1, false);</span><br><span class=\"line\">        dp[0] = true;</span><br><span class=\"line\">        for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt; i; ++j) &#123;</span><br><span class=\"line\">                if (dp[j] &amp;&amp; dict.find(s.substr(j, i-j)) != dict.end()) dp[i] = true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[n];  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"出现一次的数字ii\"><a href=\"#出现一次的数字ii\" class=\"headerlink\" title=\"出现一次的数字ii\"></a>出现一次的数字ii</h2><p>描述</p>\n<blockquote>\n<p>现在有一个整数类型的数组，数组中只有一个元素只出现一次，其余元素都出现三次。你需要找出只出现一次的元素<br>数据范围： 数组长度满足 0 &lt;&#x3D; n &lt;&#x3D; 4000 数组中每个元素的值满足 0 &lt;&#x3D; val &lt;&#x3D; 2147483648<br>进阶: 空间复杂度 O(1) 时间复杂度 O(n)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param A int整型一维数组 </span><br><span class=\"line\">     * @param n int A数组长度</span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int singleNumber(int* A, int n) &#123;</span><br><span class=\"line\">        if (!A || n == 0) return 0;</span><br><span class=\"line\">        int res = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; 32; ++i) &#123;</span><br><span class=\"line\">            int bit = 0;</span><br><span class=\"line\">            for (int j = 0; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                bit += (A[j] &gt;&gt; i) &amp; 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res += (bit % 3) &lt;&lt; i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"出现一次的数字\"><a href=\"#出现一次的数字\" class=\"headerlink\" title=\"出现一次的数字\"></a>出现一次的数字</h2><p>描述</p>\n<blockquote>\n<p>现在有一个整数类型的数组，数组中素只有一个元素只出现一次，其余的元素都出现两次<br>数据范围：0 &lt; n &lt;&#x3D; 4000  数组中每个值满足 0 &lt;&#x3D; val &lt;&#x3D; 4000<br>进阶： 空间复杂度 O(1) 时间复杂度 O(n)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param A int整型一维数组 </span><br><span class=\"line\">     * @param n int A数组长度</span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int singleNumber(int* A, int n) &#123;</span><br><span class=\"line\">        if (n == 0) return -1;</span><br><span class=\"line\">        if (n == 1) return A[0];</span><br><span class=\"line\">        int res = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            res ^= A[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分糖果\"><a href=\"#分糖果\" class=\"headerlink\" title=\"分糖果\"></a>分糖果</h2><p>描述</p>\n<blockquote>\n<p>有N个小朋友站在一排，每个小朋友都有一个评分<br>你现在要按以下的规则给孩子们分糖果：<br>每个小朋友至少要分得一颗糖果<br>分数高的小朋友要他比旁边得分低的小朋友分得的糖果多<br>你最少要分发多少颗糖果</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param ratings int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int candy(vector&lt;int&gt;&amp; ratings) &#123;</span><br><span class=\"line\">        int n = ratings.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        if (n == 1) return 1;</span><br><span class=\"line\">        vector&lt;int&gt; dp(n, 1);</span><br><span class=\"line\">        bool flag = true;</span><br><span class=\"line\">        while (flag) &#123;</span><br><span class=\"line\">            flag = false;</span><br><span class=\"line\">            for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">                if (ratings[i] &gt; ratings[i-1] &amp;&amp; dp[i] &lt;= dp[i-1]) &#123;</span><br><span class=\"line\">                    flag = true;</span><br><span class=\"line\">                    dp[i] = dp[i-1] + 1;   </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            for (int j = n - 2; j &gt;= 0; --j) &#123;</span><br><span class=\"line\">                if (ratings[j] &gt; ratings[j+1] &amp;&amp; dp[j] &lt;= dp[j+1]) &#123;</span><br><span class=\"line\">                    flag = true;</span><br><span class=\"line\">                    dp[j] = dp[j+1] + 1;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int res = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            res += dp[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加油站\"><a href=\"#加油站\" class=\"headerlink\" title=\"加油站\"></a>加油站</h2><p>描述</p>\n<blockquote>\n<p>环形路上有n个加油站，第i个加油站的汽油量是gas[i].<br>你有一辆车，车的油箱可以无限装汽油。从加油站i走到下一个加油站（i+1）花费的油量是cost[i]，你从一个加油站出发，刚开始的时候油箱里面没有汽油<br>求从哪个加油站出发可以在环形路上走一圈。返回加油站的下标，如果没有答案的话返回-1<br>注意：答案保证唯一</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param gas int整型vector </span><br><span class=\"line\">     * @param cost int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost) &#123;</span><br><span class=\"line\">        int n = gas.size();</span><br><span class=\"line\">        if (n == 0) return -1;</span><br><span class=\"line\">        for (int p = 0; p &lt; n; ++p) &#123;</span><br><span class=\"line\">            int t = 0, g = 0;</span><br><span class=\"line\">            int i = p;</span><br><span class=\"line\">            while (t &lt; n &amp;&amp; i &lt; n &amp;&amp; (g + gas[i] - cost[i]) &gt;= 0) &#123;</span><br><span class=\"line\">                 g += (gas[i] - cost[i]);</span><br><span class=\"line\">                 ++i;</span><br><span class=\"line\">                 ++t;</span><br><span class=\"line\">                 if (i == n) i = 0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (t == n) return p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param gas int整型vector </span><br><span class=\"line\">     * @param cost int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost) &#123;</span><br><span class=\"line\">        int n = gas.size();</span><br><span class=\"line\">        if (n == 0) return -1;</span><br><span class=\"line\">        int sum = 0, cur = 0, idx = -1;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            sum += (gas[i] - cost[i]);</span><br><span class=\"line\">            cur += (gas[i] - cost[i]);</span><br><span class=\"line\">            if (cur &lt; 0) &#123;</span><br><span class=\"line\">                cur = 0;</span><br><span class=\"line\">                idx = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return sum &gt;= 0 ? idx + 1 : -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复制无向图\"><a href=\"#复制无向图\" class=\"headerlink\" title=\"复制无向图\"></a>复制无向图</h2><p>描述</p>\n<blockquote>\n<p>本题要求复制一个无向图，图中每个节点都包含一个标签和它的邻居列表</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for undirected graph.</span><br><span class=\"line\"> * struct UndirectedGraphNode &#123;</span><br><span class=\"line\"> *     int label;</span><br><span class=\"line\"> *     vector&lt;UndirectedGraphNode *&gt; neighbors;</span><br><span class=\"line\"> *     UndirectedGraphNode(int x) : label(x) &#123;&#125;;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void dfs(UndirectedGraphNode *node, map&lt;UndirectedGraphNode *, UndirectedGraphNode *&gt; &amp;mp) &#123;</span><br><span class=\"line\">        if (node == nullptr) return;</span><br><span class=\"line\">        if (mp[node]) return;</span><br><span class=\"line\">        mp[node] = new UndirectedGraphNode(node-&gt;label);</span><br><span class=\"line\">        for (auto it : node-&gt;neighbors) &#123;</span><br><span class=\"line\">            dfs(it, mp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) &#123;</span><br><span class=\"line\">        if (node == nullptr) return nullptr;</span><br><span class=\"line\">        map&lt;UndirectedGraphNode *, UndirectedGraphNode *&gt; mp;</span><br><span class=\"line\">        dfs(node, mp);</span><br><span class=\"line\">        for (auto it = mp.begin(); it != mp.end(); ++it) &#123;</span><br><span class=\"line\">            for (auto cur : it-&gt;first-&gt;neighbors) &#123;</span><br><span class=\"line\">                it-&gt;second-&gt;neighbors.push_back(cur);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return mp[node];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分割回文串-ii\"><a href=\"#分割回文串-ii\" class=\"headerlink\" title=\"分割回文串-ii\"></a>分割回文串-ii</h2><p>描述</p>\n<blockquote>\n<p>给出一个字符串s，分割s使得分割出的每一个子串都是回文串<br>计算将字符串s分割成回文分割结果的最小切割数<br>例如:给定字符串s&#x3D;”aab”,<br>返回1，因为回文分割结果[“aa”,”b”]是切割一次生成的</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param s string字符串 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int minCut(string s) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">        vector&lt;vector&lt;bool&gt; &gt; path(n, vector&lt;bool&gt;(n, false));</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) path[i][i] = true;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt; i; ++j) &#123;</span><br><span class=\"line\">                if (s[j] == s[i] &amp;&amp; i - j &lt; 2) path[j][i] = true;</span><br><span class=\"line\">                else if (s[j] == s[i] &amp;&amp; i - j &gt;=2 ) path[j][i] = path[j+1][i-1];</span><br><span class=\"line\">                else continue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        vector&lt;int&gt; dp(n+1, INT_MAX);</span><br><span class=\"line\">        dp[0] = -1;</span><br><span class=\"line\">        for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            for (int j = i-1; j &gt;= 0; --j) &#123;</span><br><span class=\"line\">                if (path[j][i-1]) &#123;</span><br><span class=\"line\">                    dp[i] = min(dp[i], dp[j] + 1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分割回文串\"><a href=\"#分割回文串\" class=\"headerlink\" title=\"分割回文串\"></a>分割回文串</h2><p>描述</p>\n<blockquote>\n<p>给定一个字符串s，分割s使得s的每一个子串都是回文串<br>返回所有的回文分割结果。（注意：返回结果的顺序需要和输入字符串中的字母顺序一致</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param s string字符串 </span><br><span class=\"line\">     * @return string字符串vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool is_palindrome(string s) &#123;</span><br><span class=\"line\">        // int n = s.size();</span><br><span class=\"line\">        // if (n &lt;= 1) return true;</span><br><span class=\"line\">        // for (int i = 0, j = n-1; i &lt;= j; ++i, --j) &#123;</span><br><span class=\"line\">        //     if (s[i] != s[j]) return false;</span><br><span class=\"line\">        // &#125;</span><br><span class=\"line\">        // return true;</span><br><span class=\"line\">        return (s == string(s.rbegin(), s.rend()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void dfs(vector&lt;vector&lt;string&gt; &gt; &amp;res, vector&lt;string&gt; &amp;path, string s, int index) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        if (n == index) &#123;</span><br><span class=\"line\">            res.push_back(path);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 1; i &lt;= n-index; ++i) &#123;</span><br><span class=\"line\">            if (is_palindrome(s.substr(index, i))) &#123;</span><br><span class=\"line\">                path.push_back(s.substr(index, i));</span><br><span class=\"line\">                dfs(res, path, s, index+i);</span><br><span class=\"line\">                path.pop_back();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;vector&lt;string&gt; &gt; partition(string s) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        vector&lt;vector&lt;string&gt; &gt; res;</span><br><span class=\"line\">        vector&lt;string&gt; path;</span><br><span class=\"line\">        if (n == 0) return res;</span><br><span class=\"line\">        dfs(res, path, s, 0);</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包围区域\"><a href=\"#包围区域\" class=\"headerlink\" title=\"包围区域\"></a>包围区域</h2><p>描述</p>\n<blockquote>\n<p>现在有一个仅包含‘X’和‘O’的二维板，请捕获所有的被‘X’包围的区域<br>捕获一个被包围区域的方法是将被包围区域中的所有‘O’变成‘X’</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void dfs(vector&lt;vector&lt;char&gt; &gt; &amp;board, int i, int j) &#123;</span><br><span class=\"line\">        int m = board.size();</span><br><span class=\"line\">        if (m == 0) return;</span><br><span class=\"line\">        int n = board[0].size();</span><br><span class=\"line\">        if (i &lt; 0 || j &lt; 0 || i &gt;= m || j &gt;= n) return;</span><br><span class=\"line\">        if (board[i][j] != &#x27;O&#x27;) return;</span><br><span class=\"line\">        board[i][j] = &#x27;A&#x27;;</span><br><span class=\"line\">        dfs(board, i+1, j);</span><br><span class=\"line\">        dfs(board, i-1, j);</span><br><span class=\"line\">        dfs(board, i, j-1);</span><br><span class=\"line\">        dfs(board, i, j+1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void solve(vector&lt;vector&lt;char&gt;&gt; &amp;board) &#123;</span><br><span class=\"line\">        int m = board.size();</span><br><span class=\"line\">        if (m == 0) return;</span><br><span class=\"line\">        int n = board[0].size();</span><br><span class=\"line\">        for (int i = 0; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            dfs(board, i, 0);</span><br><span class=\"line\">            dfs(board, i, n-1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for  (int j = 0; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            dfs(board, 0, j);</span><br><span class=\"line\">            dfs(board, m-1, j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 0; i &lt; m; ++i) &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt; n; ++j) &#123;</span><br><span class=\"line\">                if (board[i][j] == &#x27;O&#x27;) board[i][j] = &#x27;X&#x27;;</span><br><span class=\"line\">                if (board[i][j] == &#x27;A&#x27;) board[i][j] = &#x27;O&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树根节点到叶子节点的所有路径和\"><a href=\"#二叉树根节点到叶子节点的所有路径和\" class=\"headerlink\" title=\"二叉树根节点到叶子节点的所有路径和\"></a>二叉树根节点到叶子节点的所有路径和</h2><p>描述</p>\n<blockquote>\n<p>给定一个二叉树的根节点root，该树的节点值都在数字0−9 之间，每一条从根节点到叶子节点的路径都可以用一个数字表示<br>1.该题路径定义为从树的根结点开始往下一直到叶子结点所经过的结点<br>2.叶子节点是指没有子节点的节点<br>3.路径只能从父节点到子节点，不能从子节点到父节点<br>4.总节点数目为n</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void dfs(vector&lt;vector&lt;int&gt; &gt; &amp;res, vector&lt;int&gt; &amp;path, TreeNode *root) &#123;</span><br><span class=\"line\">        if (root == nullptr) return;</span><br><span class=\"line\">        path.push_back(root-&gt;val);</span><br><span class=\"line\">        dfs(res, path, root-&gt;left);</span><br><span class=\"line\">        dfs(res, path, root-&gt;right);</span><br><span class=\"line\">        if (root-&gt;left == nullptr &amp;&amp; root-&gt;right == nullptr) res.push_back(path);</span><br><span class=\"line\">        path.pop_back();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int sumNumbers(TreeNode* root) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        vector&lt;int&gt; path;</span><br><span class=\"line\">        dfs(res, path, root);</span><br><span class=\"line\">        int n = res.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        int total = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            int m = res[i].size();</span><br><span class=\"line\">            int sum = 0;</span><br><span class=\"line\">            for (int j = 0; j &lt; m; ++j) &#123;</span><br><span class=\"line\">                sum = 10 * sum + res[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            total += sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return total;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void dfs(TreeNode *root, int path, int &amp;sum) &#123;</span><br><span class=\"line\">        if (!root) return;</span><br><span class=\"line\">        path = 10 * path + root-&gt;val;</span><br><span class=\"line\">        if (root-&gt;left == nullptr &amp;&amp; root-&gt;right == nullptr) &#123;</span><br><span class=\"line\">            sum += path;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        dfs(root-&gt;left, path, sum);</span><br><span class=\"line\">        dfs(root-&gt;right, path, sum);</span><br><span class=\"line\">        </span><br><span class=\"line\">//         path = path / 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    int sumNumbers(TreeNode* root) &#123;</span><br><span class=\"line\">        int sum = 0;</span><br><span class=\"line\">        int path = 0;</span><br><span class=\"line\">        dfs(root, path, sum);</span><br><span class=\"line\">        return sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最长的连续元素序列长度\"><a href=\"#最长的连续元素序列长度\" class=\"headerlink\" title=\"最长的连续元素序列长度\"></a>最长的连续元素序列长度</h2><p>描述</p>\n<blockquote>\n<p>给定一个无序的整数类型数组，求最长的连续元素序列的长度<br>例如：<br>给出的数组为[1000, 4, 2000, 1, 3, 2],<br>最长的连续元素序列为[1, 2, 3, 4]. 返回这个序列的长度：4<br>你需要给出时间复杂度在O（n）之内的算法</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param num int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int longestConsecutive(vector&lt;int&gt;&amp; num) &#123;</span><br><span class=\"line\">        int n = num.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        map&lt;int, int&gt; mp;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) mp[num[i]]++;</span><br><span class=\"line\">        int res = 0;</span><br><span class=\"line\">        for (auto it = mp.begin(); it != mp.end(); ++it) &#123;</span><br><span class=\"line\">            if (mp[it-&gt;first] &gt; 0) &#123;</span><br><span class=\"line\">                int l = 1;</span><br><span class=\"line\">                int i = it-&gt;first + 1;</span><br><span class=\"line\">                while (mp[i] &gt;= 1) &#123;</span><br><span class=\"line\">                    ++l;</span><br><span class=\"line\">                    mp[i] = 0;</span><br><span class=\"line\">                    ++i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i = it-&gt;first - 1;</span><br><span class=\"line\">                while (mp[i] &gt;= 1) &#123;</span><br><span class=\"line\">                    ++l;</span><br><span class=\"line\">                    mp[i] = 0;</span><br><span class=\"line\">                    --i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mp[it-&gt;first] = 0;</span><br><span class=\"line\">                res = max(res, l);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"词语序列\"><a href=\"#词语序列\" class=\"headerlink\" title=\"词语序列\"></a>词语序列</h2><p>描述</p>\n<blockquote>\n<p>给定两个单词（初始单词和目标单词）和一个单词字典，请找出所有的从初始单词到目标单词的最短转换序列的长度<br>每一次转换只能改变一个单词<br>每一个中间词都必须存在单词字典当中</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int ladderLength(string start, string end, unordered_set&lt;string&gt; &amp;dict) &#123;</span><br><span class=\"line\">        queue&lt;string&gt; q;</span><br><span class=\"line\">        unordered_set&lt;string&gt; s;</span><br><span class=\"line\">        q.push(start);</span><br><span class=\"line\">        s.emplace(start);</span><br><span class=\"line\">        int res = 1;</span><br><span class=\"line\">        while (!q.empty()) &#123;</span><br><span class=\"line\">            int q_size = q.size();</span><br><span class=\"line\">            while (q_size--) &#123;</span><br><span class=\"line\">                string cur = q.front();</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">                if (cur == end) return res;</span><br><span class=\"line\">                int n = cur.size();</span><br><span class=\"line\">                for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">                    string nxt(cur);</span><br><span class=\"line\">                    for (int j = &#x27;a&#x27;; j &lt;= &#x27;z&#x27;; ++j) &#123;</span><br><span class=\"line\">                        if (nxt[i] == j) continue;</span><br><span class=\"line\">                        nxt[i] = j;</span><br><span class=\"line\">                        // if (s.find(nxt) != s.end() || dict.find(nxt) == dict.end()) continue;</span><br><span class=\"line\">                        if (s.count(nxt) || !dict.count(nxt)) continue;</span><br><span class=\"line\">                        s.emplace(nxt);</span><br><span class=\"line\">                        q.push(nxt);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ++res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断回文串\"><a href=\"#判断回文串\" class=\"headerlink\" title=\"判断回文串\"></a>判断回文串</h2><p>描述</p>\n<blockquote>\n<p>判断题目给出的字符串是不是回文，仅考虑字符串中的字母字符和数字字符，并且忽略大小写<br>例如：”nowcoder Is Best tsebsi: redoc won”是回文  “race a car”不是回文<br>注意：<br>你有没有考虑过字符串可能为空？这是面试时应该提出的一个好问题<br>针对这个问题，我们定义空字符串是回文</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param s string字符串 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool isPalindrome(string s) &#123;</span><br><span class=\"line\">        int n = s.size();</span><br><span class=\"line\">        if (n == 0) return true;</span><br><span class=\"line\">        int index = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            if (s[i] &gt;= &#x27;A&#x27; &amp;&amp; s[i] &lt;= &#x27;Z&#x27;) &#123;</span><br><span class=\"line\">                s[index++] = s[i] - &#x27;A&#x27; + &#x27;a&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else if ((s[i] &gt;= &#x27;a&#x27; &amp;&amp; s[i] &lt;= &#x27;z&#x27;) || (s[i] &gt;= &#x27;0&#x27; &amp;&amp; s[i] &lt;= &#x27;9&#x27;)) &#123;</span><br><span class=\"line\">                s[index++] = s[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        string a = s.substr(0, index);</span><br><span class=\"line\">        return a == string(a.rbegin(), a.rend());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树中的最大路径和\"><a href=\"#二叉树中的最大路径和\" class=\"headerlink\" title=\"二叉树中的最大路径和\"></a>二叉树中的最大路径和</h2><blockquote>\n<p>描述<br>二叉树里面的路径被定义为:从该树的任意节点出发，经过父&#x3D;&gt;子或者子&#x3D;&gt;父的连接，达到任意节点的序列<br>注意:<br>1.同一个节点在一条二叉树路径里中最多出现一次<br>2.一条路径至少包含一个节点，且不一定经过根节点</p>\n</blockquote>\n<blockquote>\n<p>给定一个二叉树的根节点root，请你计算它的最大路径和</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int dfs(TreeNode *root, int &amp;ans) &#123;</span><br><span class=\"line\">        if (!root) return 0;</span><br><span class=\"line\">        int left_sum = max(dfs(root-&gt;left, ans), 0);</span><br><span class=\"line\">        int right_sum = max(dfs(root-&gt;right, ans), 0);</span><br><span class=\"line\">        ans = max(ans, left_sum + right_sum + root-&gt;val);</span><br><span class=\"line\">        return max(left_sum, right_sum) + root-&gt;val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int maxPathSum(TreeNode* root) &#123;</span><br><span class=\"line\">        if (!root) return 0;</span><br><span class=\"line\">        int ans = INT_MIN;</span><br><span class=\"line\">        dfs(root, ans);</span><br><span class=\"line\">        return ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"买卖股票的最好时机-iii\"><a href=\"#买卖股票的最好时机-iii\" class=\"headerlink\" title=\"买卖股票的最好时机 iii\"></a>买卖股票的最好时机 iii</h2><p>描述</p>\n<blockquote>\n<p>假设你有一个数组，其中第i个元素是某只股票在第i天的价格<br>设计一个算法来求最大的利润。你最多可以进行两次交易<br>注意:<br>你不能同时进行多个交易(即，你必须在再次购买之前出售之前买的股票)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param prices int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int maxProfit(vector&lt;int&gt;&amp; prices) &#123;</span><br><span class=\"line\">        int n = prices.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; dp(n, vector&lt;int&gt;(5, 0));</span><br><span class=\"line\">        dp[0][1] = -prices[0];</span><br><span class=\"line\">        dp[0][2] = 0;</span><br><span class=\"line\">        dp[0][3] = -prices[0];</span><br><span class=\"line\">        dp[0][4] = 0;</span><br><span class=\"line\">        for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            dp[i][0] = 0;</span><br><span class=\"line\">            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]);</span><br><span class=\"line\">            dp[i][2] = max(dp[i-1][2], dp[i-1][1] + prices[i]);</span><br><span class=\"line\">            dp[i][3] = max(dp[i-1][3], dp[i-1][2] - prices[i]);</span><br><span class=\"line\">            dp[i][4] = max(dp[i-1][4], dp[i-1][3] + prices[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[n-1][4];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"买卖股票的最好时机-ii\"><a href=\"#买卖股票的最好时机-ii\" class=\"headerlink\" title=\"买卖股票的最好时机 ii\"></a>买卖股票的最好时机 ii</h2><p>描述</p>\n<blockquote>\n<p>假设你有一个数组，其中第i个元素表示某只股票在第i天的价格。<br>设计一个算法来寻找最大的利润。你可以完成任意数量的交易(例如，多次购买和出售股票的一股)。但是，你不能同时进行多个交易(即，你必须在再次购买之前卖出之前买的股票)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param prices int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int maxProfit(vector&lt;int&gt;&amp; prices) &#123;</span><br><span class=\"line\">        int n = prices.size();</span><br><span class=\"line\">        if (n == 0 || n == 1) return 0;</span><br><span class=\"line\">        int max_profit = 0;</span><br><span class=\"line\">        for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            if (prices[i] &gt; prices[i-1]) max_profit += prices[i] - prices[i-1];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max_profit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"买卖股票的最好时机\"><a href=\"#买卖股票的最好时机\" class=\"headerlink\" title=\"买卖股票的最好时机\"></a>买卖股票的最好时机</h2><p>描述</p>\n<blockquote>\n<p>假设你有一个数组prices，长度为n，其中prices[i]是股票在第i天的价格，请根据这个价格数组，返回买卖股票能获得的最大收益<br>1.你可以买入一次股票和卖出一次股票，并非每天都可以买入或卖出一次，总共只能买入和卖出一次，且买入必须在卖出的前面的某一天<br>2.如果不能获取到任何利润，请返回0<br>3.假设买入卖出均无手续费</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param prices int整型vector </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int maxProfit(vector&lt;int&gt;&amp; prices) &#123;</span><br><span class=\"line\">        int n = prices.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        int min_value = prices[0];</span><br><span class=\"line\">        int max_profit = 0;</span><br><span class=\"line\">        for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            max_profit = max(max_profit, prices[i] - min_value);</span><br><span class=\"line\">            min_value = min(min_value, prices[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max_profit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三角形\"><a href=\"#三角形\" class=\"headerlink\" title=\"三角形\"></a>三角形</h2><p>描述</p>\n<blockquote>\n<p>给出一个三角形，计算从三角形顶部到底部的最小路径和，每一步都可以移动到下面一行相邻的数字</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int minimumTotal(vector&lt;vector&lt;int&gt; &gt; &amp;triangle) &#123;</span><br><span class=\"line\">        int n = triangle.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; dp(n, vector&lt;int&gt;(n, 0));</span><br><span class=\"line\">        dp[0][0] = triangle[0][0];</span><br><span class=\"line\">        for (int j = 1; j &lt; n; ++j) &#123;</span><br><span class=\"line\">            dp[j][0] = dp[j-1][0] + triangle[j][0];</span><br><span class=\"line\">            dp[j][j] = dp[j-1][j-1] + triangle[j][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 1; j &lt; i; ++j) &#123;</span><br><span class=\"line\">                dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return *min_element(dp[n-1].begin(), dp[n-1].end());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int minimumTotal(vector&lt;vector&lt;int&gt; &gt; &amp;triangle) &#123;</span><br><span class=\"line\">        int n = triangle.size();</span><br><span class=\"line\">        if (n == 0) return 0;</span><br><span class=\"line\">        for (int i = n - 2; i &gt;= 0; --i) &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt;= i; ++j) &#123;</span><br><span class=\"line\">                triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return triangle[0][0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"杨辉三角-ii\"><a href=\"#杨辉三角-ii\" class=\"headerlink\" title=\"杨辉三角-ii\"></a>杨辉三角-ii</h2><p>描述</p>\n<blockquote>\n<p>给出一个索引k，返回杨辉三角的第k行<br>例如，k&#x3D;3，<br>返回[1,3,3,1].<br>备注：<br>你能将你的算法优化到只使用O(k)的额外空间吗?</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param rowIndex int整型 </span><br><span class=\"line\">     * @return int整型vector</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;int&gt; getRow(int rowIndex) &#123;</span><br><span class=\"line\">        int n = rowIndex;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; dp(n+1, vector&lt;int&gt;(n+1, 1));</span><br><span class=\"line\">        for (int i = 2; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 1; j &lt; i; ++j) &#123;</span><br><span class=\"line\">                dp[i][j] = dp[i-1][j-1]+dp[i-1][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param rowIndex int整型 </span><br><span class=\"line\">     * @return int整型vector</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;int&gt; getRow(int rowIndex) &#123;</span><br><span class=\"line\">        int n = rowIndex;</span><br><span class=\"line\">        vector&lt;int&gt; a(n+1, 1);</span><br><span class=\"line\">        vector&lt;int&gt; b(n+1, 1);</span><br><span class=\"line\">        for (int i = 2; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 1; j &lt; i; ++j) a[j] = b[j] + b[j-1];</span><br><span class=\"line\">            for (int j = 1; j &lt; i; ++j) b[j] = a[j];</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"杨辉三角\"><a href=\"#杨辉三角\" class=\"headerlink\" title=\"杨辉三角\"></a>杨辉三角</h2><p>描述</p>\n<blockquote>\n<p>给出一个值numRows，生成杨辉三角的前numRows行</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param numRows int整型 </span><br><span class=\"line\">     * @return int整型vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;vector&lt;int&gt; &gt; generate(int numRows) &#123;</span><br><span class=\"line\">        int n = numRows;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; dp(n, vector&lt;int&gt;(n, 1));</span><br><span class=\"line\">        for (int i = 2; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 1; j &lt; i; ++j) &#123;</span><br><span class=\"line\">                dp[i][j] = dp[i-1][j-1] + dp[i-1][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            vector&lt;int&gt; tmp;</span><br><span class=\"line\">            for (int j = 0; j &lt;= i; ++j) &#123;</span><br><span class=\"line\">                tmp.push_back(dp[i][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.push_back(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"填充每个节点指向最右节点的next指针-ii\"><a href=\"#填充每个节点指向最右节点的next指针-ii\" class=\"headerlink\" title=\"填充每个节点指向最右节点的next指针 ii\"></a>填充每个节点指向最右节点的next指针 ii</h2><p>描述</p>\n<blockquote>\n<p>继续思考”填充每个节点指向最右节点的next指针” 这道题<br>如果给定的树可以是任意的二叉树呢?你之前的给出的算法还有效吗?<br>注意：<br>你只能使用常量的额外内存空间</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for binary tree with next pointer.</span><br><span class=\"line\"> * struct TreeLinkNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  TreeLinkNode *left, *right, *next;</span><br><span class=\"line\"> *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void connect(TreeLinkNode *root) &#123;</span><br><span class=\"line\">        if (root == nullptr) return;</span><br><span class=\"line\">        queue&lt;TreeLinkNode *&gt; q1;</span><br><span class=\"line\">        queue&lt;TreeLinkNode *&gt; q2;</span><br><span class=\"line\">        q1.push(root);</span><br><span class=\"line\">        TreeLinkNode *nxt, *cur;</span><br><span class=\"line\">        while (!q1.empty() || !q2.empty()) &#123;</span><br><span class=\"line\">            while (!q1.empty()) &#123;</span><br><span class=\"line\">                cur = q1.front();</span><br><span class=\"line\">                q1.pop();</span><br><span class=\"line\">                if (!q1.empty()) nxt = q1.front();</span><br><span class=\"line\">                else nxt = nullptr;</span><br><span class=\"line\">                cur-&gt;next = nxt;</span><br><span class=\"line\">                if (cur-&gt;left) q2.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) q2.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            while (!q2.empty()) &#123;</span><br><span class=\"line\">                cur = q2.front();</span><br><span class=\"line\">                q2.pop();</span><br><span class=\"line\">                if (!q2.empty()) nxt = q2.front();</span><br><span class=\"line\">                else nxt = nullptr;</span><br><span class=\"line\">                cur-&gt;next = nxt;</span><br><span class=\"line\">                if (cur-&gt;left) q1.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) q1.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for binary tree with next pointer.</span><br><span class=\"line\"> * struct TreeLinkNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  TreeLinkNode *left, *right, *next;</span><br><span class=\"line\"> *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void connect(TreeLinkNode *root) &#123;</span><br><span class=\"line\">        if (root == nullptr) return;</span><br><span class=\"line\">        queue&lt;TreeLinkNode *&gt; q;</span><br><span class=\"line\">        q.push(root);</span><br><span class=\"line\">        TreeLinkNode *cur;</span><br><span class=\"line\">        while (!q.empty()) &#123;</span><br><span class=\"line\">            int n = q.size();</span><br><span class=\"line\">            while (n--) &#123;</span><br><span class=\"line\">                cur = q.front();</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">                if (n == 0) cur-&gt;next = nullptr;</span><br><span class=\"line\">                else cur-&gt;next = q.front();</span><br><span class=\"line\">                if (cur-&gt;left) q.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) q.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"填充每个节点指向最右节点的next指针\"><a href=\"#填充每个节点指向最右节点的next指针\" class=\"headerlink\" title=\"填充每个节点指向最右节点的next指针\"></a>填充每个节点指向最右节点的next指针</h2><p>描述</p>\n<blockquote>\n<p>给定一个二叉树<br>填充所有节点的next指针，指向最接近它的同一层右边节点。如果没有同一层没有右边的节点，则应该将next指针设置为NULL<br>初始时，所有的next指针都为NULL<br>注意：<br>你只能使用常量级的额外内存空间<br>可以假设给出的二叉树是一个完美的二叉树(即，所有叶子节点都位于同一层，而且每个父节点都有两个孩子节点)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for binary tree with next pointer.</span><br><span class=\"line\"> * struct TreeLinkNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  TreeLinkNode *left, *right, *next;</span><br><span class=\"line\"> *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void connect(TreeLinkNode *root) &#123;</span><br><span class=\"line\">        if (!root) return;</span><br><span class=\"line\">        TreeLinkNode *level = root;</span><br><span class=\"line\">        TreeLinkNode *cur;</span><br><span class=\"line\">        while (level) &#123;</span><br><span class=\"line\">            cur = level;</span><br><span class=\"line\">            while (cur) &#123;</span><br><span class=\"line\">                if (cur-&gt;left) cur-&gt;left-&gt;next = cur-&gt;right;</span><br><span class=\"line\">                if (cur-&gt;next &amp;&amp; cur-&gt;right) cur-&gt;right-&gt;next = cur-&gt;next-&gt;left;</span><br><span class=\"line\">                cur = cur-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            level = level-&gt;left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不同的子序列\"><a href=\"#不同的子序列\" class=\"headerlink\" title=\"不同的子序列\"></a>不同的子序列</h2><p>描述</p>\n<blockquote>\n<p>给定两个字符串S和T，返回S子序列等于T的不同子序列个数有多少个？<br>字符串的子序列是由原来的字符串删除一些字符（也可以不删除）在不改变相对位置的情况下的剩余字符（例如，”ACE”is a subsequence of”ABCDE”但是”AEC”不是）<br>例如：<br>S&#x3D;”nowcccoder”, T &#x3D; “nowccoder”<br>返回3</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param S string字符串 </span><br><span class=\"line\">     * @param T string字符串 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int numDistinct(string S, string T) &#123;</span><br><span class=\"line\">        int n = S.size();</span><br><span class=\"line\">        int m = T.size();</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; dp(n+1, vector&lt;int&gt;(m+1, 0));</span><br><span class=\"line\">        for (int i = 0; i &lt;= n; ++i) dp[i][0] = 1;</span><br><span class=\"line\">        for (int j = 1; j &lt;= m; ++j) dp[0][j] = 0;</span><br><span class=\"line\">        for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 1; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">                if (S[i-1] != T[j-1]) dp[i][j] = dp[i-1][j];</span><br><span class=\"line\">                else dp[i][j] = dp[i-1][j-1] + dp[i-1][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[n][m];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树中和为某一值的路径-二\"><a href=\"#二叉树中和为某一值的路径-二\" class=\"headerlink\" title=\"二叉树中和为某一值的路径(二)\"></a>二叉树中和为某一值的路径(二)</h2><p>描述</p>\n<blockquote>\n<p>输入一颗二叉树的根节点root和一个整数expectNumber，找出二叉树中结点值的和为expectNumber的所有路径<br>1.该题路径定义为从树的根结点开始往下一直到叶子结点所经过的结点<br>2.叶子节点是指没有子节点的节点<br>3.路径只能从父节点到子节点，不能从子节点到父节点<br>4.总节点数目为n</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @param target int整型 </span><br><span class=\"line\">     * @return int整型vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void dfs(TreeNode *root, vector&lt;vector&lt;int&gt; &gt; &amp;res, vector&lt;int&gt; &amp;path, int &amp;sum, int target) &#123;</span><br><span class=\"line\">        if (!root) return;</span><br><span class=\"line\">        sum += root-&gt;val;</span><br><span class=\"line\">        path.push_back(root-&gt;val);</span><br><span class=\"line\">        if (!root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; sum == target) res.push_back(path);</span><br><span class=\"line\">        dfs(root-&gt;left, res, path, sum, target);</span><br><span class=\"line\">        dfs(root-&gt;right, res, path, sum, target);</span><br><span class=\"line\"></span><br><span class=\"line\">        path.pop_back();</span><br><span class=\"line\">        sum -= root-&gt;val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;vector&lt;int&gt; &gt; FindPath(TreeNode* root, int target) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        vector&lt;int&gt; path;</span><br><span class=\"line\">        int sum = 0;</span><br><span class=\"line\">        dfs(root, res, path, sum, target);</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树中和为某一值的路径-一\"><a href=\"#二叉树中和为某一值的路径-一\" class=\"headerlink\" title=\"二叉树中和为某一值的路径(一)\"></a>二叉树中和为某一值的路径(一)</h2><p>描述</p>\n<blockquote>\n<p>给定一个二叉树root和一个值 sum ，判断是否有从根节点到叶子节点的节点值之和等于 sum 的路径<br>1.该题路径定义为从树的根结点开始往下一直到叶子结点所经过的结点<br>2.叶子节点是指没有子节点的节点<br>3.路径只能从父节点到子节点，不能从子节点到父节点<br>4.总节点数目为n</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @param sum int整型 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool hasPathSum(TreeNode* root, int sum) &#123;</span><br><span class=\"line\">        if (root &amp;&amp; !root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; root-&gt;val == sum) return true;</span><br><span class=\"line\">        if (!root) return false;</span><br><span class=\"line\">        return hasPathSum(root-&gt;left, sum-root-&gt;val) || hasPathSum(root-&gt;right, sum-root-&gt;val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @param sum int整型 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool dfs(TreeNode *root, int sum) &#123;</span><br><span class=\"line\">        if (!root) return false;</span><br><span class=\"line\">        if (root &amp;&amp; !root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; root-&gt;val == sum) return true;</span><br><span class=\"line\">        return dfs(root-&gt;left, sum-root-&gt;val) || dfs(root-&gt;right, sum-root-&gt;val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bool hasPathSum(TreeNode* root, int sum) &#123;</span><br><span class=\"line\">        return dfs(root, sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断二叉树是否为平衡二叉树\"><a href=\"#判断二叉树是否为平衡二叉树\" class=\"headerlink\" title=\"判断二叉树是否为平衡二叉树\"></a>判断二叉树是否为平衡二叉树</h2><p>描述</p>\n<blockquote>\n<p>本题要求判断给定的二叉树是否是平衡二叉树<br>平衡二叉树的性质为: 要么是一棵空树，要么任何一个节点的左右子树高度差的绝对值不超过 1<br>一颗树的高度指的是树的根节点到所有节点的距离中的最大值</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int depth(TreeNode *root) &#123;</span><br><span class=\"line\">        if (!root) return 0;</span><br><span class=\"line\">        int left = depth(root-&gt;left);</span><br><span class=\"line\">        int right = depth(root-&gt;right);</span><br><span class=\"line\">        return max(left, right) + 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bool isBalanced(TreeNode* root) &#123;</span><br><span class=\"line\">        if (!root) return true;</span><br><span class=\"line\">        int left = depth(root-&gt;left);</span><br><span class=\"line\">        int right = depth(root-&gt;right);</span><br><span class=\"line\"></span><br><span class=\"line\">        return isBalanced(root-&gt;left) &amp;&amp; isBalanced(root-&gt;right) &amp;&amp; abs(left-right) &lt;= 1; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"有序链表变成二叉搜索树\"><a href=\"#有序链表变成二叉搜索树\" class=\"headerlink\" title=\"有序链表变成二叉搜索树\"></a>有序链表变成二叉搜索树</h2><p>描述</p>\n<blockquote>\n<p>给定一个单链表，其中的元素按升序排序，请将它转化成平衡二叉搜索树（BST）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * struct ListNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct ListNode *next;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param head ListNode类 </span><br><span class=\"line\">     * @return TreeNode类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    TreeNode *merge(ListNode *head, ListNode *tail) &#123;</span><br><span class=\"line\">        if (head == tail) return nullptr;</span><br><span class=\"line\">        ListNode *slow = head, *fast = head;</span><br><span class=\"line\">        while (fast != tail &amp;&amp; fast-&gt;next != tail) &#123;</span><br><span class=\"line\">            slow = slow-&gt;next;</span><br><span class=\"line\">            fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TreeNode *root = new TreeNode(slow-&gt;val);</span><br><span class=\"line\">        root-&gt;left = merge(head, slow);</span><br><span class=\"line\">        root-&gt;right = merge(slow-&gt;next, tail);</span><br><span class=\"line\">        return root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    TreeNode* sortedListToBST(ListNode* head) &#123;</span><br><span class=\"line\">        return merge(head, nullptr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将升序数组转化为平衡二叉搜索树\"><a href=\"#将升序数组转化为平衡二叉搜索树\" class=\"headerlink\" title=\"将升序数组转化为平衡二叉搜索树\"></a>将升序数组转化为平衡二叉搜索树</h2><p>描述</p>\n<blockquote>\n<p>给定一个升序排序的数组，将其转化为平衡二叉搜索树（BST）<br>平衡二叉搜索树指树上每个节点 node 都满足左子树中所有节点的的值都小于 node 的值，右子树中所有节点的值都大于 node 的值，并且左右子树的节点数量之差不大于1</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param nums int整型vector </span><br><span class=\"line\">     * @return TreeNode类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    TreeNode *merge(vector&lt;int&gt; &amp;nums, int left, int right) &#123;</span><br><span class=\"line\">        if (left == right) return nullptr;</span><br><span class=\"line\">        int mid = left + (right - left) / 2;</span><br><span class=\"line\">        TreeNode *root = new TreeNode(nums[mid]);</span><br><span class=\"line\">        root-&gt;left = merge(nums, left, mid);</span><br><span class=\"line\">        root-&gt;right = merge(nums, mid+1, right);</span><br><span class=\"line\">        return root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    TreeNode* sortedArrayToBST(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">        int n = nums.size();</span><br><span class=\"line\">        return merge(nums, 0, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树层序遍历-ii\"><a href=\"#二叉树层序遍历-ii\" class=\"headerlink\" title=\"二叉树层序遍历 ii\"></a>二叉树层序遍历 ii</h2><p>描述</p>\n<blockquote>\n<p>给定一个二叉树，返回该二叉树由底层到顶层的层序遍历，（从左向右，从叶子节点到根节点，一层一层的遍历）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;vector&lt;int&gt; &gt; levelOrderBottom(TreeNode* root) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        if (!root) return res;</span><br><span class=\"line\">        queue&lt;TreeNode *&gt; q;</span><br><span class=\"line\">        q.push(root);</span><br><span class=\"line\">        TreeNode *cur;</span><br><span class=\"line\">        while (!q.empty()) &#123;</span><br><span class=\"line\">            int n = q.size();</span><br><span class=\"line\">            vector&lt;int&gt; tmp;</span><br><span class=\"line\">            while (n--) &#123;</span><br><span class=\"line\">                cur = q.front();</span><br><span class=\"line\">                tmp.push_back(cur-&gt;val);</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">                if (cur-&gt;left) q.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) q.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.push_back(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reverse(res.begin(), res.end());</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从中序和后序遍历构造二叉树\"><a href=\"#从中序和后序遍历构造二叉树\" class=\"headerlink\" title=\"从中序和后序遍历构造二叉树\"></a>从中序和后序遍历构造二叉树</h2><p>描述</p>\n<blockquote>\n<p>给出一棵树的中序遍历和后序遍历，请构造这颗二叉树<br>注意：<br>保证给出的树中不存在重复的节点</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param inorder int整型vector </span><br><span class=\"line\">     * @param postorder int整型vector </span><br><span class=\"line\">     * @return TreeNode类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    TreeNode* buildTree(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder) &#123;</span><br><span class=\"line\">        int n = inorder.size();</span><br><span class=\"line\">        if (n == 0) return nullptr;</span><br><span class=\"line\">        if (n == 1) return new TreeNode(inorder[0]);</span><br><span class=\"line\"></span><br><span class=\"line\">        int index = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            if (inorder[i] == postorder[n-1]) &#123;</span><br><span class=\"line\">                index = i;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        vector&lt;int&gt; leftInorder, leftPostorder, rightInorder, rightPostorder;</span><br><span class=\"line\">        for (int i = 0; i &lt; index; ++i) leftInorder.push_back(inorder[i]);</span><br><span class=\"line\">        for (int i = index + 1; i &lt; n; ++i) rightInorder.push_back(inorder[i]);</span><br><span class=\"line\">        for (int i = index; i &lt; n - 1; ++i) rightPostorder.push_back(postorder[i]);</span><br><span class=\"line\">        for (int i = 0; i &lt; index; ++i) leftPostorder.push_back(postorder[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        TreeNode *root = new TreeNode(inorder[index]);</span><br><span class=\"line\"></span><br><span class=\"line\">        root-&gt;left =  buildTree(leftInorder, leftPostorder);</span><br><span class=\"line\">        root-&gt;right = buildTree(rightInorder, rightPostorder);</span><br><span class=\"line\"></span><br><span class=\"line\">        return root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从前序和中序遍历构造二叉树\"><a href=\"#从前序和中序遍历构造二叉树\" class=\"headerlink\" title=\"从前序和中序遍历构造二叉树\"></a>从前序和中序遍历构造二叉树</h2><p>描述</p>\n<blockquote>\n<p>给出一棵树的前序遍历和中序遍历，请构造这颗二叉树<br>注意：<br>可以假设树中不存在重复的节点</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param preorder int整型vector </span><br><span class=\"line\">     * @param inorder int整型vector </span><br><span class=\"line\">     * @return TreeNode类</span><br><span class=\"line\">     */</span><br><span class=\"line\">    TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) &#123;</span><br><span class=\"line\">        int n = preorder.size();</span><br><span class=\"line\">        if (n == 0) return nullptr;</span><br><span class=\"line\">        if (n == 1) return new TreeNode(preorder[0]);</span><br><span class=\"line\"></span><br><span class=\"line\">        int index = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            if (inorder[i] == preorder[0]) &#123;</span><br><span class=\"line\">                index = i;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        vector&lt;int&gt; leftPreorder, leftInorder, rightPreorder, rightInorder;</span><br><span class=\"line\">        TreeNode *root = new TreeNode(inorder[index]);</span><br><span class=\"line\"></span><br><span class=\"line\">        for (int i = 0; i &lt; index; ++i) leftInorder.push_back(inorder[i]);</span><br><span class=\"line\">        for (int i = index+1; i &lt; n; ++i) rightInorder.push_back(inorder[i]);</span><br><span class=\"line\">        for (int i = 1; i &lt;= index; ++i) leftPreorder.push_back(preorder[i]);</span><br><span class=\"line\">        for (int i = index+1; i &lt; n; ++i) rightPreorder.push_back(preorder[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        root-&gt;left = buildTree(leftPreorder, leftInorder);</span><br><span class=\"line\">        root-&gt;right = buildTree(rightPreorder, rightInorder);</span><br><span class=\"line\"></span><br><span class=\"line\">        return root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的最大深度\"><a href=\"#二叉树的最大深度\" class=\"headerlink\" title=\"二叉树的最大深度\"></a>二叉树的最大深度</h2><p>描述</p>\n<blockquote>\n<p>求给定二叉树的最大深度<br>深度是指树的根节点到任一叶子节点路径上节点的数量<br>最大深度是所有叶子节点的深度的最大值</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int maxDepth(TreeNode* root) &#123;</span><br><span class=\"line\">        if (!root) return 0;</span><br><span class=\"line\">        return max(maxDepth(root-&gt;left), maxDepth(root-&gt;right)) + 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按之字形顺序打印二叉树\"><a href=\"#按之字形顺序打印二叉树\" class=\"headerlink\" title=\"按之字形顺序打印二叉树\"></a>按之字形顺序打印二叉树</h2><p>描述</p>\n<blockquote>\n<p>给定一个二叉树，返回该二叉树的之字形层序遍历，（第一层从左向右，下一层从右向左，一直这样交替）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param pRoot TreeNode类 </span><br><span class=\"line\">     * @return int整型vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;vector&lt;int&gt; &gt; Print(TreeNode* pRoot) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        if (!pRoot) return res;</span><br><span class=\"line\">        queue&lt;TreeNode *&gt; q;</span><br><span class=\"line\">        q.push(pRoot);</span><br><span class=\"line\">        TreeNode *cur;</span><br><span class=\"line\">        int level = 1;</span><br><span class=\"line\">        while (!q.empty()) &#123;</span><br><span class=\"line\">            vector&lt;int&gt; tmp;</span><br><span class=\"line\">            int n = q.size();</span><br><span class=\"line\">            while (n--) &#123;</span><br><span class=\"line\">                cur = q.front();</span><br><span class=\"line\">                tmp.push_back(cur-&gt;val);</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">                if (cur-&gt;left) q.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) q.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (level &amp; 1) res.push_back(tmp);</span><br><span class=\"line\">            else &#123;</span><br><span class=\"line\">                reverse(tmp.begin(), tmp.end());</span><br><span class=\"line\">                res.push_back(tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ++level;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param pRoot TreeNode类 </span><br><span class=\"line\">     * @return int整型vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;vector&lt;int&gt; &gt; Print(TreeNode* pRoot) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        if (!pRoot) return res;</span><br><span class=\"line\">        stack&lt;TreeNode *&gt; s1, s2;</span><br><span class=\"line\">        s1.push(pRoot);</span><br><span class=\"line\">        TreeNode *cur;</span><br><span class=\"line\">        while (!s1.empty() || !s2.empty()) &#123;</span><br><span class=\"line\">            vector&lt;int&gt; tmp;</span><br><span class=\"line\">            while (!s1.empty()) &#123;</span><br><span class=\"line\">                cur = s1.top();</span><br><span class=\"line\">                tmp.push_back(cur-&gt;val);</span><br><span class=\"line\">                s1.pop();</span><br><span class=\"line\">                if (cur-&gt;left) s2.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) s2.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (!tmp.empty()) res.push_back(tmp);</span><br><span class=\"line\">            tmp.clear();</span><br><span class=\"line\">            while (!s2.empty()) &#123;</span><br><span class=\"line\">                cur = s2.top();</span><br><span class=\"line\">                tmp.push_back(cur-&gt;val);</span><br><span class=\"line\">                s2.pop();</span><br><span class=\"line\">                if (cur-&gt;right) s1.push(cur-&gt;right);</span><br><span class=\"line\">                if (cur-&gt;left) s1.push(cur-&gt;left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (!tmp.empty()) res.push_back(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"求二叉树的层序遍历\"><a href=\"#求二叉树的层序遍历\" class=\"headerlink\" title=\"求二叉树的层序遍历\"></a>求二叉树的层序遍历</h2><p>描述</p>\n<blockquote>\n<p>给定一个二叉树，返回该二叉树层序遍历的结果，（从左到右，一层一层地遍历）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型vector&lt;vector&lt;&gt;&gt;</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;vector&lt;int&gt; &gt; levelOrder(TreeNode* root) &#123;</span><br><span class=\"line\">        vector&lt;vector&lt;int&gt; &gt; res;</span><br><span class=\"line\">        if (!root) return res;</span><br><span class=\"line\">        queue&lt;TreeNode *&gt; q;</span><br><span class=\"line\">        q.push(root);</span><br><span class=\"line\">        TreeNode *cur;</span><br><span class=\"line\">        while (!q.empty()) &#123;</span><br><span class=\"line\">            int n = q.size();</span><br><span class=\"line\">            vector&lt;int&gt; tmp;</span><br><span class=\"line\">            while (n--) &#123;</span><br><span class=\"line\">                cur = q.front();</span><br><span class=\"line\">                tmp.push_back(cur-&gt;val);</span><br><span class=\"line\">                q.pop();</span><br><span class=\"line\">                if (cur-&gt;left) q.push(cur-&gt;left);</span><br><span class=\"line\">                if (cur-&gt;right) q.push(cur-&gt;right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.push_back(tmp); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对称的二叉树\"><a href=\"#对称的二叉树\" class=\"headerlink\" title=\"对称的二叉树\"></a>对称的二叉树</h2><p>描述</p>\n<blockquote>\n<p>给定一棵二叉树，判断其是否是自身的镜像（即：是否对称）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param pRoot TreeNode类 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool same(TreeNode *r1, TreeNode *r2) &#123;</span><br><span class=\"line\">        return (!r1 &amp;&amp; !r2) || (r1 &amp;&amp; r2 &amp;&amp; r1-&gt;val == r2-&gt;val &amp;&amp; same(r1-&gt;left, r2-&gt;left) &amp;&amp; same(r1-&gt;right, r2-&gt;right));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void mirror(TreeNode *root) &#123;</span><br><span class=\"line\">        if (!root || (!root-&gt;left &amp;&amp; !root-&gt;right)) return;</span><br><span class=\"line\">        TreeNode *left = root-&gt;left;</span><br><span class=\"line\">        TreeNode *right = root-&gt;right;</span><br><span class=\"line\">        mirror(left);</span><br><span class=\"line\">        mirror(right);</span><br><span class=\"line\">        root-&gt;left = right;</span><br><span class=\"line\">        root-&gt;right = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bool isSymmetrical(TreeNode* pRoot) &#123;</span><br><span class=\"line\">        if (!pRoot) return true;</span><br><span class=\"line\">        mirror(pRoot-&gt;right);</span><br><span class=\"line\">        return same(pRoot-&gt;left, pRoot-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断二叉树是否相等\"><a href=\"#判断二叉树是否相等\" class=\"headerlink\" title=\"判断二叉树是否相等\"></a>判断二叉树是否相等</h2><p>描述</p>\n<blockquote>\n<p>给出两个二叉树，请写出一个判断两个二叉树是否相等的函数<br>判断两个二叉树相等的条件是：两个二叉树的结构相同，并且相同的节点上具有相同的值</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param p TreeNode类 </span><br><span class=\"line\">     * @param q TreeNode类 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool isSameTree(TreeNode* p, TreeNode* q) &#123;</span><br><span class=\"line\">        return (!p &amp;&amp; !q) || (p &amp;&amp; q &amp;&amp; p-&gt;val == q-&gt;val &amp;&amp; isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"恢复二叉搜索树\"><a href=\"#恢复二叉搜索树\" class=\"headerlink\" title=\"恢复二叉搜索树\"></a>恢复二叉搜索树</h2><p>描述</p>\n<blockquote>\n<p>二叉搜索树（BST）中的两个节点的值被错误地交换了<br>请在不改变树的结构的情况下恢复这棵树<br>备注；<br>用O(n)的空间解决这个问题的方法太暴力了，你能设计一个常数级空间复杂度的算法么？</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for binary tree</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode *left;</span><br><span class=\"line\"> *     TreeNode *right;</span><br><span class=\"line\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void inorder(TreeNode *root, TreeNode *&amp;pre, TreeNode *&amp;first, TreeNode *&amp;second) &#123;</span><br><span class=\"line\">        if (!root) return;</span><br><span class=\"line\">        inorder(root-&gt;left, pre, first, second);</span><br><span class=\"line\">        if (pre &amp;&amp; pre-&gt;val &gt; root-&gt;val) &#123;</span><br><span class=\"line\">            if (!first) first = pre;</span><br><span class=\"line\">            second = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre = root;</span><br><span class=\"line\">        inorder(root-&gt;right, pre, first, second);</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void recoverTree(TreeNode *root) &#123;</span><br><span class=\"line\">        TreeNode *pre = nullptr, *first = nullptr, *second = nullptr;</span><br><span class=\"line\">        inorder(root, pre, first, second);</span><br><span class=\"line\">        if (first &amp;&amp; second) swap(first-&gt;val, second-&gt;val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for binary tree</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode *left;</span><br><span class=\"line\"> *     TreeNode *right;</span><br><span class=\"line\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    TreeNode *pre = nullptr, *first = nullptr, *second = nullptr;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void inorder(TreeNode *root) &#123;</span><br><span class=\"line\">        if (!root) return;</span><br><span class=\"line\">        inorder(root-&gt;left);</span><br><span class=\"line\">        if (pre &amp;&amp; pre-&gt;val &gt; root-&gt;val) &#123;</span><br><span class=\"line\">            if (!first) first = pre;</span><br><span class=\"line\">            second = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre = root;</span><br><span class=\"line\">        inorder(root-&gt;right);</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void recoverTree(TreeNode *root) &#123;</span><br><span class=\"line\">        inorder(root);</span><br><span class=\"line\">        if (first &amp;&amp; second) swap(first-&gt;val, second-&gt;val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断二叉搜索树\"><a href=\"#判断二叉搜索树\" class=\"headerlink\" title=\"判断二叉搜索树\"></a>判断二叉搜索树</h2><p>描述</p>\n<blockquote>\n<p>判断给出的二叉树是否是一个二叉搜索树（BST）<br>二叉搜索树的定义如下<br>一个节点的左子树上节点的值都小于自身的节点值<br>一个节点的右子树上节点的值都大于自身的节点值<br>所有节点的左右子树都必须是二叉搜索树</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    TreeNode *pre = nullptr;</span><br><span class=\"line\">    bool flag = true;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    void inorder(TreeNode *root) &#123;</span><br><span class=\"line\">        if (!root) return;</span><br><span class=\"line\">        inorder(root-&gt;left);</span><br><span class=\"line\">        if (pre &amp;&amp; pre-&gt;val &gt;= root-&gt;val) flag = false;</span><br><span class=\"line\">        pre = root;</span><br><span class=\"line\">        inorder(root-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bool isValidBST(TreeNode* root) &#123;</span><br><span class=\"line\">        inorder(root);</span><br><span class=\"line\">        return flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"交织的字符串\"><a href=\"#交织的字符串\" class=\"headerlink\" title=\"交织的字符串\"></a>交织的字符串</h2><p>描述</p>\n<blockquote>\n<p>给出三个字符串s1, s2, s3,判断s3是否可以由s1和s2交织而成<br>例如：<br>给定<br>s1 &#x3D;”xxyzz”,<br>s2 &#x3D;”pyyzx”,<br>如果s3 &#x3D;”xxpyyzyzxz”, 返回true<br>如果s3 &#x3D;”xxpyyyxzzz”, 返回false</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param s1 string字符串 </span><br><span class=\"line\">     * @param s2 string字符串 </span><br><span class=\"line\">     * @param s3 string字符串 </span><br><span class=\"line\">     * @return bool布尔型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    bool isInterleave(string s1, string s2, string s3) &#123;</span><br><span class=\"line\">        int n = s1.size();</span><br><span class=\"line\">        int m = s2.size();</span><br><span class=\"line\">        int l = s3.size();</span><br><span class=\"line\">        if (l != n + m) return false;</span><br><span class=\"line\">        vector&lt;vector&lt;bool&gt;&gt; dp(n+1, vector&lt;bool&gt;(m+1, false));</span><br><span class=\"line\">        dp[0][0] = true;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            if (s1[i] == s3[i]) dp[i+1][0] = true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int j = 0; j &lt; m; ++j) &#123;</span><br><span class=\"line\">            if (s2[j] == s3[j]) dp[0][j+1] = true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 0; j &lt; m; ++j) &#123;</span><br><span class=\"line\">                char a = s1[i], b = s2[j], c = s3[i+j+1];</span><br><span class=\"line\">                if (a == c &amp;&amp; b != c) dp[i+1][j+1] = dp[i][j+1];</span><br><span class=\"line\">                if (a != c &amp;&amp; b == c) dp[i+1][j+1] = dp[i+1][j];</span><br><span class=\"line\">                if (a == c &amp;&amp; b == c) dp[i+1][j+1] = dp[i][j+1] || dp[i+1][j];</span><br><span class=\"line\">                if (a != c &amp;&amp; b != c) dp[i+1][j+1] = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[n][m];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不同的二叉搜索树-ii\"><a href=\"#不同的二叉搜索树-ii\" class=\"headerlink\" title=\"不同的二叉搜索树 ii\"></a>不同的二叉搜索树 ii</h2><p>描述</p>\n<blockquote>\n<p>给定一个值n,请生成所有的存储值1…n.的二叉搜索树（BST）的结构<br>例如：<br>给定n&#x3D;3，你的程序应该给出下面五种不同的二叉搜索树（BST）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param n int整型 </span><br><span class=\"line\">     * @return TreeNode类vector</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;TreeNode *&gt; postorder(int left, int right) &#123;</span><br><span class=\"line\">        if (left &gt; right) return vector&lt;TreeNode *&gt;&#123;nullptr&#125;;</span><br><span class=\"line\">        vector&lt;TreeNode *&gt; res;</span><br><span class=\"line\">        for (int i = left; i &lt;= right; ++i) &#123;</span><br><span class=\"line\">            vector&lt;TreeNode *&gt; left_vec = postorder(left, i-1);</span><br><span class=\"line\">            vector&lt;TreeNode *&gt; right_vec = postorder(i+1, right);</span><br><span class=\"line\">            int n = left_vec.size();</span><br><span class=\"line\">            int m = right_vec.size();</span><br><span class=\"line\">            for (int a = 0; a &lt; n; ++a) &#123;</span><br><span class=\"line\">                for (int b = 0; b &lt; m; ++b) &#123;</span><br><span class=\"line\">                    TreeNode *root = new TreeNode(i);</span><br><span class=\"line\">                    root-&gt;left = left_vec[a];</span><br><span class=\"line\">                    root-&gt;right = right_vec[b];</span><br><span class=\"line\">                    res.push_back(root);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;TreeNode*&gt; generateTrees(int n) &#123;</span><br><span class=\"line\">        return postorder(1, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不同的二叉搜索树\"><a href=\"#不同的二叉搜索树\" class=\"headerlink\" title=\"不同的二叉搜索树\"></a>不同的二叉搜索树</h2><p>描述</p>\n<blockquote>\n<p>给定一个值n，能构建出多少不同的值包含1…n的二叉搜索树（BST）？<br>例如<br>给定 n &#x3D; 3, 有五种不同的二叉搜索树（BST）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param n int整型 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int postorder(int left, int right) &#123;</span><br><span class=\"line\">        if (left &gt; right) return 0;</span><br><span class=\"line\">        int res = 0;</span><br><span class=\"line\">        for (int i = left; i &lt;= right; ++i) &#123;</span><br><span class=\"line\">            int l = postorder(left, i-1);</span><br><span class=\"line\">            int r = postorder(i+1, right);</span><br><span class=\"line\">            if (l != 0 &amp;&amp; r != 0) res += l * r;</span><br><span class=\"line\">            else if (l == 0 &amp;&amp; r == 0) res += 1;</span><br><span class=\"line\">            else if (l == 0) res += r;</span><br><span class=\"line\">            else res += l;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int numTrees(int n) &#123;</span><br><span class=\"line\">        return postorder(1, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param n int整型 </span><br><span class=\"line\">     * @return int整型</span><br><span class=\"line\">     */</span><br><span class=\"line\">    int numTrees(int n) &#123;</span><br><span class=\"line\">        vector&lt;int&gt; dp(n+1, 0);</span><br><span class=\"line\">        dp[0] = 1, dp[1] = 1;</span><br><span class=\"line\">        for (int i = 2; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            for (int j = 1; j &lt;= i; ++j) &#123;</span><br><span class=\"line\">                dp[i] += dp[j-1] * dp[i-j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的中序遍历\"><a href=\"#二叉树的中序遍历\" class=\"headerlink\" title=\"二叉树的中序遍历\"></a>二叉树的中序遍历</h2><p>描述</p>\n<blockquote>\n<p>给出一棵二叉树，返回这棵树的中序遍历<br>例如：<br>给出的二叉树为{1,#,2,3}</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *  int val;</span><br><span class=\"line\"> *  struct TreeNode *left;</span><br><span class=\"line\"> *  struct TreeNode *right;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * </span><br><span class=\"line\">     * @param root TreeNode类 </span><br><span class=\"line\">     * @return int整型vector</span><br><span class=\"line\">     */</span><br><span class=\"line\">    vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class=\"line\">        vector&lt;int&gt; res;</span><br><span class=\"line\">        if (!root) return res;</span><br><span class=\"line\">        stack&lt;TreeNode *&gt; s;</span><br><span class=\"line\">        TreeNode *cur = root;</span><br><span class=\"line\">        while (!s.empty() || cur) &#123;</span><br><span class=\"line\">            while (cur) &#123;</span><br><span class=\"line\">                s.push(cur);</span><br><span class=\"line\">                cur = cur-&gt;left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cur = s.top();</span><br><span class=\"line\">            res.push_back(cur-&gt;val);</span><br><span class=\"line\">            s.pop();</span><br><span class=\"line\">            cur = cur-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字字符串转化成IP地址\"><a href=\"#数字字符串转化成IP地址\" class=\"headerlink\" title=\"数字字符串转化成IP地址\"></a>数字字符串转化成IP地址</h2>"}],"PostAsset":[],"PostCategory":[{"post_id":"cln2n3nua0001yuzq9a7e0r2s","category_id":"cln2n3nuz0004yuzq532xhejf","_id":"cln2n3nwe000fyuzqbbuoetro"},{"post_id":"cln2n3nur0003yuzq1ucse03q","category_id":"cln2n3nuz0004yuzq532xhejf","_id":"cln2n3nwt000lyuzq2c90gxuw"},{"post_id":"cln2n3nv90006yuzqfsxw1q8m","category_id":"cln2n3nuz0004yuzq532xhejf","_id":"cln2n3nx5000qyuzq60hv3azz"},{"post_id":"cln2n3nvd0007yuzqa2bc2f12","category_id":"cln2n3nwr000kyuzqfpabhonp","_id":"cln2n3nxu000wyuzqfcpdfue9"},{"post_id":"cln2n3nvi0008yuzq87oz3pzo","category_id":"cln2n3nx6000ryuzq47l8awld","_id":"cln2n3ny50011yuzqaw9w6saz"},{"post_id":"cln2n3nw1000cyuzqao9h2fd7","category_id":"cln2n3nxx000xyuzq26n0a8a9","_id":"cln2n3nyc0015yuzqb9rac5yx"},{"post_id":"cln2n3nw9000dyuzq2sf495dy","category_id":"cln2n3ny60012yuzqhebudnph","_id":"cln2n3nyh001ayuzqfn4j5om2"},{"post_id":"cln2n3nwi000iyuzqcpcw94lc","category_id":"cln2n3ny60012yuzqhebudnph","_id":"cln2n3nyn001eyuzq10d33vbr"},{"post_id":"cln2n3nwl000jyuzqerbm196k","category_id":"cln2n3ny60012yuzqhebudnph","_id":"cln2n3nyu001hyuzq5ywjhx84"},{"post_id":"cln2n3nx2000pyuzqbjte21ps","category_id":"cln2n3nym001dyuzq7xrz6hxn","_id":"cln2n3nzg001myuzqf570fr1p"},{"post_id":"cln2n3nx9000tyuzq49b89jkh","category_id":"cln2n3ny60012yuzqhebudnph","_id":"cln2n3nzo001pyuzq8jh9htv9"},{"post_id":"cln2n3nxp000vyuzqhw8f76sm","category_id":"cln2n3nzb001lyuzqfk0g2gkk","_id":"cln2n3nzs001tyuzq0emzblgh"},{"post_id":"cln2n3ny2000zyuzqffhn3of3","category_id":"cln2n3nym001dyuzq7xrz6hxn","_id":"cln2n3nzt001vyuzqa3erg36z"}],"PostTag":[{"post_id":"cln2n3nua0001yuzq9a7e0r2s","tag_id":"cln2n3nv70005yuzq7hcp11gu","_id":"cln2n3nw0000byuzq174r13pq"},{"post_id":"cln2n3nur0003yuzq1ucse03q","tag_id":"cln2n3nv70005yuzq7hcp11gu","_id":"cln2n3nwh000hyuzq281d28et"},{"post_id":"cln2n3nv90006yuzqfsxw1q8m","tag_id":"cln2n3nv70005yuzq7hcp11gu","_id":"cln2n3nww000nyuzq3g850qdo"},{"post_id":"cln2n3nvd0007yuzqa2bc2f12","tag_id":"cln2n3nwu000myuzq7urw27ot","_id":"cln2n3nxh000uyuzq349ebqvd"},{"post_id":"cln2n3nvi0008yuzq87oz3pzo","tag_id":"cln2n3nx7000syuzq9lpe2wjh","_id":"cln2n3ny40010yuzq42jhbiyr"},{"post_id":"cln2n3nw1000cyuzqao9h2fd7","tag_id":"cln2n3ny1000yyuzqds1j85f9","_id":"cln2n3nyb0014yuzqaxod2yqq"},{"post_id":"cln2n3nw9000dyuzq2sf495dy","tag_id":"cln2n3ny60013yuzq9fqw7msw","_id":"cln2n3nyg0018yuzq3p720hwk"},{"post_id":"cln2n3nwi000iyuzqcpcw94lc","tag_id":"cln2n3ny60013yuzq9fqw7msw","_id":"cln2n3nyl001cyuzq0y478q8q"},{"post_id":"cln2n3nwl000jyuzqerbm196k","tag_id":"cln2n3ny60013yuzq9fqw7msw","_id":"cln2n3nys001gyuzqbegy59pg"},{"post_id":"cln2n3nx2000pyuzqbjte21ps","tag_id":"cln2n3nyn001fyuzq0j6z65v2","_id":"cln2n3nyy001kyuzqd312fc5z"},{"post_id":"cln2n3nx9000tyuzq49b89jkh","tag_id":"cln2n3ny60013yuzq9fqw7msw","_id":"cln2n3nzi001oyuzq3hy9bse2"},{"post_id":"cln2n3nxp000vyuzqhw8f76sm","tag_id":"cln2n3nzh001nyuzqev4a5p72","_id":"cln2n3nzs001syuzq5qzb01i9"},{"post_id":"cln2n3ny2000zyuzqffhn3of3","tag_id":"cln2n3nyn001fyuzq0j6z65v2","_id":"cln2n3nzt001uyuzqbw5afxi8"}],"Tag":[{"name":"Flink","_id":"cln2n3nv70005yuzq7hcp11gu"},{"name":"MongoDB","_id":"cln2n3nwu000myuzq7urw27ot"},{"name":"Links","_id":"cln2n3nx7000syuzq9lpe2wjh"},{"name":"Scala","_id":"cln2n3ny1000yyuzqds1j85f9"},{"name":"Spark","_id":"cln2n3ny60013yuzq9fqw7msw"},{"name":"Algorithm","_id":"cln2n3nyn001fyuzq0j6z65v2"},{"name":"Java","_id":"cln2n3nzh001nyuzqev4a5p72"}]}}